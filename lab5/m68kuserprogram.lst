680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 28 Mar 2022      Time: 16:49:15          Source: C:\USERS\MARTINCHUA\DESKTOP\CPEN412\CPEN412\LAB5\M68KUSERPROGRAM.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  2026      
0800000A  203C 0000   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  001C      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  200E      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  2012      
0800002C  23FC 0800   40                   move.l    #heap,__heap           pointer to free memory
08000030  2042 0800 
08000034  2016      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  0C24      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; C:\USERS\MARTINCHUA\DESKTOP\CPEN412\CPEN412\LAB5\SUBMISSION\LAB5.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdio.h>
                      46   ; #include <string.h>
                      47   ; #include <ctype.h>
                      48   ; //IMPORTANT
                      49   ; //
                      50   ; // Uncomment one of the two #defines below
                      51   ; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
                      52   ; // 0B000000 for running programs from dram
                      53   ; //
                      54   ; // In your labs, you will initially start by designing a system with SRam and later move to
                      55   ; // Dram, so these constants will need to be changed based on the version of the system you have
                      56   ; // building
                      57   ; //
                      58   ; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
                      59   ; // is based around Dram so #define accordingly before building
                      60   ; // #define StartOfExceptionVectorTable 0x08030000
                      61   ; #define StartOfExceptionVectorTable 0x0B000000
                      62   ; /**********************************************************************************************
                      63   ; **	Parallel port addresses
                      64   ; **********************************************************************************************/
                      65   ; #define PortA   *(volatile unsigned char *)(0x00400000)
                      66   ; #define PortB   *(volatile unsigned char *)(0x00400002)
                      67   ; #define PortC   *(volatile unsigned char *)(0x00400004)
                      68   ; #define PortD   *(volatile unsigned char *)(0x00400006)
                      69   ; #define PortE   *(volatile unsigned char *)(0x00400008)
                      70   ; /*********************************************************************************************
                      71   ; **	Hex 7 seg displays port addresses
                      72   ; *********************************************************************************************/
                      73   ; #define HEX_A        *(volatile unsigned char *)(0x00400010)
                      74   ; #define HEX_B        *(volatile unsigned char *)(0x00400012)
                      75   ; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
                      76   ; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
                      77   ; /**********************************************************************************************
                      78   ; **	LCD display port addresses
                      79   ; **********************************************************************************************/
                      80   ; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
                      81   ; #define LCDdata      *(volatile unsigned char *)(0x00400022)
                      82   ; /********************************************************************************************
                      83   ; **	Timer Port addresses
                      84   ; *********************************************************************************************/
                      85   ; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
                      86   ; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
                      87   ; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
                      88   ; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
                      89   ; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
                      90   ; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
                      91   ; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
                      92   ; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
                      93   ; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
                      94   ; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
                      95   ; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
                      96   ; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
                      97   ; /*********************************************************************************************
                      98   ; **	RS232 port addresses
                      99   ; *********************************************************************************************/
                     100   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                     101   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                     102   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                     103   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                     104   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                     105   ; /*********************************************************************************************
                     106   ; **	PIA 1 and 2 port addresses
                     107   ; *********************************************************************************************/
                     108   ; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
                     109   ; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
                     110   ; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
                     111   ; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
                     112   ; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
                     113   ; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
                     114   ; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
                     115   ; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
                     116   ; /*************************************************************
                     117   ; ** I2C Controller registers
                     118   ; **************************************************************/
                     119   ; // I2C Registers
                     120   ; #define I2C_PRERLO     (*(volatile unsigned char *)(0x00408000))
                     121   ; #define I2C_PRERHI     (*(volatile unsigned char *)(0x00408002))
                     122   ; #define I2C_CTR        (*(volatile unsigned char *)(0x00408004))
                     123   ; #define I2C_TXR        (*(volatile unsigned char *)(0x00408006))
                     124   ; #define I2C_RXR        (*(volatile unsigned char *)(0x00408006))
                     125   ; #define I2C_CR         (*(volatile unsigned char *)(0x00408008))
                     126   ; #define I2C_SR         (*(volatile unsigned char *)(0x00408008))
                     127   ; // STA bit == cmd[7], W bit == cmd[4], IACK bit == cmd[0] -> 8'b1001_0001
                     128   ; #define WSTART 0x91
                     129   ; // STO bit == cmd[6], W bit == cmd[4] -> 8'b0101_0000
                     130   ; #define WSTOP 0x50
                     131   ; // W bit = cmd[4] -> 8'b0001_0000
                     132   ; #define WRITE 0x10
                     133   ; // R bit == cmd[5], NACK bit == cmd[3], IACK bit == cmd[0] -> 8'b0010_1001
                     134   ; #define READNACK 0x29
                     135   ; // R bit == cmd[5], NACK bit == cmd[3], IACK bit == cmd[0] -> 8'b0010_0001
                     136   ; #define READACK 0x21
                     137   ; #define EEPROM_SLAVE_BANK0 0xA0
                     138   ; #define EEPROM_SLAVE_BANK1 0xA8
                     139   ; #define ADCDAC_SLAVE 0x90
                     140   ; // 8'b01xx_0xxx
                     141   ; #define DAC_OUT_ON 0x40
                     142   ; // 8'b00xx_0xxx
                     143   ; #define DAC_OUT_OFF 0x00
                     144   ; // 8'b0000_0101
                     145   ; #define ADC_AUTO_INCREMENT_A1 0x05
                     146   ; #define ADC_AUTO_INCREMENT_A0 0x04
                     147   ; /*********************************************************************************************************************************
                     148   ; (( DO NOT initialise global variables here, do it main even if you want 0
                     149   ; (( it's a limitation of the compiler
                     150   ; (( YOU HAVE BEEN WARNED
                     151   ; *********************************************************************************************************************************/
                     152   ; unsigned int i, x, y, z, PortA_Count;
                     153   ; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count ;
                     154   ; /*******************************************************************************************
                     155   ; ** Function Prototypes
                     156   ; *******************************************************************************************/
                     157   ; void Wait1ms(void);
                     158   ; void Wait3ms(void);
                     159   ; void Wait250ms(void);
                     160   ; void Wait750ms(void);
                     161   ; void Wait1s(void);
                     162   ; void Init_LCD(void) ;
                     163   ; void LCDOutchar(int c);
                     164   ; void LCDOutMess(char *theMessage);
                     165   ; void LCDClearln(void);
                     166   ; void LCDline1Message(char *theMessage);
                     167   ; void LCDline2Message(char *theMessage);
                     168   ; int sprintf(char *out, const char *format, ...) ;
                     169   ; // I2C
                     170   ; void I2C_Init(void);
                     171   ; void I2C_Start(void);
                     172   ; void I2C_Stop(void);
                     173   ; void WaitForTIPFlagReset(void);
                     174   ; void WaitForRxACK(void);
                     175   ; void WriteI2CChar(char data, char slave_addr, char memaddr_hi, char memaddr_lo);
                     176   ; void ReadI2CChar(char *data, char slave_addr, char memaddr_hi, char memaddr_lo);
                     177   ; void WriteI2CPage(char slave_addr, char memaddr_hi, char memaddr_lo, int size);
                     178   ; void ReadI2CPage(char *data, char slave_addr, char memaddr_hi, char memaddr_lo, int size);
                     179   ; void GetMemAddr(char *hi, char *lo);
                     180   ; void GetBank(char *bank);
                     181   ; void Wait(void);
                     182   ; void readADC(void);
                     183   ; /*****************************************************************************************
                     184   ; **	Interrupt service routine for Timers
                     185   ; **
                     186   ; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
                     187   ; **  out which timer is producing the interrupt
                     188   ; **
                     189   ; *****************************************************************************************/
                     190   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     191   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     192   ; char xtod(int c)
                     193   ; {
                     194   _xtod:
0800003E  4E56 0000  195          link      A6,#0
08000042  2F02       196          move.l    D2,-(A7)
08000044  242E 0008  197          move.l    8(A6),D2
                     198   ; if ((char)(c) <= (char)('9'))
08000048  0C02 0039  199          cmp.b     #57,D2
0800004C  6E08       200          bgt.s     xtod_1
                     201   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
0800004E  1002       202          move.b    D2,D0
08000050  0400 0030  203          sub.b     #48,D0
08000054  6014       204          bra.s     xtod_3
                     205   xtod_1:
                     206   ; else if((char)(c) > (char)('F'))    // assume lower case
08000056  0C02 0046  207          cmp.b     #70,D2
0800005A  6F08       208          ble.s     xtod_4
                     209   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
0800005C  1002       210          move.b    D2,D0
0800005E  0400 0057  211          sub.b     #87,D0
08000062  6006       212          bra.s     xtod_3
                     213   xtod_4:
                     214   ; else
                     215   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
08000064  1002       216          move.b    D2,D0
08000066  0400 0037  217          sub.b     #55,D0
                     218   xtod_3:
0800006A  241F       219          move.l    (A7)+,D2
0800006C  4E5E       220          unlk      A6
0800006E  4E75       221          rts
                     222   ; }
                     223   ; int Get2HexDigits(char *CheckSumPtr)
                     224   ; {
                     225   _Get2HexDigits:
08000070  4E56 0000  226          link      A6,#0
08000074  2F02       227          move.l    D2,-(A7)
                     228   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
08000076  2F00       229          move.l    D0,-(A7)
08000078  4EB9 0800  230          jsr       __getch
0800007C  02C8      
0800007E  2200       231          move.l    D0,D1
08000080  201F       232          move.l    (A7)+,D0
08000082  2F01       233          move.l    D1,-(A7)
08000084  4EB9 0800  234          jsr       _xtod
08000088  003E      
0800008A  584F       235          addq.w    #4,A7
0800008C  C0BC 0000  236          and.l     #255,D0
08000090  00FF      
08000092  E980       237          asl.l     #4,D0
08000094  2F00       238          move.l    D0,-(A7)
08000096  2F01       239          move.l    D1,-(A7)
08000098  4EB9 0800  240          jsr       __getch
0800009C  02C8      
0800009E  221F       241          move.l    (A7)+,D1
080000A0  2F00       242          move.l    D0,-(A7)
080000A2  4EB9 0800  243          jsr       _xtod
080000A6  003E      
080000A8  584F       244          addq.w    #4,A7
080000AA  2200       245          move.l    D0,D1
080000AC  201F       246          move.l    (A7)+,D0
080000AE  C2BC 0000  247          and.l     #255,D1
080000B2  00FF      
080000B4  8081       248          or.l      D1,D0
080000B6  2400       249          move.l    D0,D2
                     250   ; if(CheckSumPtr)
080000B8  4AAE 0008  251          tst.l     8(A6)
080000BC  6706       252          beq.s     Get2HexDigits_1
                     253   ; *CheckSumPtr += i ;
080000BE  206E 0008  254          move.l    8(A6),A0
080000C2  D510       255          add.b     D2,(A0)
                     256   Get2HexDigits_1:
                     257   ; return i ;
080000C4  2002       258          move.l    D2,D0
080000C6  241F       259          move.l    (A7)+,D2
080000C8  4E5E       260          unlk      A6
080000CA  4E75       261          rts
                     262   ; }
                     263   ; int Get4HexDigits(char *CheckSumPtr)
                     264   ; {
                     265   _Get4HexDigits:
080000CC  4E56 0000  266          link      A6,#0
                     267   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000D0  2F2E 0008  268          move.l    8(A6),-(A7)
080000D4  4EB9 0800  269          jsr       _Get2HexDigits
080000D8  0070      
080000DA  584F       270          addq.w    #4,A7
080000DC  E180       271          asl.l     #8,D0
080000DE  2F00       272          move.l    D0,-(A7)
080000E0  2F2E 0008  273          move.l    8(A6),-(A7)
080000E4  4EB9 0800  274          jsr       _Get2HexDigits
080000E8  0070      
080000EA  584F       275          addq.w    #4,A7
080000EC  2200       276          move.l    D0,D1
080000EE  201F       277          move.l    (A7)+,D0
080000F0  8081       278          or.l      D1,D0
080000F2  4E5E       279          unlk      A6
080000F4  4E75       280          rts
                     281   ; }
                     282   ; int Get6HexDigits(char *CheckSumPtr)
                     283   ; {
                     284   _Get6HexDigits:
080000F6  4E56 0000  285          link      A6,#0
                     286   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000FA  2F2E 0008  287          move.l    8(A6),-(A7)
080000FE  4EB9 0800  288          jsr       _Get4HexDigits
08000102  00CC      
08000104  584F       289          addq.w    #4,A7
08000106  E180       290          asl.l     #8,D0
08000108  2F00       291          move.l    D0,-(A7)
0800010A  2F2E 0008  292          move.l    8(A6),-(A7)
0800010E  4EB9 0800  293          jsr       _Get2HexDigits
08000112  0070      
08000114  584F       294          addq.w    #4,A7
08000116  2200       295          move.l    D0,D1
08000118  201F       296          move.l    (A7)+,D0
0800011A  8081       297          or.l      D1,D0
0800011C  4E5E       298          unlk      A6
0800011E  4E75       299          rts
                     300   ; }
                     301   ; int Get8HexDigits(char *CheckSumPtr)
                     302   ; {
                     303   _Get8HexDigits:
08000120  4E56 0000  304          link      A6,#0
                     305   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
08000124  2F2E 0008  306          move.l    8(A6),-(A7)
08000128  4EB9 0800  307          jsr       _Get4HexDigits
0800012C  00CC      
0800012E  584F       308          addq.w    #4,A7
08000130  E180       309          asl.l     #8,D0
08000132  E180       310          asl.l     #8,D0
08000134  2F00       311          move.l    D0,-(A7)
08000136  2F2E 0008  312          move.l    8(A6),-(A7)
0800013A  4EB9 0800  313          jsr       _Get4HexDigits
0800013E  00CC      
08000140  584F       314          addq.w    #4,A7
08000142  2200       315          move.l    D0,D1
08000144  201F       316          move.l    (A7)+,D0
08000146  8081       317          or.l      D1,D0
08000148  4E5E       318          unlk      A6
0800014A  4E75       319          rts
                     320   ; }
                     321   ; void Timer_ISR()
                     322   ; {
                     323   _Timer_ISR:
                     324   ; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
0800014C  1039 0040  325          move.b    4194354,D0
08000150  0032      
08000152  0C00 0001  326          cmp.b     #1,D0
08000156  661A       327          bne.s     Timer_ISR_1
                     328   ; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
08000158  13FC 0003  329          move.b    #3,4194354
0800015C  0040 0032 
                     330   ; PortA = Timer1Count++ ;     // increment an LED count on PortA with each tick of Timer 1
08000160  1039 0800  331          move.b    _Timer1Count.L,D0
08000164  203A      
08000166  5239 0800  332          addq.b    #1,_Timer1Count.L
0800016A  203A      
0800016C  13C0 0040  333          move.b    D0,4194304
08000170  0000      
                     334   Timer_ISR_1:
                     335   ; }
                     336   ; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
08000172  1039 0040  337          move.b    4194358,D0
08000176  0036      
08000178  0C00 0001  338          cmp.b     #1,D0
0800017C  661A       339          bne.s     Timer_ISR_3
                     340   ; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0800017E  13FC 0003  341          move.b    #3,4194358
08000182  0040 0036 
                     342   ; PortC = Timer2Count++ ;     // increment an LED count on PortC with each tick of Timer 2
08000186  1039 0800  343          move.b    _Timer2Count.L,D0
0800018A  203C      
0800018C  5239 0800  344          addq.b    #1,_Timer2Count.L
08000190  203C      
08000192  13C0 0040  345          move.b    D0,4194308
08000196  0004      
                     346   Timer_ISR_3:
                     347   ; }
                     348   ; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
08000198  1039 0040  349          move.b    4194362,D0
0800019C  003A      
0800019E  0C00 0001  350          cmp.b     #1,D0
080001A2  661A       351          bne.s     Timer_ISR_5
                     352   ; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080001A4  13FC 0003  353          move.b    #3,4194362
080001A8  0040 003A 
                     354   ; HEX_A = Timer3Count++ ;     // increment a HEX count on Port HEX_A with each tick of Timer 3
080001AC  1039 0800  355          move.b    _Timer3Count.L,D0
080001B0  203E      
080001B2  5239 0800  356          addq.b    #1,_Timer3Count.L
080001B6  203E      
080001B8  13C0 0040  357          move.b    D0,4194320
080001BC  0010      
                     358   Timer_ISR_5:
                     359   ; }
                     360   ; if(Timer4Status == 1) {         // Did Timer 4 produce the Interrupt?
080001BE  1039 0040  361          move.b    4194366,D0
080001C2  003E      
080001C4  0C00 0001  362          cmp.b     #1,D0
080001C8  661A       363          bne.s     Timer_ISR_7
                     364   ; Timer4Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080001CA  13FC 0003  365          move.b    #3,4194366
080001CE  0040 003E 
                     366   ; HEX_B = Timer4Count++ ;     // increment a HEX count on HEX_B with each tick of Timer 4
080001D2  1039 0800  367          move.b    _Timer4Count.L,D0
080001D6  2040      
080001D8  5239 0800  368          addq.b    #1,_Timer4Count.L
080001DC  2040      
080001DE  13C0 0040  369          move.b    D0,4194322
080001E2  0012      
                     370   Timer_ISR_7:
080001E4  4E75       371          rts
                     372   ; }
                     373   ; }
                     374   ; /*****************************************************************************************
                     375   ; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
                     376   ; **  Add your code here to poll Status register and clear interrupt
                     377   ; *****************************************************************************************/
                     378   ; void ACIA_ISR()
                     379   ; {}
                     380   _ACIA_ISR:
080001E6  4E75       381          rts
                     382   ; /***************************************************************************************
                     383   ; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
                     384   ; **  Add your code here to poll Status register and clear interrupt
                     385   ; *****************************************************************************************/
                     386   ; void PIA_ISR()
                     387   ; {}
                     388   _PIA_ISR:
080001E8  4E75       389          rts
                     390   ; /***********************************************************************************
                     391   ; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
                     392   ; ************************************************************************************/
                     393   ; void Key2PressISR()
                     394   ; {}
                     395   _Key2PressISR:
080001EA  4E75       396          rts
                     397   ; /***********************************************************************************
                     398   ; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
                     399   ; ************************************************************************************/
                     400   ; void Key1PressISR()
                     401   ; {}
                     402   _Key1PressISR:
080001EC  4E75       403          rts
                     404   ; /************************************************************************************
                     405   ; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
                     406   ; ************************************************************************************/
                     407   ; void Wait1ms(void)
                     408   ; {
                     409   _Wait1ms:
080001EE  2F02       410          move.l    D2,-(A7)
                     411   ; int  i ;
                     412   ; for(i = 0; i < 1000; i ++)
080001F0  4282       413          clr.l     D2
                     414   Wait1ms_1:
080001F2  0C82 0000  415          cmp.l     #1000,D2
080001F6  03E8      
080001F8  6C04       416          bge.s     Wait1ms_3
080001FA  5282       417          addq.l    #1,D2
080001FC  60F4       418          bra       Wait1ms_1
                     419   Wait1ms_3:
080001FE  241F       420          move.l    (A7)+,D2
08000200  4E75       421          rts
                     422   ; ;
                     423   ; }
                     424   ; /************************************************************************************
                     425   ; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
                     426   ; **************************************************************************************/
                     427   ; void Wait3ms(void)
                     428   ; {
                     429   _Wait3ms:
08000202  2F02       430          move.l    D2,-(A7)
                     431   ; int i ;
                     432   ; for(i = 0; i < 3; i++)
08000204  4282       433          clr.l     D2
                     434   Wait3ms_1:
08000206  0C82 0000  435          cmp.l     #3,D2
0800020A  0003      
0800020C  6C0A       436          bge.s     Wait3ms_3
                     437   ; Wait1ms() ;
0800020E  4EB9 0800  438          jsr       _Wait1ms
08000212  01EE      
08000214  5282       439          addq.l    #1,D2
08000216  60EE       440          bra       Wait3ms_1
                     441   Wait3ms_3:
08000218  241F       442          move.l    (A7)+,D2
0800021A  4E75       443          rts
                     444   ; }
                     445   ; void Wait250ms(void)
                     446   ; {
                     447   _Wait250ms:
0800021C  2F02       448          move.l    D2,-(A7)
                     449   ; int i ;
                     450   ; for(i = 0; i < 250; i++)
0800021E  4282       451          clr.l     D2
                     452   Wait250ms_1:
08000220  0C82 0000  453          cmp.l     #250,D2
08000224  00FA      
08000226  6C0A       454          bge.s     Wait250ms_3
                     455   ; Wait1ms() ;
08000228  4EB9 0800  456          jsr       _Wait1ms
0800022C  01EE      
0800022E  5282       457          addq.l    #1,D2
08000230  60EE       458          bra       Wait250ms_1
                     459   Wait250ms_3:
08000232  241F       460          move.l    (A7)+,D2
08000234  4E75       461          rts
                     462   ; }
                     463   ; void Wait750ms(void)
                     464   ; {
                     465   _Wait750ms:
08000236  2F02       466          move.l    D2,-(A7)
                     467   ; int i ;
                     468   ; for(i = 0; i < 750; i++)
08000238  4282       469          clr.l     D2
                     470   Wait750ms_1:
0800023A  0C82 0000  471          cmp.l     #750,D2
0800023E  02EE      
08000240  6C0A       472          bge.s     Wait750ms_3
                     473   ; Wait1ms() ;
08000242  4EB9 0800  474          jsr       _Wait1ms
08000246  01EE      
08000248  5282       475          addq.l    #1,D2
0800024A  60EE       476          bra       Wait750ms_1
                     477   Wait750ms_3:
0800024C  241F       478          move.l    (A7)+,D2
0800024E  4E75       479          rts
                     480   ; }
                     481   ; /************************************************************************************
                     482   ; **  Subroutine to give the 68000 something useless to do to waste 1s
                     483   ; **************************************************************************************/
                     484   ; void Wait1s(void){
                     485   _Wait1s:
08000250  2F02       486          move.l    D2,-(A7)
                     487   ; int i;
                     488   ; for(i = 0; i < 1000; i++)
08000252  4282       489          clr.l     D2
                     490   Wait1s_1:
08000254  0C82 0000  491          cmp.l     #1000,D2
08000258  03E8      
0800025A  6C0A       492          bge.s     Wait1s_3
                     493   ; Wait1ms();
0800025C  4EB9 0800  494          jsr       _Wait1ms
08000260  01EE      
08000262  5282       495          addq.l    #1,D2
08000264  60EE       496          bra       Wait1s_1
                     497   Wait1s_3:
08000266  241F       498          move.l    (A7)+,D2
08000268  4E75       499          rts
                     500   ; }
                     501   ; /*********************************************************************************************
                     502   ; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
                     503   ; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
                     504   ; *********************************************************************************************/
                     505   ; void Init_LCD(void)
                     506   ; {
                     507   _Init_LCD:
                     508   ; LCDcommand = 0x0c ;
0800026A  13FC 000C  509          move.b    #12,4194336
0800026E  0040 0020 
                     510   ; Wait3ms() ;
08000272  4EB9 0800  511          jsr       _Wait3ms
08000276  0202      
                     512   ; LCDcommand = 0x38 ;
08000278  13FC 0038  513          move.b    #56,4194336
0800027C  0040 0020 
                     514   ; Wait3ms() ;
08000280  4EB9 0800  515          jsr       _Wait3ms
08000284  0202      
08000286  4E75       516          rts
                     517   ; }
                     518   ; /*********************************************************************************************
                     519   ; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     520   ; *********************************************************************************************/
                     521   ; void Init_RS232(void)
                     522   ; {
                     523   _Init_RS232:
                     524   ; RS232_Control = 0x15 ; //  %00010101 set up 6850 uses divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
08000288  13FC 0015  525          move.b    #21,4194368
0800028C  0040 0040 
                     526   ; RS232_Baud = 0x1 ;      // program baud rate generator 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
08000290  13FC 0001  527          move.b    #1,4194372
08000294  0040 0044 
08000298  4E75       528          rts
                     529   ; }
                     530   ; /*********************************************************************************************************
                     531   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     532   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     533   ; **  to allow the board to communicate with HyperTerminal Program
                     534   ; **
                     535   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     536   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     537   ; **  call _putch() also
                     538   ; *********************************************************************************************************/
                     539   ; int _putch( int c)
                     540   ; {
                     541   __putch:
0800029A  4E56 0000  542          link      A6,#0
                     543   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     544   _putch_1:
0800029E  1039 0040  545          move.b    4194368,D0
080002A2  0040      
080002A4  C03C 0002  546          and.b     #2,D0
080002A8  0C00 0002  547          cmp.b     #2,D0
080002AC  6702       548          beq.s     _putch_3
080002AE  60EE       549          bra       _putch_1
                     550   _putch_3:
                     551   ; ;
                     552   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
080002B0  202E 0008  553          move.l    8(A6),D0
080002B4  C0BC 0000  554          and.l     #127,D0
080002B8  007F      
080002BA  13C0 0040  555          move.b    D0,4194370
080002BE  0042      
                     556   ; return c ;                                              // putchar() expects the character to be returned
080002C0  202E 0008  557          move.l    8(A6),D0
080002C4  4E5E       558          unlk      A6
080002C6  4E75       559          rts
                     560   ; }
                     561   ; /*********************************************************************************************************
                     562   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     563   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     564   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     565   ; **
                     566   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     567   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
                     568   ; **  call _getch() also
                     569   ; *********************************************************************************************************/
                     570   ; int _getch( void )
                     571   ; {
                     572   __getch:
080002C8  4E56 FFFC  573          link      A6,#-4
                     574   ; char c ;
                     575   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     576   _getch_1:
080002CC  1039 0040  577          move.b    4194368,D0
080002D0  0040      
080002D2  C03C 0001  578          and.b     #1,D0
080002D6  0C00 0001  579          cmp.b     #1,D0
080002DA  6702       580          beq.s     _getch_3
080002DC  60EE       581          bra       _getch_1
                     582   _getch_3:
                     583   ; ;
                     584   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
080002DE  1039 0040  585          move.b    4194370,D0
080002E2  0042      
080002E4  C0BC 0000  586          and.l     #255,D0
080002E8  00FF      
080002EA  C0BC 0000  587          and.l     #127,D0
080002EE  007F      
080002F0  4E5E       588          unlk      A6
080002F2  4E75       589          rts
                     590   ; }
                     591   ; /******************************************************************************
                     592   ; **  Subroutine to output a single character to the 2 row LCD display
                     593   ; **  It is assumed the character is an ASCII code and it will be displayed at the
                     594   ; **  current cursor position
                     595   ; *******************************************************************************/
                     596   ; void LCDOutchar(int c)
                     597   ; {
                     598   _LCDOutchar:
080002F4  4E56 0000  599          link      A6,#0
                     600   ; LCDdata = (char)(c);
080002F8  202E 0008  601          move.l    8(A6),D0
080002FC  13C0 0040  602          move.b    D0,4194338
08000300  0022      
                     603   ; Wait1ms() ;
08000302  4EB9 0800  604          jsr       _Wait1ms
08000306  01EE      
08000308  4E5E       605          unlk      A6
0800030A  4E75       606          rts
                     607   ; }
                     608   ; /**********************************************************************************
                     609   ; *subroutine to output a message at the current cursor position of the LCD display
                     610   ; ************************************************************************************/
                     611   ; void LCDOutMessage(char *theMessage)
                     612   ; {
                     613   _LCDOutMessage:
0800030C  4E56 FFFC  614          link      A6,#-4
                     615   ; char c ;
                     616   ; while((c = *theMessage++) != 0)     // output characters from the string until NULL
                     617   LCDOutMessage_1:
08000310  206E 0008  618          move.l    8(A6),A0
08000314  52AE 0008  619          addq.l    #1,8(A6)
08000318  1D50 FFFF  620          move.b    (A0),-1(A6)
0800031C  1010       621          move.b    (A0),D0
0800031E  6714       622          beq.s     LCDOutMessage_3
                     623   ; LCDOutchar(c) ;
08000320  122E FFFF  624          move.b    -1(A6),D1
08000324  4881       625          ext.w     D1
08000326  48C1       626          ext.l     D1
08000328  2F01       627          move.l    D1,-(A7)
0800032A  4EB9 0800  628          jsr       _LCDOutchar
0800032E  02F4      
08000330  584F       629          addq.w    #4,A7
08000332  60DC       630          bra       LCDOutMessage_1
                     631   LCDOutMessage_3:
08000334  4E5E       632          unlk      A6
08000336  4E75       633          rts
                     634   ; }
                     635   ; /******************************************************************************
                     636   ; *subroutine to clear the line by issuing 24 space characters
                     637   ; *******************************************************************************/
                     638   ; void LCDClearln(void)
                     639   ; {
                     640   _LCDClearln:
08000338  2F02       641          move.l    D2,-(A7)
                     642   ; int i ;
                     643   ; for(i = 0; i < 24; i ++)
0800033A  4282       644          clr.l     D2
                     645   LCDClearln_1:
0800033C  0C82 0000  646          cmp.l     #24,D2
08000340  0018      
08000342  6C10       647          bge.s     LCDClearln_3
                     648   ; LCDOutchar(' ') ;       // write a space char to the LCD display
08000344  4878 0020  649          pea       32
08000348  4EB9 0800  650          jsr       _LCDOutchar
0800034C  02F4      
0800034E  584F       651          addq.w    #4,A7
08000350  5282       652          addq.l    #1,D2
08000352  60E8       653          bra       LCDClearln_1
                     654   LCDClearln_3:
08000354  241F       655          move.l    (A7)+,D2
08000356  4E75       656          rts
                     657   ; }
                     658   ; /******************************************************************************
                     659   ; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
                     660   ; *******************************************************************************/
                     661   ; void LCDLine1Message(char *theMessage)
                     662   ; {
                     663   _LCDLine1Message:
08000358  4E56 0000  664          link      A6,#0
                     665   ; LCDcommand = 0x80 ;
0800035C  13FC 0080  666          move.b    #128,4194336
08000360  0040 0020 
                     667   ; Wait3ms();
08000364  4EB9 0800  668          jsr       _Wait3ms
08000368  0202      
                     669   ; LCDClearln() ;
0800036A  4EB9 0800  670          jsr       _LCDClearln
0800036E  0338      
                     671   ; LCDcommand = 0x80 ;
08000370  13FC 0080  672          move.b    #128,4194336
08000374  0040 0020 
                     673   ; Wait3ms() ;
08000378  4EB9 0800  674          jsr       _Wait3ms
0800037C  0202      
                     675   ; LCDOutMessage(theMessage) ;
0800037E  2F2E 0008  676          move.l    8(A6),-(A7)
08000382  4EB9 0800  677          jsr       _LCDOutMessage
08000386  030C      
08000388  584F       678          addq.w    #4,A7
0800038A  4E5E       679          unlk      A6
0800038C  4E75       680          rts
                     681   ; }
                     682   ; /******************************************************************************
                     683   ; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
                     684   ; *******************************************************************************/
                     685   ; void LCDLine2Message(char *theMessage)
                     686   ; {
                     687   _LCDLine2Message:
0800038E  4E56 0000  688          link      A6,#0
                     689   ; LCDcommand = 0xC0 ;
08000392  13FC 00C0  690          move.b    #192,4194336
08000396  0040 0020 
                     691   ; Wait3ms();
0800039A  4EB9 0800  692          jsr       _Wait3ms
0800039E  0202      
                     693   ; LCDClearln() ;
080003A0  4EB9 0800  694          jsr       _LCDClearln
080003A4  0338      
                     695   ; LCDcommand = 0xC0 ;
080003A6  13FC 00C0  696          move.b    #192,4194336
080003AA  0040 0020 
                     697   ; Wait3ms() ;
080003AE  4EB9 0800  698          jsr       _Wait3ms
080003B2  0202      
                     699   ; LCDOutMessage(theMessage) ;
080003B4  2F2E 0008  700          move.l    8(A6),-(A7)
080003B8  4EB9 0800  701          jsr       _LCDOutMessage
080003BC  030C      
080003BE  584F       702          addq.w    #4,A7
080003C0  4E5E       703          unlk      A6
080003C2  4E75       704          rts
                     705   ; }
                     706   ; void I2C_Start(void){
                     707   _I2C_Start:
                     708   ; // Start condition is 8'b1000_0000
                     709   ; I2C_CR = 0x80;
080003C4  13FC 0080  710          move.b    #128,4227080
080003C8  0040 8008 
080003CC  4E75       711          rts
                     712   ; }
                     713   ; void I2C_Stop(void){
                     714   _I2C_Stop:
                     715   ; // Stop condition is 8'b0100_0000
                     716   ; I2C_CR = 0x40;
080003CE  13FC 0040  717          move.b    #64,4227080
080003D2  0040 8008 
080003D6  4E75       718          rts
                     719   ; }
                     720   ; void I2C_Init(void){
                     721   _I2C_Init:
                     722   ; // Make sure I2C core is off
                     723   ; I2C_CTR = (char)0x00;
080003D8  4239 0040  724          clr.b     4227076
080003DC  8004      
                     725   ; // Prescale register clock, 25Mhz / (5 * 100KHz) - 1  -> 0x0031
                     726   ; I2C_PRERLO = (char)0x31;
080003DE  13FC 0031  727          move.b    #49,4227072
080003E2  0040 8000 
                     728   ; I2C_PRERHI = (char)0x00;
080003E6  4239 0040  729          clr.b     4227074
080003EA  8002      
                     730   ; // Enable I2C Core, no interrupt enabled
                     731   ; // 8'b10xx_xxxx
                     732   ; I2C_CTR = (char)0x80;
080003EC  13FC 0080  733          move.b    #128,4227076
080003F0  0040 8004 
080003F4  4E75       734          rts
                     735   ; }
                     736   ; void WaitForRxACK(void){
                     737   _WaitForRxACK:
                     738   ; // Read RxACK bit from Status Register, should be '0'
                     739   ; // Status Register [7] == 0
                     740   ; while(((I2C_SR >> 7) & 1) == 1){
                     741   WaitForRxACK_1:
080003F6  1039 0040  742          move.b    4227080,D0
080003FA  8008      
080003FC  EE08       743          lsr.b     #7,D0
080003FE  C03C 0001  744          and.b     #1,D0
08000402  0C00 0001  745          cmp.b     #1,D0
08000406  6602       746          bne.s     WaitForRxACK_3
                     747   ; }
08000408  60EC       748          bra       WaitForRxACK_1
                     749   WaitForRxACK_3:
0800040A  4E75       750          rts
                     751   ; }
                     752   ; void WaitForTIPFlagReset(void){
                     753   _WaitForTIPFlagReset:
                     754   ; // Status Register [1] == 0
                     755   ; while((I2C_SR >> 1) & 1){
                     756   WaitForTIPFlagReset_1:
0800040C  1039 0040  757          move.b    4227080,D0
08000410  8008      
08000412  E208       758          lsr.b     #1,D0
08000414  C03C 0001  759          and.b     #1,D0
08000418  6702       760          beq.s     WaitForTIPFlagReset_3
                     761   ; }
0800041A  60F0       762          bra       WaitForTIPFlagReset_1
                     763   WaitForTIPFlagReset_3:
0800041C  4E75       764          rts
                     765   ; }
                     766   ; void Wait(void){
                     767   _Wait:
                     768   ; WaitForTIPFlagReset();
0800041E  4EB9 0800  769          jsr       _WaitForTIPFlagReset
08000422  040C      
                     770   ; WaitForRxACK();
08000424  4EB9 0800  771          jsr       _WaitForRxACK
08000428  03F6      
0800042A  4E75       772          rts
                     773   ; }
                     774   ; void TransmitI2C(char data, char cr){
                     775   _TransmitI2C:
0800042C  4E56 0000  776          link      A6,#0
                     777   ; I2C_TXR = data;
08000430  13EE 000B  778          move.b    11(A6),4227078
08000434  0040 8006 
                     779   ; I2C_CR = cr;
08000438  13EE 000F  780          move.b    15(A6),4227080
0800043C  0040 8008 
                     781   ; Wait();
08000440  4EB9 0800  782          jsr       _Wait
08000444  041E      
08000446  4E5E       783          unlk      A6
08000448  4E75       784          rts
                     785   ; }
                     786   ; // Assumptions: addr is at most 7 bits wide
                     787   ; void WriteI2CChar(char data, char slave_addr, char memaddr_hi, char memaddr_lo){
                     788   _WriteI2CChar:
0800044A  4E56 0000  789          link      A6,#0
0800044E  2F0A       790          move.l    A2,-(A7)
08000450  45F9 0800  791          lea       _TransmitI2C.L,A2
08000454  042C      
                     792   ; // Check before doing anything
                     793   ; WaitForTIPFlagReset();
08000456  4EB9 0800  794          jsr       _WaitForTIPFlagReset
0800045A  040C      
                     795   ; // Set slave to write mode, Generate start command
                     796   ; TransmitI2C(slave_addr, WSTART);
0800045C  4878 0091  797          pea       145
08000460  122E 000F  798          move.b    15(A6),D1
08000464  4881       799          ext.w     D1
08000466  48C1       800          ext.l     D1
08000468  2F01       801          move.l    D1,-(A7)
0800046A  4E92       802          jsr       (A2)
0800046C  504F       803          addq.w    #8,A7
                     804   ; // Write Mem Address and set W bit
                     805   ; TransmitI2C(memaddr_hi, WRITE);
0800046E  4878 0010  806          pea       16
08000472  122E 0013  807          move.b    19(A6),D1
08000476  4881       808          ext.w     D1
08000478  48C1       809          ext.l     D1
0800047A  2F01       810          move.l    D1,-(A7)
0800047C  4E92       811          jsr       (A2)
0800047E  504F       812          addq.w    #8,A7
                     813   ; TransmitI2C(memaddr_lo, WRITE);
08000480  4878 0010  814          pea       16
08000484  122E 0017  815          move.b    23(A6),D1
08000488  4881       816          ext.w     D1
0800048A  48C1       817          ext.l     D1
0800048C  2F01       818          move.l    D1,-(A7)
0800048E  4E92       819          jsr       (A2)
08000490  504F       820          addq.w    #8,A7
                     821   ; // Write data transmit register, set STO bit, set W bit. 
                     822   ; TransmitI2C(data, WSTOP);
08000492  4878 0050  823          pea       80
08000496  122E 000B  824          move.b    11(A6),D1
0800049A  4881       825          ext.w     D1
0800049C  48C1       826          ext.l     D1
0800049E  2F01       827          move.l    D1,-(A7)
080004A0  4E92       828          jsr       (A2)
080004A2  504F       829          addq.w    #8,A7
080004A4  245F       830          move.l    (A7)+,A2
080004A6  4E5E       831          unlk      A6
080004A8  4E75       832          rts
                     833   ; }
                     834   ; // Assumptions: slave_addr is in write mode
                     835   ; void ReadI2CChar(char *data, char slave_addr, char memaddr_hi, char memaddr_lo){
                     836   _ReadI2CChar:
080004AA  4E56 0000  837          link      A6,#0
080004AE  2F0A       838          move.l    A2,-(A7)
080004B0  45F9 0800  839          lea       _TransmitI2C.L,A2
080004B4  042C      
                     840   ; // Check before doing anything
                     841   ; WaitForTIPFlagReset();
080004B6  4EB9 0800  842          jsr       _WaitForTIPFlagReset
080004BA  040C      
                     843   ; // Set slave to write mode, Generate start command
                     844   ; TransmitI2C(slave_addr, WSTART);
080004BC  4878 0091  845          pea       145
080004C0  122E 000F  846          move.b    15(A6),D1
080004C4  4881       847          ext.w     D1
080004C6  48C1       848          ext.l     D1
080004C8  2F01       849          move.l    D1,-(A7)
080004CA  4E92       850          jsr       (A2)
080004CC  504F       851          addq.w    #8,A7
                     852   ; // Write Mem Address and set W bit
                     853   ; TransmitI2C(memaddr_hi, WRITE);
080004CE  4878 0010  854          pea       16
080004D2  122E 0013  855          move.b    19(A6),D1
080004D6  4881       856          ext.w     D1
080004D8  48C1       857          ext.l     D1
080004DA  2F01       858          move.l    D1,-(A7)
080004DC  4E92       859          jsr       (A2)
080004DE  504F       860          addq.w    #8,A7
                     861   ; TransmitI2C(memaddr_lo, WRITE);
080004E0  4878 0010  862          pea       16
080004E4  122E 0017  863          move.b    23(A6),D1
080004E8  4881       864          ext.w     D1
080004EA  48C1       865          ext.l     D1
080004EC  2F01       866          move.l    D1,-(A7)
080004EE  4E92       867          jsr       (A2)
080004F0  504F       868          addq.w    #8,A7
                     869   ; // Set slave to read mode and generate start command for reading
                     870   ; TransmitI2C(slave_addr | 1, WSTART);
080004F2  4878 0091  871          pea       145
080004F6  122E 000F  872          move.b    15(A6),D1
080004FA  823C 0001  873          or.b      #1,D1
080004FE  4881       874          ext.w     D1
08000500  48C1       875          ext.l     D1
08000502  2F01       876          move.l    D1,-(A7)
08000504  4E92       877          jsr       (A2)
08000506  504F       878          addq.w    #8,A7
                     879   ; // Read data transmit register, set R bit, set NACK and IACK
                     880   ; I2C_CR = READNACK;
08000508  13FC 0029  881          move.b    #41,4227080
0800050C  0040 8008 
                     882   ; // Wait for read data to come in
                     883   ; while((I2C_SR & 1) !=1){}
                     884   ReadI2CChar_1:
08000510  1039 0040  885          move.b    4227080,D0
08000514  8008      
08000516  C03C 0001  886          and.b     #1,D0
0800051A  0C00 0001  887          cmp.b     #1,D0
0800051E  6702       888          beq.s     ReadI2CChar_3
08000520  60EE       889          bra       ReadI2CChar_1
                     890   ReadI2CChar_3:
                     891   ; *data = I2C_RXR;
08000522  206E 0008  892          move.l    8(A6),A0
08000526  10B9 0040  893          move.b    4227078,(A0)
0800052A  8006      
                     894   ; I2C_CR = 0x41;
0800052C  13FC 0041  895          move.b    #65,4227080
08000530  0040 8008 
08000534  245F       896          move.l    (A7)+,A2
08000536  4E5E       897          unlk      A6
08000538  4E75       898          rts
                     899   ; }
                     900   ; // Increment logic, handles bank overflows, handle write addressing boundaries
                     901   ; void incrI2C(char *slave_addr, char *memaddr_hi, char *memaddr_lo, int read, int addr_change){
                     902   _incrI2C:
0800053A  4E56 FFFC  903          link      A6,#-4
0800053E  48E7 3E30  904          movem.l   D2/D3/D4/D5/D6/A2/A3,-(A7)
08000542  45F9 0800  905          lea       _TransmitI2C.L,A2
08000546  042C      
08000548  242E 0008  906          move.l    8(A6),D2
0800054C  262E 0010  907          move.l    16(A6),D3
08000550  282E 000C  908          move.l    12(A6),D4
08000554  47F9 0800  909          lea       _printf.L,A3
08000558  11D8      
                     910   ; char zeewo = 0x00;
0800055A  4205       911          clr.b     D5
                     912   ; char one = 0x01;
0800055C  7C01       913          moveq     #1,D6
                     914   ; int edge = 0;
0800055E  42AE FFFC  915          clr.l     -4(A6)
                     916   ; // printf("\r\n %x %x%x", *slave_addr, *memaddr_hi, *memaddr_lo);
                     917   ; if ((*memaddr_lo & 0xFF) == 0xFF){
08000562  2043       918          move.l    D3,A0
08000564  1010       919          move.b    (A0),D0
08000566  4880       920          ext.w     D0
08000568  C07C 00FF  921          and.w     #255,D0
0800056C  0C40 00FF  922          cmp.w     #255,D0
08000570  6600 011E  923          bne       incrI2C_1
                     924   ; if ((*memaddr_hi & 0xFF) == 0xFF){ // Change bank
08000574  2044       925          move.l    D4,A0
08000576  1010       926          move.b    (A0),D0
08000578  4880       927          ext.w     D0
0800057A  C07C 00FF  928          and.w     #255,D0
0800057E  0C40 00FF  929          cmp.w     #255,D0
08000582  6600 0102  930          bne       incrI2C_3
                     931   ; *slave_addr = ((*slave_addr & 0x8) == 0x8) ? EEPROM_SLAVE_BANK0 : EEPROM_SLAVE_BANK1;
08000586  2042       932          move.l    D2,A0
08000588  1010       933          move.b    (A0),D0
0800058A  C03C 0008  934          and.b     #8,D0
0800058E  0C00 0008  935          cmp.b     #8,D0
08000592  6606       936          bne.s     incrI2C_5
08000594  303C 00A0  937          move.w    #160,D0
08000598  6004       938          bra.s     incrI2C_6
                     939   incrI2C_5:
0800059A  303C 00A8  940          move.w    #168,D0
                     941   incrI2C_6:
0800059E  2042       942          move.l    D2,A0
080005A0  1080       943          move.b    D0,(A0)
                     944   ; *memaddr_lo = zeewo;
080005A2  2043       945          move.l    D3,A0
080005A4  1085       946          move.b    D5,(A0)
                     947   ; *memaddr_hi = zeewo;
080005A6  2044       948          move.l    D4,A0
080005A8  1085       949          move.b    D5,(A0)
                     950   ; if(read & 1){
080005AA  202E 0014  951          move.l    20(A6),D0
080005AE  C0BC 0000  952          and.l     #1,D0
080005B2  0001      
080005B4  6700 0066  953          beq       incrI2C_7
                     954   ; printf("\r\n Changing slave and restart %x", *slave_addr);
080005B8  2042       955          move.l    D2,A0
080005BA  1210       956          move.b    (A0),D1
080005BC  4881       957          ext.w     D1
080005BE  48C1       958          ext.l     D1
080005C0  2F01       959          move.l    D1,-(A7)
080005C2  4879 0800  960          pea       @lab5_1.L
080005C6  1B66      
080005C8  4E93       961          jsr       (A3)
080005CA  504F       962          addq.w    #8,A7
                     963   ; TransmitI2C(*slave_addr, WSTART);
080005CC  4878 0091  964          pea       145
080005D0  2042       965          move.l    D2,A0
080005D2  1210       966          move.b    (A0),D1
080005D4  4881       967          ext.w     D1
080005D6  48C1       968          ext.l     D1
080005D8  2F01       969          move.l    D1,-(A7)
080005DA  4E92       970          jsr       (A2)
080005DC  504F       971          addq.w    #8,A7
                     972   ; TransmitI2C(*memaddr_hi, WRITE);
080005DE  4878 0010  973          pea       16
080005E2  2044       974          move.l    D4,A0
080005E4  1210       975          move.b    (A0),D1
080005E6  4881       976          ext.w     D1
080005E8  48C1       977          ext.l     D1
080005EA  2F01       978          move.l    D1,-(A7)
080005EC  4E92       979          jsr       (A2)
080005EE  504F       980          addq.w    #8,A7
                     981   ; TransmitI2C(*memaddr_lo, WRITE);
080005F0  4878 0010  982          pea       16
080005F4  2043       983          move.l    D3,A0
080005F6  1210       984          move.b    (A0),D1
080005F8  4881       985          ext.w     D1
080005FA  48C1       986          ext.l     D1
080005FC  2F01       987          move.l    D1,-(A7)
080005FE  4E92       988          jsr       (A2)
08000600  504F       989          addq.w    #8,A7
                     990   ; TransmitI2C(*slave_addr | 1, WSTART);
08000602  4878 0091  991          pea       145
08000606  2042       992          move.l    D2,A0
08000608  1210       993          move.b    (A0),D1
0800060A  823C 0001  994          or.b      #1,D1
0800060E  4881       995          ext.w     D1
08000610  48C1       996          ext.l     D1
08000612  2F01       997          move.l    D1,-(A7)
08000614  4E92       998          jsr       (A2)
08000616  504F       999          addq.w    #8,A7
08000618  6000 0038 1000          bra       incrI2C_8
                    1001   incrI2C_7:
                    1002   ; }
                    1003   ; else{
                    1004   ; TransmitI2C(*slave_addr, WSTART);
0800061C  4878 0091 1005          pea       145
08000620  2042      1006          move.l    D2,A0
08000622  1210      1007          move.b    (A0),D1
08000624  4881      1008          ext.w     D1
08000626  48C1      1009          ext.l     D1
08000628  2F01      1010          move.l    D1,-(A7)
0800062A  4E92      1011          jsr       (A2)
0800062C  504F      1012          addq.w    #8,A7
                    1013   ; TransmitI2C(*memaddr_hi, WRITE);
0800062E  4878 0010 1014          pea       16
08000632  2044      1015          move.l    D4,A0
08000634  1210      1016          move.b    (A0),D1
08000636  4881      1017          ext.w     D1
08000638  48C1      1018          ext.l     D1
0800063A  2F01      1019          move.l    D1,-(A7)
0800063C  4E92      1020          jsr       (A2)
0800063E  504F      1021          addq.w    #8,A7
                    1022   ; TransmitI2C(*memaddr_lo, WRITE);
08000640  4878 0010 1023          pea       16
08000644  2043      1024          move.l    D3,A0
08000646  1210      1025          move.b    (A0),D1
08000648  4881      1026          ext.w     D1
0800064A  48C1      1027          ext.l     D1
0800064C  2F01      1028          move.l    D1,-(A7)
0800064E  4E92      1029          jsr       (A2)
08000650  504F      1030          addq.w    #8,A7
                    1031   incrI2C_8:
                    1032   ; }
                    1033   ; printf("\r\n HIT EDGE CASE %x %x%x", *slave_addr, *memaddr_hi, *memaddr_lo);
08000652  2043      1034          move.l    D3,A0
08000654  1210      1035          move.b    (A0),D1
08000656  4881      1036          ext.w     D1
08000658  48C1      1037          ext.l     D1
0800065A  2F01      1038          move.l    D1,-(A7)
0800065C  2044      1039          move.l    D4,A0
0800065E  1210      1040          move.b    (A0),D1
08000660  4881      1041          ext.w     D1
08000662  48C1      1042          ext.l     D1
08000664  2F01      1043          move.l    D1,-(A7)
08000666  2042      1044          move.l    D2,A0
08000668  1210      1045          move.b    (A0),D1
0800066A  4881      1046          ext.w     D1
0800066C  48C1      1047          ext.l     D1
0800066E  2F01      1048          move.l    D1,-(A7)
08000670  4879 0800 1049          pea       @lab5_2.L
08000674  1B88      
08000676  4E93      1050          jsr       (A3)
08000678  DEFC 0010 1051          add.w     #16,A7
                    1052   ; edge = 1;
0800067C  2D7C 0000 1053          move.l    #1,-4(A6)
08000680  0001 FFFC 
08000684  6008      1054          bra.s     incrI2C_4
                    1055   incrI2C_3:
                    1056   ; }
                    1057   ; else{
                    1058   ; *memaddr_hi += one;
08000686  2044      1059          move.l    D4,A0
08000688  DD10      1060          add.b     D6,(A0)
                    1061   ; *memaddr_lo = zeewo;
0800068A  2043      1062          move.l    D3,A0
0800068C  1085      1063          move.b    D5,(A0)
                    1064   incrI2C_4:
0800068E  6004      1065          bra.s     incrI2C_2
                    1066   incrI2C_1:
                    1067   ; }
                    1068   ; }
                    1069   ; else{
                    1070   ; *memaddr_lo += one;
08000690  2043      1071          move.l    D3,A0
08000692  DD10      1072          add.b     D6,(A0)
                    1073   incrI2C_2:
                    1074   ; }
                    1075   ; if(read == 0 && addr_change == 1){
08000694  202E 0014 1076          move.l    20(A6),D0
08000698  6600 0050 1077          bne       incrI2C_9
0800069C  202E 0018 1078          move.l    24(A6),D0
080006A0  0C80 0000 1079          cmp.l     #1,D0
080006A4  0001      
080006A6  6600 0042 1080          bne       incrI2C_9
                    1081   ; printf("\r\n Write address boundary, restarting without changing slave");
080006AA  4879 0800 1082          pea       @lab5_3.L
080006AE  1BA2      
080006B0  4E93      1083          jsr       (A3)
080006B2  584F      1084          addq.w    #4,A7
                    1085   ; TransmitI2C(*slave_addr, WSTART);
080006B4  4878 0091 1086          pea       145
080006B8  2042      1087          move.l    D2,A0
080006BA  1210      1088          move.b    (A0),D1
080006BC  4881      1089          ext.w     D1
080006BE  48C1      1090          ext.l     D1
080006C0  2F01      1091          move.l    D1,-(A7)
080006C2  4E92      1092          jsr       (A2)
080006C4  504F      1093          addq.w    #8,A7
                    1094   ; TransmitI2C(*memaddr_hi, WRITE);
080006C6  4878 0010 1095          pea       16
080006CA  2044      1096          move.l    D4,A0
080006CC  1210      1097          move.b    (A0),D1
080006CE  4881      1098          ext.w     D1
080006D0  48C1      1099          ext.l     D1
080006D2  2F01      1100          move.l    D1,-(A7)
080006D4  4E92      1101          jsr       (A2)
080006D6  504F      1102          addq.w    #8,A7
                    1103   ; TransmitI2C(*memaddr_lo, WRITE);
080006D8  4878 0010 1104          pea       16
080006DC  2043      1105          move.l    D3,A0
080006DE  1210      1106          move.b    (A0),D1
080006E0  4881      1107          ext.w     D1
080006E2  48C1      1108          ext.l     D1
080006E4  2F01      1109          move.l    D1,-(A7)
080006E6  4E92      1110          jsr       (A2)
080006E8  504F      1111          addq.w    #8,A7
                    1112   incrI2C_9:
080006EA  4CDF 0C7C 1113          movem.l   (A7)+,D2/D3/D4/D5/D6/A2/A3
080006EE  4E5E      1114          unlk      A6
080006F0  4E75      1115          rts
                    1116   ; }
                    1117   ; }
                    1118   ; void WriteI2CPage(char slave_addr, char memaddr_hi, char memaddr_lo, int size){
                    1119   _WriteI2CPage:
080006F2  4E56 0000 1120          link      A6,#0
080006F6  48E7 3C30 1121          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
080006FA  45F9 0800 1122          lea       _printf.L,A2
080006FE  11D8      
08000700  47F9 0800 1123          lea       _TransmitI2C.L,A3
08000704  042C      
08000706  282E 0014 1124          move.l    20(A6),D4
                    1125   ; // Data is array of size "size", max size 128
                    1126   ; // WriteI2CChar();
                    1127   ; int i;
                    1128   ; char data = 0;
0800070A  4203      1129          clr.b     D3
                    1130   ; int full_addr = (memaddr_hi) << 8 | memaddr_lo;
0800070C  102E 000F 1131          move.b    15(A6),D0
08000710  4880      1132          ext.w     D0
08000712  48C0      1133          ext.l     D0
08000714  E180      1134          asl.l     #8,D0
08000716  122E 0013 1135          move.b    19(A6),D1
0800071A  4881      1136          ext.w     D1
0800071C  48C1      1137          ext.l     D1
0800071E  8081      1138          or.l      D1,D0
08000720  2A00      1139          move.l    D0,D5
                    1140   ; // Check before doing anything
                    1141   ; WaitForTIPFlagReset();
08000722  4EB9 0800 1142          jsr       _WaitForTIPFlagReset
08000726  040C      
                    1143   ; // Set slave to write mode, Generate start command
                    1144   ; TransmitI2C(slave_addr, WSTART);
08000728  4878 0091 1145          pea       145
0800072C  122E 000B 1146          move.b    11(A6),D1
08000730  4881      1147          ext.w     D1
08000732  48C1      1148          ext.l     D1
08000734  2F01      1149          move.l    D1,-(A7)
08000736  4E93      1150          jsr       (A3)
08000738  504F      1151          addq.w    #8,A7
                    1152   ; // Write Mem Address and set W bit
                    1153   ; TransmitI2C(memaddr_hi, WRITE);
0800073A  4878 0010 1154          pea       16
0800073E  122E 000F 1155          move.b    15(A6),D1
08000742  4881      1156          ext.w     D1
08000744  48C1      1157          ext.l     D1
08000746  2F01      1158          move.l    D1,-(A7)
08000748  4E93      1159          jsr       (A3)
0800074A  504F      1160          addq.w    #8,A7
                    1161   ; TransmitI2C(memaddr_lo, WRITE);
0800074C  4878 0010 1162          pea       16
08000750  122E 0013 1163          move.b    19(A6),D1
08000754  4881      1164          ext.w     D1
08000756  48C1      1165          ext.l     D1
08000758  2F01      1166          move.l    D1,-(A7)
0800075A  4E93      1167          jsr       (A3)
0800075C  504F      1168          addq.w    #8,A7
                    1169   ; for (i = 0; i <= size; i++){
0800075E  4282      1170          clr.l     D2
                    1171   WriteI2CPage_1:
08000760  B484      1172          cmp.l     D4,D2
08000762  6E00 0116 1173          bgt       WriteI2CPage_3
                    1174   ; // Write without stop unless we're at the end of a write boundary
                    1175   ; if (i >= (size-1) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF) || ((((full_addr+1) % 0x80) == 0))&& i !=0){
08000766  2004      1176          move.l    D4,D0
08000768  5380      1177          subq.l    #1,D0
0800076A  B480      1178          cmp.l     D0,D2
0800076C  6C00 0044 1179          bge       WriteI2CPage_6
08000770  102E 000F 1180          move.b    15(A6),D0
08000774  4880      1181          ext.w     D0
08000776  C07C 00FF 1182          and.w     #255,D0
0800077A  0C40 00FF 1183          cmp.w     #255,D0
0800077E  6610      1184          bne.s     WriteI2CPage_7
08000780  102E 0013 1185          move.b    19(A6),D0
08000784  4880      1186          ext.w     D0
08000786  C07C 00FF 1187          and.w     #255,D0
0800078A  0C40 00FF 1188          cmp.w     #255,D0
0800078E  6722      1189          beq.s     WriteI2CPage_6
                    1190   WriteI2CPage_7:
08000790  2005      1191          move.l    D5,D0
08000792  5280      1192          addq.l    #1,D0
08000794  2F00      1193          move.l    D0,-(A7)
08000796  4878 0080 1194          pea       128
0800079A  4EB9 0800 1195          jsr       LDIV
0800079E  10A0      
080007A0  202F 0004 1196          move.l    4(A7),D0
080007A4  504F      1197          addq.w    #8,A7
080007A6  4A80      1198          tst.l     D0
080007A8  6600 006A 1199          bne       WriteI2CPage_4
080007AC  4A82      1200          tst.l     D2
080007AE  6700 0064 1201          beq       WriteI2CPage_4
                    1202   WriteI2CPage_6:
                    1203   ; TransmitI2C(data,WSTOP);
080007B2  4878 0050 1204          pea       80
080007B6  4883      1205          ext.w     D3
080007B8  48C3      1206          ext.l     D3
080007BA  2F03      1207          move.l    D3,-(A7)
080007BC  4E93      1208          jsr       (A3)
080007BE  504F      1209          addq.w    #8,A7
                    1210   ; printf("\r\n--------------");
080007C0  4879 0800 1211          pea       @lab5_4.L
080007C4  1BE0      
080007C6  4E92      1212          jsr       (A2)
080007C8  584F      1213          addq.w    #4,A7
                    1214   ; printf("\r\nfulladdr: %x", full_addr);
080007CA  2F05      1215          move.l    D5,-(A7)
080007CC  4879 0800 1216          pea       @lab5_5.L
080007D0  1BF2      
080007D2  4E92      1217          jsr       (A2)
080007D4  504F      1218          addq.w    #8,A7
                    1219   ; printf("\r\ndata: %x", i);
080007D6  2F02      1220          move.l    D2,-(A7)
080007D8  4879 0800 1221          pea       @lab5_6.L
080007DC  1C02      
080007DE  4E92      1222          jsr       (A2)
080007E0  504F      1223          addq.w    #8,A7
                    1224   ; printf("\r\n--------------");
080007E2  4879 0800 1225          pea       @lab5_4.L
080007E6  1BE0      
080007E8  4E92      1226          jsr       (A2)
080007EA  584F      1227          addq.w    #4,A7
                    1228   ; if(i != size)
080007EC  B484      1229          cmp.l     D4,D2
080007EE  671E      1230          beq.s     WriteI2CPage_8
                    1231   ; incrI2C(&slave_addr, &memaddr_hi, &memaddr_lo, 0, 1);
080007F0  4878 0001 1232          pea       1
080007F4  42A7      1233          clr.l     -(A7)
080007F6  486E 0013 1234          pea       19(A6)
080007FA  486E 000F 1235          pea       15(A6)
080007FE  486E 000B 1236          pea       11(A6)
08000802  4EB9 0800 1237          jsr       _incrI2C
08000806  053A      
08000808  DEFC 0014 1238          add.w     #20,A7
0800080C  6004      1239          bra.s     WriteI2CPage_9
                    1240   WriteI2CPage_8:
                    1241   ; else return;
0800080E  6000 006A 1242          bra       WriteI2CPage_3
                    1243   WriteI2CPage_9:
08000812  6028      1244          bra.s     WriteI2CPage_5
                    1245   WriteI2CPage_4:
                    1246   ; }
                    1247   ; else{
                    1248   ; TransmitI2C(data,WRITE);
08000814  4878 0010 1249          pea       16
08000818  4883      1250          ext.w     D3
0800081A  48C3      1251          ext.l     D3
0800081C  2F03      1252          move.l    D3,-(A7)
0800081E  4E93      1253          jsr       (A3)
08000820  504F      1254          addq.w    #8,A7
                    1255   ; // Page crossing, if it happens, is handled inside incrI2C
                    1256   ; incrI2C(&slave_addr, &memaddr_hi, &memaddr_lo, 0, 0);
08000822  42A7      1257          clr.l     -(A7)
08000824  42A7      1258          clr.l     -(A7)
08000826  486E 0013 1259          pea       19(A6)
0800082A  486E 000F 1260          pea       15(A6)
0800082E  486E 000B 1261          pea       11(A6)
08000832  4EB9 0800 1262          jsr       _incrI2C
08000836  053A      
08000838  DEFC 0014 1263          add.w     #20,A7
                    1264   WriteI2CPage_5:
                    1265   ; }
                    1266   ; if (i %1000 == 0 || size == 0)
0800083C  2F02      1267          move.l    D2,-(A7)
0800083E  4878 03E8 1268          pea       1000
08000842  4EB9 0800 1269          jsr       LDIV
08000846  10A0      
08000848  202F 0004 1270          move.l    4(A7),D0
0800084C  504F      1271          addq.w    #8,A7
0800084E  4A80      1272          tst.l     D0
08000850  6704      1273          beq.s     WriteI2CPage_13
08000852  4A84      1274          tst.l     D4
08000854  6610      1275          bne.s     WriteI2CPage_11
                    1276   WriteI2CPage_13:
                    1277   ; printf("\r\nWriting: %2x ", data);
08000856  4883      1278          ext.w     D3
08000858  48C3      1279          ext.l     D3
0800085A  2F03      1280          move.l    D3,-(A7)
0800085C  4879 0800 1281          pea       @lab5_7.L
08000860  1C0E      
08000862  4E92      1282          jsr       (A2)
08000864  504F      1283          addq.w    #8,A7
                    1284   WriteI2CPage_11:
                    1285   ; if (data == 0x7f) data = 0;
08000866  0C03 007F 1286          cmp.b     #127,D3
0800086A  6604      1287          bne.s     WriteI2CPage_14
0800086C  4203      1288          clr.b     D3
0800086E  6002      1289          bra.s     WriteI2CPage_15
                    1290   WriteI2CPage_14:
                    1291   ; else data++;
08000870  5203      1292          addq.b    #1,D3
                    1293   WriteI2CPage_15:
                    1294   ; full_addr++;
08000872  5285      1295          addq.l    #1,D5
08000874  5282      1296          addq.l    #1,D2
08000876  6000 FEE8 1297          bra       WriteI2CPage_1
                    1298   WriteI2CPage_3:
0800087A  4CDF 0C3C 1299          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
0800087E  4E5E      1300          unlk      A6
08000880  4E75      1301          rts
                    1302   ; // printf("%x ", full_addr);
                    1303   ; }
                    1304   ; }
                    1305   ; void ReadI2CPage(char *data, char slave_addr, char memaddr_hi, char memaddr_lo, int size){
                    1306   _ReadI2CPage:
08000882  4E56 FFFC 1307          link      A6,#-4
08000886  48E7 3020 1308          movem.l   D2/D3/A2,-(A7)
0800088A  262E 0018 1309          move.l    24(A6),D3
0800088E  45F9 0800 1310          lea       _TransmitI2C.L,A2
08000892  042C      
                    1311   ; // Data is array of size "size", max size 128
                    1312   ; int i;
                    1313   ; int temp = 0;
08000894  42AE FFFC 1314          clr.l     -4(A6)
                    1315   ; // Check before doing anything
                    1316   ; WaitForTIPFlagReset();
08000898  4EB9 0800 1317          jsr       _WaitForTIPFlagReset
0800089C  040C      
                    1318   ; // Set slave to write mode, Generate start command
                    1319   ; TransmitI2C(slave_addr, WSTART);
0800089E  4878 0091 1320          pea       145
080008A2  122E 000F 1321          move.b    15(A6),D1
080008A6  4881      1322          ext.w     D1
080008A8  48C1      1323          ext.l     D1
080008AA  2F01      1324          move.l    D1,-(A7)
080008AC  4E92      1325          jsr       (A2)
080008AE  504F      1326          addq.w    #8,A7
                    1327   ; // Write Mem Address and set W bit
                    1328   ; TransmitI2C(memaddr_hi, WRITE);
080008B0  4878 0010 1329          pea       16
080008B4  122E 0013 1330          move.b    19(A6),D1
080008B8  4881      1331          ext.w     D1
080008BA  48C1      1332          ext.l     D1
080008BC  2F01      1333          move.l    D1,-(A7)
080008BE  4E92      1334          jsr       (A2)
080008C0  504F      1335          addq.w    #8,A7
                    1336   ; TransmitI2C(memaddr_lo, WRITE);
080008C2  4878 0010 1337          pea       16
080008C6  122E 0017 1338          move.b    23(A6),D1
080008CA  4881      1339          ext.w     D1
080008CC  48C1      1340          ext.l     D1
080008CE  2F01      1341          move.l    D1,-(A7)
080008D0  4E92      1342          jsr       (A2)
080008D2  504F      1343          addq.w    #8,A7
                    1344   ; // Set slave to read mode and generate start command for reading
                    1345   ; TransmitI2C(slave_addr | 1, WSTART);
080008D4  4878 0091 1346          pea       145
080008D8  122E 000F 1347          move.b    15(A6),D1
080008DC  823C 0001 1348          or.b      #1,D1
080008E0  4881      1349          ext.w     D1
080008E2  48C1      1350          ext.l     D1
080008E4  2F01      1351          move.l    D1,-(A7)
080008E6  4E92      1352          jsr       (A2)
080008E8  504F      1353          addq.w    #8,A7
                    1354   ; for (i = 0; i <= size; i++){
080008EA  4282      1355          clr.l     D2
                    1356   ReadI2CPage_1:
080008EC  B483      1357          cmp.l     D3,D2
080008EE  6E00 00C4 1358          bgt       ReadI2CPage_3
                    1359   ; // Read without NACK unless we're at the end
                    1360   ; if (i == (size) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF)){
080008F2  B483      1361          cmp.l     D3,D2
080008F4  6720      1362          beq.s     ReadI2CPage_6
080008F6  102E 0013 1363          move.b    19(A6),D0
080008FA  4880      1364          ext.w     D0
080008FC  C07C 00FF 1365          and.w     #255,D0
08000900  0C40 00FF 1366          cmp.w     #255,D0
08000904  661A      1367          bne.s     ReadI2CPage_4
08000906  102E 0017 1368          move.b    23(A6),D0
0800090A  4880      1369          ext.w     D0
0800090C  C07C 00FF 1370          and.w     #255,D0
08000910  0C40 00FF 1371          cmp.w     #255,D0
08000914  660A      1372          bne.s     ReadI2CPage_4
                    1373   ReadI2CPage_6:
                    1374   ; I2C_CR = READNACK;
08000916  13FC 0029 1375          move.b    #41,4227080
0800091A  0040 8008 
0800091E  6008      1376          bra.s     ReadI2CPage_5
                    1377   ReadI2CPage_4:
                    1378   ; }
                    1379   ; else
                    1380   ; I2C_CR = READACK;
08000920  13FC 0021 1381          move.b    #33,4227080
08000924  0040 8008 
                    1382   ReadI2CPage_5:
                    1383   ; while((I2C_SR & 1) !=1){}
                    1384   ReadI2CPage_7:
08000928  1039 0040 1385          move.b    4227080,D0
0800092C  8008      
0800092E  C03C 0001 1386          and.b     #1,D0
08000932  0C00 0001 1387          cmp.b     #1,D0
08000936  6702      1388          beq.s     ReadI2CPage_9
08000938  60EE      1389          bra       ReadI2CPage_7
                    1390   ReadI2CPage_9:
                    1391   ; printf("%2x ", I2C_RXR);
0800093A  1239 0040 1392          move.b    4227078,D1
0800093E  8006      
08000940  C2BC 0000 1393          and.l     #255,D1
08000944  00FF      
08000946  2F01      1394          move.l    D1,-(A7)
08000948  4879 0800 1395          pea       @lab5_8.L
0800094C  1C1E      
0800094E  4EB9 0800 1396          jsr       _printf
08000952  11D8      
08000954  504F      1397          addq.w    #8,A7
                    1398   ; // data[i] = I2C_RXR;
                    1399   ; if (i == (size) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF))
08000956  B483      1400          cmp.l     D3,D2
08000958  6720      1401          beq.s     ReadI2CPage_12
0800095A  102E 0013 1402          move.b    19(A6),D0
0800095E  4880      1403          ext.w     D0
08000960  C07C 00FF 1404          and.w     #255,D0
08000964  0C40 00FF 1405          cmp.w     #255,D0
08000968  661A      1406          bne.s     ReadI2CPage_10
0800096A  102E 0017 1407          move.b    23(A6),D0
0800096E  4880      1408          ext.w     D0
08000970  C07C 00FF 1409          and.w     #255,D0
08000974  0C40 00FF 1410          cmp.w     #255,D0
08000978  660A      1411          bne.s     ReadI2CPage_10
                    1412   ReadI2CPage_12:
                    1413   ; I2C_CR = 0x41;
0800097A  13FC 0041 1414          move.b    #65,4227080
0800097E  0040 8008 
08000982  6008      1415          bra.s     ReadI2CPage_11
                    1416   ReadI2CPage_10:
                    1417   ; else
                    1418   ; I2C_CR = 0x01;
08000984  13FC 0001 1419          move.b    #1,4227080
08000988  0040 8008 
                    1420   ReadI2CPage_11:
                    1421   ; // Page crossing, if it happens, is handled inside incrI2C
                    1422   ; incrI2C(&slave_addr, &memaddr_hi, &memaddr_lo, 1 , 0);
0800098C  42A7      1423          clr.l     -(A7)
0800098E  4878 0001 1424          pea       1
08000992  486E 0017 1425          pea       23(A6)
08000996  486E 0013 1426          pea       19(A6)
0800099A  486E 000F 1427          pea       15(A6)
0800099E  4EB9 0800 1428          jsr       _incrI2C
080009A2  053A      
080009A4  DEFC 0014 1429          add.w     #20,A7
                    1430   ; if (i == size) return;
080009A8  B483      1431          cmp.l     D3,D2
080009AA  6602      1432          bne.s     ReadI2CPage_13
080009AC  6006      1433          bra.s     ReadI2CPage_3
                    1434   ReadI2CPage_13:
080009AE  5282      1435          addq.l    #1,D2
080009B0  6000 FF3A 1436          bra       ReadI2CPage_1
                    1437   ReadI2CPage_3:
080009B4  4CDF 040C 1438          movem.l   (A7)+,D2/D3/A2
080009B8  4E5E      1439          unlk      A6
080009BA  4E75      1440          rts
                    1441   ; }
                    1442   ; }
                    1443   ; void GetBank(char *bank){
                    1444   _GetBank:
080009BC  4E56 0000 1445          link      A6,#0
080009C0  2F02      1446          move.l    D2,-(A7)
                    1447   ; char asdf;
                    1448   ; while(1){
                    1449   GetBank_1:
                    1450   ; printf("\r\nSelect bank:\r\n0 - Bank 0\r\n1 - Bank 1");
080009C2  4879 0800 1451          pea       @lab5_9.L
080009C6  1C24      
080009C8  4EB9 0800 1452          jsr       _printf
080009CC  11D8      
080009CE  584F      1453          addq.w    #4,A7
                    1454   ; asdf = getchar();
080009D0  4EB9 0800 1455          jsr       _getch
080009D4  119C      
080009D6  1400      1456          move.b    D0,D2
                    1457   ; putchar(asdf);
080009D8  4882      1458          ext.w     D2
080009DA  48C2      1459          ext.l     D2
080009DC  2F02      1460          move.l    D2,-(A7)
080009DE  4EB9 0800 1461          jsr       _putch
080009E2  116C      
080009E4  584F      1462          addq.w    #4,A7
                    1463   ; if(asdf == '0'){
080009E6  0C02 0030 1464          cmp.b     #48,D2
080009EA  660A      1465          bne.s     GetBank_4
                    1466   ; *bank = EEPROM_SLAVE_BANK0;
080009EC  206E 0008 1467          move.l    8(A6),A0
080009F0  10BC 00A0 1468          move.b    #160,(A0)
                    1469   ; break;
080009F4  6020      1470          bra.s     GetBank_3
                    1471   GetBank_4:
                    1472   ; }
                    1473   ; else if (asdf == '1'){
080009F6  0C02 0031 1474          cmp.b     #49,D2
080009FA  660A      1475          bne.s     GetBank_6
                    1476   ; *bank = EEPROM_SLAVE_BANK1;
080009FC  206E 0008 1477          move.l    8(A6),A0
08000A00  10BC 00A8 1478          move.b    #168,(A0)
                    1479   ; break;
08000A04  6010      1480          bra.s     GetBank_3
                    1481   GetBank_6:
                    1482   ; }
                    1483   ; else{
                    1484   ; printf("\r\nInvalid selection.");
08000A06  4879 0800 1485          pea       @lab5_10.L
08000A0A  1C4C      
08000A0C  4EB9 0800 1486          jsr       _printf
08000A10  11D8      
08000A12  584F      1487          addq.w    #4,A7
08000A14  60AC      1488          bra       GetBank_1
                    1489   GetBank_3:
08000A16  241F      1490          move.l    (A7)+,D2
08000A18  4E5E      1491          unlk      A6
08000A1A  4E75      1492          rts
                    1493   ; }
                    1494   ; }       
                    1495   ; }
                    1496   ; void GetMemAddr(char *hi, char *lo){
                    1497   _GetMemAddr:
08000A1C  4E56 0000 1498          link      A6,#0
                    1499   ; printf("\r\nEnter mem address hi:");
08000A20  4879 0800 1500          pea       @lab5_11.L
08000A24  1C62      
08000A26  4EB9 0800 1501          jsr       _printf
08000A2A  11D8      
08000A2C  584F      1502          addq.w    #4,A7
                    1503   ; *hi = Get2HexDigits(0);
08000A2E  42A7      1504          clr.l     -(A7)
08000A30  4EB9 0800 1505          jsr       _Get2HexDigits
08000A34  0070      
08000A36  584F      1506          addq.w    #4,A7
08000A38  206E 0008 1507          move.l    8(A6),A0
08000A3C  1080      1508          move.b    D0,(A0)
                    1509   ; printf("\r\nEnter mem address lo:");
08000A3E  4879 0800 1510          pea       @lab5_12.L
08000A42  1C7A      
08000A44  4EB9 0800 1511          jsr       _printf
08000A48  11D8      
08000A4A  584F      1512          addq.w    #4,A7
                    1513   ; *lo = Get2HexDigits(0);
08000A4C  42A7      1514          clr.l     -(A7)
08000A4E  4EB9 0800 1515          jsr       _Get2HexDigits
08000A52  0070      
08000A54  584F      1516          addq.w    #4,A7
08000A56  206E 000C 1517          move.l    12(A6),A0
08000A5A  1080      1518          move.b    D0,(A0)
08000A5C  4E5E      1519          unlk      A6
08000A5E  4E75      1520          rts
                    1521   ; // TODO: Hex digit validation?
                    1522   ; }
                    1523   ; void blinky(){
                    1524   _blinky:
08000A60  48E7 0030 1525          movem.l   A2/A3,-(A7)
08000A64  45F9 0800 1526          lea       _TransmitI2C.L,A2
08000A68  042C      
08000A6A  47F9 0800 1527          lea       _Wait250ms.L,A3
08000A6E  021C      
                    1528   ; // Make sure nothing is going on in the I2C bus 
                    1529   ; WaitForTIPFlagReset();
08000A70  4EB9 0800 1530          jsr       _WaitForTIPFlagReset
08000A74  040C      
                    1531   ; // Write address
                    1532   ; TransmitI2C(ADCDAC_SLAVE, WSTART);
08000A76  4878 0091 1533          pea       145
08000A7A  4878 0090 1534          pea       144
08000A7E  4E92      1535          jsr       (A2)
08000A80  504F      1536          addq.w    #8,A7
                    1537   ; // Set control to OUT: 8'b01xx_0xxx
                    1538   ; TransmitI2C(DAC_OUT_ON, WRITE);
08000A82  4878 0010 1539          pea       16
08000A86  4878 0040 1540          pea       64
08000A8A  4E92      1541          jsr       (A2)
08000A8C  504F      1542          addq.w    #8,A7
                    1543   ; // Vout calculation: 5/256 * 8 bit data
                    1544   ; // Blinky until reset is pressed on DE1
                    1545   ; while(1){
                    1546   blinky_1:
                    1547   ; TransmitI2C(0xFF, WRITE);
08000A8E  4878 0010 1548          pea       16
08000A92  4878 00FF 1549          pea       255
08000A96  4E92      1550          jsr       (A2)
08000A98  504F      1551          addq.w    #8,A7
                    1552   ; Wait250ms();
08000A9A  4E93      1553          jsr       (A3)
                    1554   ; TransmitI2C(0x00, WRITE);
08000A9C  4878 0010 1555          pea       16
08000AA0  42A7      1556          clr.l     -(A7)
08000AA2  4E92      1557          jsr       (A2)
08000AA4  504F      1558          addq.w    #8,A7
                    1559   ; Wait250ms();
08000AA6  4E93      1560          jsr       (A3)
                    1561   ; TransmitI2C(0xFF, WRITE);
08000AA8  4878 0010 1562          pea       16
08000AAC  4878 00FF 1563          pea       255
08000AB0  4E92      1564          jsr       (A2)
08000AB2  504F      1565          addq.w    #8,A7
                    1566   ; Wait250ms();
08000AB4  4E93      1567          jsr       (A3)
                    1568   ; TransmitI2C(0x00, WRITE);
08000AB6  4878 0010 1569          pea       16
08000ABA  42A7      1570          clr.l     -(A7)
08000ABC  4E92      1571          jsr       (A2)
08000ABE  504F      1572          addq.w    #8,A7
                    1573   ; Wait250ms();
08000AC0  4E93      1574          jsr       (A3)
                    1575   ; TransmitI2C(0xFF, WRITE);
08000AC2  4878 0010 1576          pea       16
08000AC6  4878 00FF 1577          pea       255
08000ACA  4E92      1578          jsr       (A2)
08000ACC  504F      1579          addq.w    #8,A7
                    1580   ; Wait750ms();
08000ACE  4EB9 0800 1581          jsr       _Wait750ms
08000AD2  0236      
                    1582   ; TransmitI2C(0x00, WRITE);
08000AD4  4878 0010 1583          pea       16
08000AD8  42A7      1584          clr.l     -(A7)
08000ADA  4E92      1585          jsr       (A2)
08000ADC  504F      1586          addq.w    #8,A7
                    1587   ; Wait750ms();
08000ADE  4EB9 0800 1588          jsr       _Wait750ms
08000AE2  0236      
08000AE4  60A8      1589          bra       blinky_1
                    1590   ; }
                    1591   ; }
                    1592   ; // AN0: External analog source (remove jumper)
                    1593   ; // 2. AN1: On board potentiometer to supply a variable voltage.
                    1594   ; // 3. AN2: On board thermistor to measure temperature
                    1595   ; // 4. AN3: On board photo resistor to measure light intensity
                    1596   ; // 5. OUT: A RED LED which can be driven by the D/A output. 
                    1597   ; void readADC(void){
                    1598   _readADC:
08000AE6  4E56 FFFC 1599          link      A6,#-4
08000AEA  48E7 0030 1600          movem.l   A2/A3,-(A7)
08000AEE  45F9 0800 1601          lea       _printf.L,A2
08000AF2  11D8      
08000AF4  47F9 0800 1602          lea       _TransmitI2C.L,A3
08000AF8  042C      
                    1603   ; char Vchannel1, Vchannel2, Vchannel3, Vchannel4;
                    1604   ; while(1){
                    1605   readADC_1:
                    1606   ; // Make sure nothing is going on in the I2C bus 
                    1607   ; WaitForTIPFlagReset();
08000AFA  4EB9 0800 1608          jsr       _WaitForTIPFlagReset
08000AFE  040C      
                    1609   ; // Write address
                    1610   ; TransmitI2C(ADCDAC_SLAVE, WSTART);
08000B00  4878 0091 1611          pea       145
08000B04  4878 0090 1612          pea       144
08000B08  4E93      1613          jsr       (A3)
08000B0A  504F      1614          addq.w    #8,A7
                    1615   ; // Set control to auto increment starting at 1: 8'b0000_0101
                    1616   ; TransmitI2C(ADC_AUTO_INCREMENT_A0, WRITE);
08000B0C  4878 0010 1617          pea       16
08000B10  4878 0004 1618          pea       4
08000B14  4E93      1619          jsr       (A3)
08000B16  504F      1620          addq.w    #8,A7
                    1621   ; // Set slave to Read mode
                    1622   ; TransmitI2C(ADCDAC_SLAVE | 1, WSTART);
08000B18  4878 0091 1623          pea       145
08000B1C  4878 0091 1624          pea       145
08000B20  4E93      1625          jsr       (A3)
08000B22  504F      1626          addq.w    #8,A7
                    1627   ; // Read data transmit register, set R bit, set ACK
                    1628   ; I2C_CR = READACK;
08000B24  13FC 0021 1629          move.b    #33,4227080
08000B28  0040 8008 
                    1630   ; // Wait for read data to come in
                    1631   ; while((I2C_SR & 1) !=1){}
                    1632   readADC_4:
08000B2C  1039 0040 1633          move.b    4227080,D0
08000B30  8008      
08000B32  C03C 0001 1634          and.b     #1,D0
08000B36  0C00 0001 1635          cmp.b     #1,D0
08000B3A  6702      1636          beq.s     readADC_6
08000B3C  60EE      1637          bra       readADC_4
                    1638   readADC_6:
                    1639   ; Vchannel4 = I2C_RXR; // This is always invalid because the jumper isn't connected
08000B3E  1D79 0040 1640          move.b    4227078,-1(A6)
08000B42  8006 FFFF 
                    1641   ; I2C_CR = READACK;
08000B46  13FC 0021 1642          move.b    #33,4227080
08000B4A  0040 8008 
                    1643   ; while((I2C_SR & 1) !=1){}
                    1644   readADC_7:
08000B4E  1039 0040 1645          move.b    4227080,D0
08000B52  8008      
08000B54  C03C 0001 1646          and.b     #1,D0
08000B58  0C00 0001 1647          cmp.b     #1,D0
08000B5C  6702      1648          beq.s     readADC_9
08000B5E  60EE      1649          bra       readADC_7
                    1650   readADC_9:
                    1651   ; Vchannel1 = I2C_RXR;
08000B60  1D79 0040 1652          move.b    4227078,-4(A6)
08000B64  8006 FFFC 
                    1653   ; I2C_CR = READACK;
08000B68  13FC 0021 1654          move.b    #33,4227080
08000B6C  0040 8008 
                    1655   ; // Wait for read data to come in
                    1656   ; while((I2C_SR & 1) !=1){}
                    1657   readADC_10:
08000B70  1039 0040 1658          move.b    4227080,D0
08000B74  8008      
08000B76  C03C 0001 1659          and.b     #1,D0
08000B7A  0C00 0001 1660          cmp.b     #1,D0
08000B7E  6702      1661          beq.s     readADC_12
08000B80  60EE      1662          bra       readADC_10
                    1663   readADC_12:
                    1664   ; Vchannel2 = I2C_RXR;
08000B82  1D79 0040 1665          move.b    4227078,-3(A6)
08000B86  8006 FFFD 
                    1666   ; I2C_CR = READACK;
08000B8A  13FC 0021 1667          move.b    #33,4227080
08000B8E  0040 8008 
                    1668   ; // Wait for read data to come in
                    1669   ; while((I2C_SR & 1) !=1){}
                    1670   readADC_13:
08000B92  1039 0040 1671          move.b    4227080,D0
08000B96  8008      
08000B98  C03C 0001 1672          and.b     #1,D0
08000B9C  0C00 0001 1673          cmp.b     #1,D0
08000BA0  6702      1674          beq.s     readADC_15
08000BA2  60EE      1675          bra       readADC_13
                    1676   readADC_15:
                    1677   ; Vchannel3 = I2C_RXR;
08000BA4  1D79 0040 1678          move.b    4227078,-2(A6)
08000BA8  8006 FFFE 
                    1679   ; I2C_CR = 0x41;
08000BAC  13FC 0041 1680          move.b    #65,4227080
08000BB0  0040 8008 
                    1681   ; // Vout calculation: 5/256 * 8 bit data, but we can just leave it.
                    1682   ; printf("\r\nThermistor: %d", Vchannel1 );
08000BB4  122E FFFC 1683          move.b    -4(A6),D1
08000BB8  4881      1684          ext.w     D1
08000BBA  48C1      1685          ext.l     D1
08000BBC  2F01      1686          move.l    D1,-(A7)
08000BBE  4879 0800 1687          pea       @lab5_13.L
08000BC2  1C92      
08000BC4  4E92      1688          jsr       (A2)
08000BC6  504F      1689          addq.w    #8,A7
                    1690   ; printf("\r\nPotentiometer: %d", Vchannel2 );
08000BC8  122E FFFD 1691          move.b    -3(A6),D1
08000BCC  4881      1692          ext.w     D1
08000BCE  48C1      1693          ext.l     D1
08000BD0  2F01      1694          move.l    D1,-(A7)
08000BD2  4879 0800 1695          pea       @lab5_14.L
08000BD6  1CA4      
08000BD8  4E92      1696          jsr       (A2)
08000BDA  504F      1697          addq.w    #8,A7
                    1698   ; printf("\r\nPhotoresistor: %d", Vchannel3);
08000BDC  122E FFFE 1699          move.b    -2(A6),D1
08000BE0  4881      1700          ext.w     D1
08000BE2  48C1      1701          ext.l     D1
08000BE4  2F01      1702          move.l    D1,-(A7)
08000BE6  4879 0800 1703          pea       @lab5_15.L
08000BEA  1CB8      
08000BEC  4E92      1704          jsr       (A2)
08000BEE  504F      1705          addq.w    #8,A7
                    1706   ; printf("\r\n--------------");
08000BF0  4879 0800 1707          pea       @lab5_4.L
08000BF4  1BE0      
08000BF6  4E92      1708          jsr       (A2)
08000BF8  584F      1709          addq.w    #4,A7
                    1710   ; Wait1s();
08000BFA  4EB9 0800 1711          jsr       _Wait1s
08000BFE  0250      
08000C00  6000 FEF8 1712          bra       readADC_1
                    1713   ; }
                    1714   ; }
                    1715   ; /*********************************************************************************************************************************
                    1716   ; **  IMPORTANT FUNCTION
                    1717   ; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
                    1718   ; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
                    1719   ; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
                    1720   ; **  Calling this function allows you to deal with Interrupts for example
                    1721   ; ***********************************************************************************************************************************/
                    1722   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                    1723   ; {
                    1724   _InstallExceptionHandler:
08000C04  4E56 FFFC 1725          link      A6,#-4
                    1726   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
08000C08  2D7C 0B00 1727          move.l    #184549376,-4(A6)
08000C0C  0000 FFFC 
                    1728   ; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
08000C10  206E FFFC 1729          move.l    -4(A6),A0
08000C14  202E 000C 1730          move.l    12(A6),D0
08000C18  E588      1731          lsl.l     #2,D0
08000C1A  21AE 0008 1732          move.l    8(A6),0(A0,D0.L)
08000C1E  0800      
08000C20  4E5E      1733          unlk      A6
08000C22  4E75      1734          rts
                    1735   ; }
                    1736   ; /******************************************************************************************************************************
                    1737   ; * Start of user program
                    1738   ; ******************************************************************************************************************************/
                    1739   ; void main()
                    1740   ; {
                    1741   _main:
08000C24  4E56 FCC4 1742          link      A6,#-828
08000C28  48E7 203C 1743          movem.l   D2/A2/A3/A4/A5,-(A7)
08000C2C  45F9 0800 1744          lea       _printf.L,A2
08000C30  11D8      
08000C32  47F9 0800 1745          lea       _InstallExceptionHandler.L,A3
08000C36  0C04      
08000C38  49EE FD72 1746          lea       -654(A6),A4
08000C3C  4BF9 0800 1747          lea       _GetMemAddr.L,A5
08000C40  0A1C      
                    1748   ; unsigned int row, j=0, count=0, counter1=1;
08000C42  42AE FCC8 1749          clr.l     -824(A6)
08000C46  42AE FCCC 1750          clr.l     -820(A6)
08000C4A  2D7C 0000 1751          move.l    #1,-816(A6)
08000C4E  0001 FCD0 
                    1752   ; int i = 0;
08000C52  42AE FCD4 1753          clr.l     -812(A6)
                    1754   ; char c, text[150] ;
                    1755   ; unsigned char asdf, asdf1, asdf2, asdf3, bank;
                    1756   ; unsigned char wBuf[256];
                    1757   ; unsigned char rBuf[256];
                    1758   ; int addr = 2048;
08000C56  2D7C 0000 1759          move.l    #2048,-138(A6)
08000C5A  0800 FF76 
                    1760   ; int size;
                    1761   ; char data[129];
                    1762   ; int PassFailFlag = 1 ;
08000C5E  2D7C 0000 1763          move.l    #1,-4(A6)
08000C62  0001 FFFC 
                    1764   ; i = x = y = z = PortA_Count =0;
08000C66  42B9 0800 1765          clr.l     _PortA_Count.L
08000C6A  2036      
08000C6C  42B9 0800 1766          clr.l     _z.L
08000C70  2032      
08000C72  42B9 0800 1767          clr.l     _y.L
08000C76  202E      
08000C78  42B9 0800 1768          clr.l     _x.L
08000C7C  202A      
08000C7E  42AE FCD4 1769          clr.l     -812(A6)
                    1770   ; Timer1Count = Timer2Count = Timer3Count = Timer4Count = 0;
08000C82  4239 0800 1771          clr.b     _Timer4Count.L
08000C86  2040      
08000C88  4239 0800 1772          clr.b     _Timer3Count.L
08000C8C  203E      
08000C8E  4239 0800 1773          clr.b     _Timer2Count.L
08000C92  203C      
08000C94  4239 0800 1774          clr.b     _Timer1Count.L
08000C98  203A      
                    1775   ; InstallExceptionHandler(PIA_ISR, 25) ;          // install interrupt handler for PIAs 1 and 2 on level 1 IRQ
08000C9A  4878 0019 1776          pea       25
08000C9E  4879 0800 1777          pea       _PIA_ISR.L
08000CA2  01E8      
08000CA4  4E93      1778          jsr       (A3)
08000CA6  504F      1779          addq.w    #8,A7
                    1780   ; InstallExceptionHandler(ACIA_ISR, 26) ;		    // install interrupt handler for ACIA on level 2 IRQ
08000CA8  4878 001A 1781          pea       26
08000CAC  4879 0800 1782          pea       _ACIA_ISR.L
08000CB0  01E6      
08000CB2  4E93      1783          jsr       (A3)
08000CB4  504F      1784          addq.w    #8,A7
                    1785   ; InstallExceptionHandler(Timer_ISR, 27) ;		// install interrupt handler for Timers 1-4 on level 3 IRQ
08000CB6  4878 001B 1786          pea       27
08000CBA  4879 0800 1787          pea       _Timer_ISR.L
08000CBE  014C      
08000CC0  4E93      1788          jsr       (A3)
08000CC2  504F      1789          addq.w    #8,A7
                    1790   ; InstallExceptionHandler(Key2PressISR, 28) ;	    // install interrupt handler for Key Press 2 on DE1 board for level 4 IRQ
08000CC4  4878 001C 1791          pea       28
08000CC8  4879 0800 1792          pea       _Key2PressISR.L
08000CCC  01EA      
08000CCE  4E93      1793          jsr       (A3)
08000CD0  504F      1794          addq.w    #8,A7
                    1795   ; InstallExceptionHandler(Key1PressISR, 29) ;	    // install interrupt handler for Key Press 1 on DE1 board for level 5 IRQ
08000CD2  4878 001D 1796          pea       29
08000CD6  4879 0800 1797          pea       _Key1PressISR.L
08000CDA  01EC      
08000CDC  4E93      1798          jsr       (A3)
08000CDE  504F      1799          addq.w    #8,A7
                    1800   ; Timer1Data = 0x10;		// program time delay into timers 1-4
08000CE0  13FC 0010 1801          move.b    #16,4194352
08000CE4  0040 0030 
                    1802   ; Timer2Data = 0x20;
08000CE8  13FC 0020 1803          move.b    #32,4194356
08000CEC  0040 0034 
                    1804   ; Timer3Data = 0x15;
08000CF0  13FC 0015 1805          move.b    #21,4194360
08000CF4  0040 0038 
                    1806   ; Timer4Data = 0x25;
08000CF8  13FC 0025 1807          move.b    #37,4194364
08000CFC  0040 003C 
                    1808   ; Timer1Control = 3;		// write 3 to control register to Bit0 = 1 (enable interrupt from timers) 1 - 4 and allow them to count Bit 1 = 1
08000D00  13FC 0003 1809          move.b    #3,4194354
08000D04  0040 0032 
                    1810   ; Timer2Control = 3;
08000D08  13FC 0003 1811          move.b    #3,4194358
08000D0C  0040 0036 
                    1812   ; Timer3Control = 3;
08000D10  13FC 0003 1813          move.b    #3,4194362
08000D14  0040 003A 
                    1814   ; Timer4Control = 3;
08000D18  13FC 0003 1815          move.b    #3,4194366
08000D1C  0040 003E 
                    1816   ; Init_LCD();             // initialise the LCD display to use a parallel data interface and 2 lines of display
08000D20  4EB9 0800 1817          jsr       _Init_LCD
08000D24  026A      
                    1818   ; Init_RS232() ;          // initialise the RS232 port for use with hyper terminal
08000D26  4EB9 0800 1819          jsr       _Init_RS232
08000D2A  0288      
                    1820   ; /*************************************************************************************************
                    1821   ; **  I2C Program Lab 5
                    1822   ; *************************************************************************************************/
                    1823   ; I2C_Init();
08000D2C  4EB9 0800 1824          jsr       _I2C_Init
08000D30  03D8      
                    1825   ; // printf("%x\n", I2C_PRERLO);
                    1826   ; // printf("%x\n", I2C_PRERHI);
                    1827   ; // printf("%x\n", I2C_CTR);
                    1828   ; // printf("%x\n", I2C_TXR);
                    1829   ; // printf("%x\n", I2C_RXR);
                    1830   ; // printf("%x\n", I2C_CR);
                    1831   ; // printf("%x\n", I2C_SR);
                    1832   ; printf("\r\nLab 5: I2C");
08000D32  4879 0800 1833          pea       @lab5_16.L
08000D36  1CCC      
08000D38  4E92      1834          jsr       (A2)
08000D3A  584F      1835          addq.w    #4,A7
                    1836   ; while(1){
                    1837   main_1:
                    1838   ; printf("\r\nChoose the following:\r\n0 - Write Byte\r\n1 - Read Byte\r\n2 - Page Write\r\n3 - Page Read\r\n4 - DAC Blinky LED\r\n5 - ADC Read");
08000D3C  4879 0800 1839          pea       @lab5_17.L
08000D40  1CDA      
08000D42  4E92      1840          jsr       (A2)
08000D44  584F      1841          addq.w    #4,A7
                    1842   ; asdf = getchar();
08000D46  4EB9 0800 1843          jsr       _getch
08000D4A  119C      
08000D4C  1D40 FD71 1844          move.b    D0,-655(A6)
                    1845   ; putchar(asdf);
08000D50  122E FD71 1846          move.b    -655(A6),D1
08000D54  C2BC 0000 1847          and.l     #255,D1
08000D58  00FF      
08000D5A  2F01      1848          move.l    D1,-(A7)
08000D5C  4EB9 0800 1849          jsr       _putch
08000D60  116C      
08000D62  584F      1850          addq.w    #4,A7
                    1851   ; if(asdf == '0'){
08000D64  102E FD71 1852          move.b    -655(A6),D0
08000D68  0C00 0030 1853          cmp.b     #48,D0
08000D6C  6600 00AC 1854          bne       main_4
                    1855   ; printf("\r\nEnter byte to write: ");
08000D70  4879 0800 1856          pea       @lab5_18.L
08000D74  1D52      
08000D76  4E92      1857          jsr       (A2)
08000D78  584F      1858          addq.w    #4,A7
                    1859   ; asdf = Get2HexDigits(0);
08000D7A  42A7      1860          clr.l     -(A7)
08000D7C  4EB9 0800 1861          jsr       _Get2HexDigits
08000D80  0070      
08000D82  584F      1862          addq.w    #4,A7
08000D84  1D40 FD71 1863          move.b    D0,-655(A6)
                    1864   ; // Bank Selection
                    1865   ; GetBank(&bank);
08000D88  486E FD75 1866          pea       -651(A6)
08000D8C  4EB9 0800 1867          jsr       _GetBank
08000D90  09BC      
08000D92  584F      1868          addq.w    #4,A7
                    1869   ; // Mem Address Selection
                    1870   ; GetMemAddr(&asdf2, &asdf1);
08000D94  2F0C      1871          move.l    A4,-(A7)
08000D96  486E FD73 1872          pea       -653(A6)
08000D9A  4E95      1873          jsr       (A5)
08000D9C  504F      1874          addq.w    #8,A7
                    1875   ; WriteI2CChar(asdf, bank, asdf2, asdf1);
08000D9E  1214      1876          move.b    (A4),D1
08000DA0  4881      1877          ext.w     D1
08000DA2  48C1      1878          ext.l     D1
08000DA4  2F01      1879          move.l    D1,-(A7)
08000DA6  122E FD73 1880          move.b    -653(A6),D1
08000DAA  4881      1881          ext.w     D1
08000DAC  48C1      1882          ext.l     D1
08000DAE  2F01      1883          move.l    D1,-(A7)
08000DB0  122E FD75 1884          move.b    -651(A6),D1
08000DB4  4881      1885          ext.w     D1
08000DB6  48C1      1886          ext.l     D1
08000DB8  2F01      1887          move.l    D1,-(A7)
08000DBA  122E FD71 1888          move.b    -655(A6),D1
08000DBE  4881      1889          ext.w     D1
08000DC0  48C1      1890          ext.l     D1
08000DC2  2F01      1891          move.l    D1,-(A7)
08000DC4  4EB9 0800 1892          jsr       _WriteI2CChar
08000DC8  044A      
08000DCA  DEFC 0010 1893          add.w     #16,A7
                    1894   ; printf("\r\nWritten %x to bank %d at memaddr hi: %x mem addr lo: %x", asdf, bank == EEPROM_SLAVE_BANK0 ? 0:1, asdf2, asdf1);
08000DCE  1214      1895          move.b    (A4),D1
08000DD0  C2BC 0000 1896          and.l     #255,D1
08000DD4  00FF      
08000DD6  2F01      1897          move.l    D1,-(A7)
08000DD8  122E FD73 1898          move.b    -653(A6),D1
08000DDC  C2BC 0000 1899          and.l     #255,D1
08000DE0  00FF      
08000DE2  2F01      1900          move.l    D1,-(A7)
08000DE4  122E FD75 1901          move.b    -651(A6),D1
08000DE8  C27C 00FF 1902          and.w     #255,D1
08000DEC  0C41 00A0 1903          cmp.w     #160,D1
08000DF0  6604      1904          bne.s     main_6
08000DF2  4201      1905          clr.b     D1
08000DF4  6002      1906          bra.s     main_7
                    1907   main_6:
08000DF6  7201      1908          moveq     #1,D1
                    1909   main_7:
08000DF8  4881      1910          ext.w     D1
08000DFA  48C1      1911          ext.l     D1
08000DFC  2F01      1912          move.l    D1,-(A7)
08000DFE  122E FD71 1913          move.b    -655(A6),D1
08000E02  C2BC 0000 1914          and.l     #255,D1
08000E06  00FF      
08000E08  2F01      1915          move.l    D1,-(A7)
08000E0A  4879 0800 1916          pea       @lab5_19.L
08000E0E  1D6A      
08000E10  4E92      1917          jsr       (A2)
08000E12  DEFC 0014 1918          add.w     #20,A7
08000E16  6000 0272 1919          bra       main_25
                    1920   main_4:
                    1921   ; }
                    1922   ; else if(asdf == '1'){
08000E1A  102E FD71 1923          move.b    -655(A6),D0
08000E1E  0C00 0031 1924          cmp.b     #49,D0
08000E22  6600 008E 1925          bne       main_8
                    1926   ; // Bank Selection
                    1927   ; GetBank(&bank);
08000E26  486E FD75 1928          pea       -651(A6)
08000E2A  4EB9 0800 1929          jsr       _GetBank
08000E2E  09BC      
08000E30  584F      1930          addq.w    #4,A7
                    1931   ; // Mem Address Selection
                    1932   ; GetMemAddr(&asdf, &asdf1);
08000E32  2F0C      1933          move.l    A4,-(A7)
08000E34  486E FD71 1934          pea       -655(A6)
08000E38  4E95      1935          jsr       (A5)
08000E3A  504F      1936          addq.w    #8,A7
                    1937   ; ReadI2CChar(&asdf3, bank, asdf, asdf1);
08000E3C  1214      1938          move.b    (A4),D1
08000E3E  4881      1939          ext.w     D1
08000E40  48C1      1940          ext.l     D1
08000E42  2F01      1941          move.l    D1,-(A7)
08000E44  122E FD71 1942          move.b    -655(A6),D1
08000E48  4881      1943          ext.w     D1
08000E4A  48C1      1944          ext.l     D1
08000E4C  2F01      1945          move.l    D1,-(A7)
08000E4E  122E FD75 1946          move.b    -651(A6),D1
08000E52  4881      1947          ext.w     D1
08000E54  48C1      1948          ext.l     D1
08000E56  2F01      1949          move.l    D1,-(A7)
08000E58  486E FD74 1950          pea       -652(A6)
08000E5C  4EB9 0800 1951          jsr       _ReadI2CChar
08000E60  04AA      
08000E62  DEFC 0010 1952          add.w     #16,A7
                    1953   ; printf("\r\nRead %x from bank %d at memaddr hi: %x mem addr lo: %x", asdf3, bank == EEPROM_SLAVE_BANK0 ? 0:1, asdf, asdf1);
08000E66  1214      1954          move.b    (A4),D1
08000E68  C2BC 0000 1955          and.l     #255,D1
08000E6C  00FF      
08000E6E  2F01      1956          move.l    D1,-(A7)
08000E70  122E FD71 1957          move.b    -655(A6),D1
08000E74  C2BC 0000 1958          and.l     #255,D1
08000E78  00FF      
08000E7A  2F01      1959          move.l    D1,-(A7)
08000E7C  122E FD75 1960          move.b    -651(A6),D1
08000E80  C27C 00FF 1961          and.w     #255,D1
08000E84  0C41 00A0 1962          cmp.w     #160,D1
08000E88  6604      1963          bne.s     main_10
08000E8A  4201      1964          clr.b     D1
08000E8C  6002      1965          bra.s     main_11
                    1966   main_10:
08000E8E  7201      1967          moveq     #1,D1
                    1968   main_11:
08000E90  4881      1969          ext.w     D1
08000E92  48C1      1970          ext.l     D1
08000E94  2F01      1971          move.l    D1,-(A7)
08000E96  122E FD74 1972          move.b    -652(A6),D1
08000E9A  C2BC 0000 1973          and.l     #255,D1
08000E9E  00FF      
08000EA0  2F01      1974          move.l    D1,-(A7)
08000EA2  4879 0800 1975          pea       @lab5_20.L
08000EA6  1DA4      
08000EA8  4E92      1976          jsr       (A2)
08000EAA  DEFC 0014 1977          add.w     #20,A7
08000EAE  6000 01DA 1978          bra       main_25
                    1979   main_8:
                    1980   ; }
                    1981   ; else if(asdf == '2'){
08000EB2  102E FD71 1982          move.b    -655(A6),D0
08000EB6  0C00 0032 1983          cmp.b     #50,D0
08000EBA  6600 00A4 1984          bne       main_12
                    1985   ; printf("\r\nEnter size of page to write (6 digits, from 0x000000 (1) to 0x01F3FF (128,000)): ");
08000EBE  4879 0800 1986          pea       @lab5_21.L
08000EC2  1DDE      
08000EC4  4E92      1987          jsr       (A2)
08000EC6  584F      1988          addq.w    #4,A7
                    1989   ; size = Get6HexDigits(0);
08000EC8  42A7      1990          clr.l     -(A7)
08000ECA  4EB9 0800 1991          jsr       _Get6HexDigits
08000ECE  00F6      
08000ED0  584F      1992          addq.w    #4,A7
08000ED2  2400      1993          move.l    D0,D2
                    1994   ; printf("\r\nInput Size: %x", size);
08000ED4  2F02      1995          move.l    D2,-(A7)
08000ED6  4879 0800 1996          pea       @lab5_22.L
08000EDA  1E32      
08000EDC  4E92      1997          jsr       (A2)
08000EDE  504F      1998          addq.w    #8,A7
                    1999   ; // Bank Selection
                    2000   ; GetBank(&bank);
08000EE0  486E FD75 2001          pea       -651(A6)
08000EE4  4EB9 0800 2002          jsr       _GetBank
08000EE8  09BC      
08000EEA  584F      2003          addq.w    #4,A7
                    2004   ; // Mem Address Selection
                    2005   ; GetMemAddr(&asdf2, &asdf1);
08000EEC  2F0C      2006          move.l    A4,-(A7)
08000EEE  486E FD73 2007          pea       -653(A6)
08000EF2  4E95      2008          jsr       (A5)
08000EF4  504F      2009          addq.w    #8,A7
                    2010   ; printf("\r\nWrote values starting at memaddr 0x%x%x and bank %d, total size: %x\r\nData: ", asdf2, asdf1, (bank == EEPROM_SLAVE_BANK0 ? 0:1) ,size);
08000EF6  2F02      2011          move.l    D2,-(A7)
08000EF8  122E FD75 2012          move.b    -651(A6),D1
08000EFC  C27C 00FF 2013          and.w     #255,D1
08000F00  0C41 00A0 2014          cmp.w     #160,D1
08000F04  6604      2015          bne.s     main_14
08000F06  4201      2016          clr.b     D1
08000F08  6002      2017          bra.s     main_15
                    2018   main_14:
08000F0A  7201      2019          moveq     #1,D1
                    2020   main_15:
08000F0C  4881      2021          ext.w     D1
08000F0E  48C1      2022          ext.l     D1
08000F10  2F01      2023          move.l    D1,-(A7)
08000F12  1214      2024          move.b    (A4),D1
08000F14  C2BC 0000 2025          and.l     #255,D1
08000F18  00FF      
08000F1A  2F01      2026          move.l    D1,-(A7)
08000F1C  122E FD73 2027          move.b    -653(A6),D1
08000F20  C2BC 0000 2028          and.l     #255,D1
08000F24  00FF      
08000F26  2F01      2029          move.l    D1,-(A7)
08000F28  4879 0800 2030          pea       @lab5_23.L
08000F2C  1E44      
08000F2E  4E92      2031          jsr       (A2)
08000F30  DEFC 0014 2032          add.w     #20,A7
                    2033   ; WriteI2CPage(bank, asdf2, asdf1,size);
08000F34  2F02      2034          move.l    D2,-(A7)
08000F36  1214      2035          move.b    (A4),D1
08000F38  4881      2036          ext.w     D1
08000F3A  48C1      2037          ext.l     D1
08000F3C  2F01      2038          move.l    D1,-(A7)
08000F3E  122E FD73 2039          move.b    -653(A6),D1
08000F42  4881      2040          ext.w     D1
08000F44  48C1      2041          ext.l     D1
08000F46  2F01      2042          move.l    D1,-(A7)
08000F48  122E FD75 2043          move.b    -651(A6),D1
08000F4C  4881      2044          ext.w     D1
08000F4E  48C1      2045          ext.l     D1
08000F50  2F01      2046          move.l    D1,-(A7)
08000F52  4EB9 0800 2047          jsr       _WriteI2CPage
08000F56  06F2      
08000F58  DEFC 0010 2048          add.w     #16,A7
08000F5C  6000 012C 2049          bra       main_25
                    2050   main_12:
                    2051   ; // for(i = 0; i <= size; i++){
                    2052   ; //     printf("%x ", i);
                    2053   ; // }
                    2054   ; }
                    2055   ; else if(asdf == '3'){
08000F60  102E FD71 2056          move.b    -655(A6),D0
08000F64  0C00 0033 2057          cmp.b     #51,D0
08000F68  6600 00A8 2058          bne       main_16
                    2059   ; printf("\r\nEnter size of page to read (6 digits, from 0x000000 (1) to 0x01F3FF (128,000)): ");
08000F6C  4879 0800 2060          pea       @lab5_24.L
08000F70  1E92      
08000F72  4E92      2061          jsr       (A2)
08000F74  584F      2062          addq.w    #4,A7
                    2063   ; size = Get6HexDigits(0);
08000F76  42A7      2064          clr.l     -(A7)
08000F78  4EB9 0800 2065          jsr       _Get6HexDigits
08000F7C  00F6      
08000F7E  584F      2066          addq.w    #4,A7
08000F80  2400      2067          move.l    D0,D2
                    2068   ; printf("\r\nInput Size: %x", size);
08000F82  2F02      2069          move.l    D2,-(A7)
08000F84  4879 0800 2070          pea       @lab5_22.L
08000F88  1E32      
08000F8A  4E92      2071          jsr       (A2)
08000F8C  504F      2072          addq.w    #8,A7
                    2073   ; // Bank Selection
                    2074   ; GetBank(&bank);
08000F8E  486E FD75 2075          pea       -651(A6)
08000F92  4EB9 0800 2076          jsr       _GetBank
08000F96  09BC      
08000F98  584F      2077          addq.w    #4,A7
                    2078   ; // Mem Address Selection
                    2079   ; GetMemAddr(&asdf2, &asdf1);
08000F9A  2F0C      2080          move.l    A4,-(A7)
08000F9C  486E FD73 2081          pea       -653(A6)
08000FA0  4E95      2082          jsr       (A5)
08000FA2  504F      2083          addq.w    #8,A7
                    2084   ; printf("\r\nRead values starting at memaddr 0x%x%x and bank %d, total size: %x\r\nData: ", asdf2, asdf1, bank == EEPROM_SLAVE_BANK0 ? 0:1,size);
08000FA4  2F02      2085          move.l    D2,-(A7)
08000FA6  122E FD75 2086          move.b    -651(A6),D1
08000FAA  C27C 00FF 2087          and.w     #255,D1
08000FAE  0C41 00A0 2088          cmp.w     #160,D1
08000FB2  6604      2089          bne.s     main_18
08000FB4  4201      2090          clr.b     D1
08000FB6  6002      2091          bra.s     main_19
                    2092   main_18:
08000FB8  7201      2093          moveq     #1,D1
                    2094   main_19:
08000FBA  4881      2095          ext.w     D1
08000FBC  48C1      2096          ext.l     D1
08000FBE  2F01      2097          move.l    D1,-(A7)
08000FC0  1214      2098          move.b    (A4),D1
08000FC2  C2BC 0000 2099          and.l     #255,D1
08000FC6  00FF      
08000FC8  2F01      2100          move.l    D1,-(A7)
08000FCA  122E FD73 2101          move.b    -653(A6),D1
08000FCE  C2BC 0000 2102          and.l     #255,D1
08000FD2  00FF      
08000FD4  2F01      2103          move.l    D1,-(A7)
08000FD6  4879 0800 2104          pea       @lab5_25.L
08000FDA  1EE6      
08000FDC  4E92      2105          jsr       (A2)
08000FDE  DEFC 0014 2106          add.w     #20,A7
                    2107   ; ReadI2CPage(data, bank, asdf2, asdf1,size);
08000FE2  2F02      2108          move.l    D2,-(A7)
08000FE4  1214      2109          move.b    (A4),D1
08000FE6  4881      2110          ext.w     D1
08000FE8  48C1      2111          ext.l     D1
08000FEA  2F01      2112          move.l    D1,-(A7)
08000FEC  122E FD73 2113          move.b    -653(A6),D1
08000FF0  4881      2114          ext.w     D1
08000FF2  48C1      2115          ext.l     D1
08000FF4  2F01      2116          move.l    D1,-(A7)
08000FF6  122E FD75 2117          move.b    -651(A6),D1
08000FFA  4881      2118          ext.w     D1
08000FFC  48C1      2119          ext.l     D1
08000FFE  2F01      2120          move.l    D1,-(A7)
08001000  486E FF7A 2121          pea       -134(A6)
08001004  4EB9 0800 2122          jsr       _ReadI2CPage
08001008  0882      
0800100A  DEFC 0014 2123          add.w     #20,A7
0800100E  6000 007A 2124          bra       main_25
                    2125   main_16:
                    2126   ; // for(i = 0; (unsigned)i <= (unsigned)size; i++){
                    2127   ; //     printf("%x", data[i]);
                    2128   ; // }
                    2129   ; }
                    2130   ; else if(asdf == '4'){
08001012  102E FD71 2131          move.b    -655(A6),D0
08001016  0C00 0034 2132          cmp.b     #52,D0
0800101A  6614      2133          bne.s     main_20
                    2134   ; printf("\r\nDAC Blinky... frequency of blinky is: \r\nON - 250ms - OFF - 250ms\r\n0N - 250ms - OFF - 250ms\r\nON - 750ms - OFF - 750ms\r\nRepeat forever\r\n");
0800101C  4879 0800 2135          pea       @lab5_26.L
08001020  1F34      
08001022  4E92      2136          jsr       (A2)
08001024  584F      2137          addq.w    #4,A7
                    2138   ; blinky();
08001026  4EB9 0800 2139          jsr       _blinky
0800102A  0A60      
0800102C  6000 005C 2140          bra       main_25
                    2141   main_20:
                    2142   ; }
                    2143   ; else if(asdf == '5'){
08001030  102E FD71 2144          move.b    -655(A6),D0
08001034  0C00 0035 2145          cmp.b     #53,D0
08001038  6614      2146          bne.s     main_22
                    2147   ; printf("\r\nADC Channel Output:");
0800103A  4879 0800 2148          pea       @lab5_27.L
0800103E  1FBE      
08001040  4E92      2149          jsr       (A2)
08001042  584F      2150          addq.w    #4,A7
                    2151   ; readADC();
08001044  4EB9 0800 2152          jsr       _readADC
08001048  0AE6      
0800104A  6000 003E 2153          bra       main_25
                    2154   main_22:
                    2155   ; }
                    2156   ; else if(asdf == '6'){
0800104E  102E FD71 2157          move.b    -655(A6),D0
08001052  0C00 0036 2158          cmp.b     #54,D0
08001056  6624      2159          bne.s     main_24
                    2160   ; printf("\r\nget 6 hex digits: ");
08001058  4879 0800 2161          pea       @lab5_28.L
0800105C  1FD4      
0800105E  4E92      2162          jsr       (A2)
08001060  584F      2163          addq.w    #4,A7
                    2164   ; size = Get6HexDigits(0);
08001062  42A7      2165          clr.l     -(A7)
08001064  4EB9 0800 2166          jsr       _Get6HexDigits
08001068  00F6      
0800106A  584F      2167          addq.w    #4,A7
0800106C  2400      2168          move.l    D0,D2
                    2169   ; printf("\r\nInput:%x", size);
0800106E  2F02      2170          move.l    D2,-(A7)
08001070  4879 0800 2171          pea       @lab5_29.L
08001074  1FEA      
08001076  4E92      2172          jsr       (A2)
08001078  504F      2173          addq.w    #8,A7
0800107A  600E      2174          bra.s     main_25
                    2175   main_24:
                    2176   ; }
                    2177   ; else{
                    2178   ; printf("\r\nInvalid Selection.\r\n");
0800107C  4879 0800 2179          pea       @lab5_30.L
08001080  1FF6      
08001082  4E92      2180          jsr       (A2)
08001084  584F      2181          addq.w    #4,A7
                    2182   ; continue;
08001086  6000 0002 2183          bra       main_25
                    2184   main_25:
0800108A  6000 FCB0 2185          bra       main_1
                    2186   ; }   
                    2187   ; }
                    2188   ; }
                    2189   ULDIV:
0800108E  4E56 0000 2190          link    A6,#0
08001092  48E7 C000 2191          movem.l D0/D1,-(A7)
08001096  222E 0008 2192          move.l  8(A6),D1
0800109A  202E 000C 2193          move.l  12(A6),D0
0800109E  6036      2194          bra.s   ldiv_3
                    2195   LDIV:
080010A0  4E56 0000 2196          link    A6,#0
080010A4  48E7 C000 2197          movem.l D0/D1,-(A7)
080010A8  222E 0008 2198          move.l  8(A6),D1
080010AC  202E 000C 2199          move.l  12(A6),D0
080010B0  4A80      2200          tst.l   D0
080010B2  6A0E      2201          bpl.s   ldiv_1
080010B4  4480      2202          neg.l   D0
080010B6  4A81      2203          tst.l   D1
080010B8  6A14      2204          bpl.s   ldiv_2
080010BA  4481      2205          neg.l   D1
080010BC  612A      2206          bsr.s   dodiv
080010BE  4481      2207          neg.l   D1
080010C0  6016      2208          bra.s   ldiv_4
                    2209   ldiv_1:
080010C2  4A81      2210          tst.l   D1
080010C4  6A10      2211          bpl.s   ldiv_3
080010C6  4481      2212          neg.l   D1
080010C8  611E      2213          bsr.s   dodiv
080010CA  4480      2214          neg.l   D0
080010CC  600A      2215          bra.s   ldiv_4
                    2216   ldiv_2:
080010CE  6118      2217          bsr.s   dodiv
080010D0  4480      2218          neg.l   D0
080010D2  4481      2219          neg.l   D1
080010D4  6002      2220          bra.s   ldiv_4
                    2221   ldiv_3:
080010D6  6110      2222          bsr.s   dodiv
                    2223   ldiv_4:
080010D8  2D40 0008 2224          move.l  D0,8(A6)
080010DC  2D41 000C 2225          move.l  D1,12(A6)
080010E0  4CDF 0003 2226          movem.l (A7)+,D0/D1
080010E4  4E5E      2227          unlk    A6
080010E6  4E75      2228          rts
                    2229   dodiv:
080010E8  0C81 0000 2230          cmpi.l  #$FFFF,D1
080010EC  FFFF      
080010EE  6236      2231          bhi.s   dodiv_2
080010F0  0C80 0000 2232          cmpi.l  #$FFFF,D0
080010F4  FFFF      
080010F6  6210      2233          bhi.s   dodiv_1
080010F8  80C1      2234          divu    D1,D0
080010FA  2200      2235          move.l  D0,D1
080010FC  4241      2236          clr.w   D1
080010FE  4841      2237          swap    D1
08001100  0280 0000 2238          andi.l  #$FFFF,D0
08001104  FFFF      
08001106  4E75      2239          rts
                    2240   dodiv_1:
08001108  48A7 A000 2241          movem.w D0/D2,-(A7)
0800110C  4240      2242          clr.w   D0
0800110E  4840      2243          swap    D0
08001110  80C1      2244          divu    D1,D0
08001112  3400      2245          move.w  D0,D2
08001114  301F      2246          move.w  (A7)+,D0
08001116  80C1      2247          divu    D1,D0
08001118  4840      2248          swap    D0
0800111A  4281      2249          clr.l   D1
0800111C  3200      2250          move.w  D0,D1
0800111E  3002      2251          move.w  D2,D0
08001120  4840      2252          swap    D0
08001122  341F      2253          move.w  (A7)+,D2
08001124  4E75      2254          rts
                    2255   dodiv_2:
08001126  48E7 3800 2256          movem.l D2/D3/D4,-(A7)
0800112A  2401      2257          move.l  D1,D2
0800112C  4242      2258          clr.w   D2
0800112E  4842      2259          swap    D2
08001130  5282      2260          addq.l  #1,D2
08001132  2600      2261          move.l  D0,D3
08001134  2801      2262          move.l  D1,D4
08001136  2202      2263          move.l  D2,D1
08001138  61CE      2264          bsr.s   dodiv_1
0800113A  2204      2265          move.l  D4,D1
0800113C  82C2      2266          divu    D2,D1
0800113E  80C1      2267          divu    D1,D0
08001140  0280 0000 2268          andi.l  #$FFFF,D0
08001144  FFFF      
                    2269   dodiv_3:
08001146  2204      2270          move.l  D4,D1
08001148  2404      2271          move.l  D4,D2
0800114A  4842      2272          swap    D2
0800114C  C2C0      2273          mulu    D0,D1
0800114E  C4C0      2274          mulu    D0,D2
08001150  4842      2275          swap    D2
08001152  D282      2276          add.l   D2,D1
08001154  9283      2277          sub.l   D3,D1
08001156  620A      2278          bhi.s   dodiv_4
08001158  4481      2279          neg.l   D1
0800115A  B881      2280          cmp.l   D1,D4
0800115C  6208      2281          bhi.s   dodiv_5
0800115E  5280      2282          addq.l  #1,D0
08001160  60E4      2283          bra.s   dodiv_3
                    2284   dodiv_4:
08001162  5380      2285          subq.l  #1,D0
08001164  60E0      2286          bra.s   dodiv_3
                    2287   dodiv_5:
08001166  4CDF 001C 2288          movem.l (A7)+,D2/D3/D4
0800116A  4E75      2289          rts
                    2290   _putch:
0800116C  4E56 0000 2291          link      A6,#0
08001170  48E7 2000 2292          movem.l   D2,-(A7)
08001174  242E 0008 2293          move.l    8(A6),D2
08001178  0C82 0000 2294          cmp.l     #10,D2
0800117C  000A      
0800117E  660A      2295          bne.s     putch_1
08001180  4878 000D 2296          pea       13
08001184  6100 F114 2297          bsr       __putch
08001188  584F      2298          addq.w    #4,A7
                    2299   putch_1:
0800118A  2F02      2300          move.l    D2,-(A7)
0800118C  6100 F10C 2301          bsr       __putch
08001190  584F      2302          addq.w    #4,A7
08001192  2002      2303          move.l    D2,D0
08001194  4CDF 0004 2304          movem.l   (A7)+,D2
08001198  4E5E      2305          unlk      A6
0800119A  4E75      2306          rts
                    2307   _getch:
0800119C  48E7 2000 2308          movem.l   D2,-(A7)
080011A0  2439 0800 2309          move.l    __ungetbuf,D2
080011A4  200E      
080011A6  2039 0800 2310          move.l    __ungetbuf,D0
080011AA  200E      
080011AC  0C80 FFFF 2311          cmp.l     #-1,D0
080011B0  FFFF      
080011B2  670C      2312          beq.s     getch_1
080011B4  23FC FFFF 2313          move.l    #-1,__ungetbuf
080011B8  FFFF 0800 
080011BC  200E      
080011BE  6010      2314          bra.s     getch_3
                    2315   getch_1:
080011C0  6100 F106 2316          bsr       __getch
080011C4  2400      2317          move.l    D0,D2
080011C6  0C80 0000 2318          cmp.l     #13,D0
080011CA  000D      
080011CC  6602      2319          bne.s     getch_3
080011CE  740A      2320          moveq     #10,D2
                    2321   getch_3:
080011D0  2002      2322          move.l    D2,D0
080011D2  4CDF 0004 2323          movem.l   (A7)+,D2
080011D6  4E75      2324          rts
                    2325   _printf:
080011D8  4E56 FFFC 2326          link      A6,#-4
080011DC  48E7 2000 2327          movem.l   D2,-(A7)
080011E0  41EE 0008 2328          lea       8(A6),A0
080011E4  5848      2329          addq.w    #4,A0
080011E6  2408      2330          move.l    A0,D2
080011E8  2F02      2331          move.l    D2,-(A7)
080011EA  2F2E 0008 2332          move.l    8(A6),-(A7)
080011EE  42A7      2333          clr.l     -(A7)
080011F0  6100 00CA 2334          bsr       _vsprintf
080011F4  DEFC 000C 2335          add.w     #12,A7
080011F8  2D40 FFFC 2336          move.l    D0,-4(A6)
080011FC  4282      2337          clr.l     D2
080011FE  202E FFFC 2338          move.l    -4(A6),D0
08001202  4CDF 0004 2339          movem.l   (A7)+,D2
08001206  4E5E      2340          unlk      A6
08001208  4E75      2341          rts
                    2342   @vsprintf_copy:
0800120A  4E56 0000 2343          link      A6,#0
0800120E  206E 0008 2344          move.l    8(A6),A0
08001212  4A90      2345          tst.l     (A0)
08001214  6710      2346          beq.s     @vsprintf_copy_1
08001216  202E 000C 2347          move.l    12(A6),D0
0800121A  206E 0008 2348          move.l    8(A6),A0
0800121E  2250      2349          move.l    (A0),A1
08001220  5290      2350          addq.l    #1,(A0)
08001222  1280      2351          move.b    D0,(A1)
08001224  600A      2352          bra.s     @vsprintf_copy_2
                    2353   @vsprintf_copy_1:
08001226  2F2E 000C 2354          move.l    12(A6),-(A7)
0800122A  6100 FF40 2355          bsr       _putch
0800122E  584F      2356          addq.w    #4,A7
                    2357   @vsprintf_copy_2:
08001230  4E5E      2358          unlk      A6
08001232  4E75      2359          rts
                    2360   @vsprintf_getval:
08001234  4E56 0000 2361          link      A6,#0
08001238  48E7 3000 2362          movem.l   D2/D3,-(A7)
0800123C  242E 0008 2363          move.l    8(A6),D2
08001240  4283      2364          clr.l     D3
08001242  2042      2365          move.l    D2,A0
08001244  2050      2366          move.l    (A0),A0
08001246  1010      2367          move.b    (A0),D0
08001248  4880      2368          ext.w     D0
0800124A  48C0      2369          ext.l     D0
0800124C  0C80 0000 2370          cmp.l     #42,D0
08001250  002A      
08001252  6612      2371          bne.s     @vsprintf_getval_1
08001254  206E 000C 2372          move.l    12(A6),A0
08001258  2250      2373          move.l    (A0),A1
0800125A  5890      2374          addq.l    #4,(A0)
0800125C  2611      2375          move.l    (A1),D3
0800125E  2042      2376          move.l    D2,A0
08001260  5290      2377          addq.l    #1,(A0)
08001262  6000 004E 2378          bra       @vsprintf_getval_5
                    2379   @vsprintf_getval_1:
08001266  2042      2380          move.l    D2,A0
08001268  2050      2381          move.l    (A0),A0
0800126A  1010      2382          move.b    (A0),D0
0800126C  4880      2383          ext.w     D0
0800126E  48C0      2384          ext.l     D0
08001270  0C80 0000 2385          cmp.l     #48,D0
08001274  0030      
08001276  6D00 003A 2386          blt       @vsprintf_getval_5
0800127A  2042      2387          move.l    D2,A0
0800127C  2050      2388          move.l    (A0),A0
0800127E  1010      2389          move.b    (A0),D0
08001280  4880      2390          ext.w     D0
08001282  48C0      2391          ext.l     D0
08001284  0C80 0000 2392          cmp.l     #57,D0
08001288  0039      
0800128A  6E26      2393          bgt.s     @vsprintf_getval_5
0800128C  2F03      2394          move.l    D3,-(A7)
0800128E  4878 000A 2395          pea       10
08001292  6100 07F6 2396          bsr       LMUL
08001296  2017      2397          move.l    (A7),D0
08001298  504F      2398          addq.w    #8,A7
0800129A  2042      2399          move.l    D2,A0
0800129C  2250      2400          move.l    (A0),A1
0800129E  5290      2401          addq.l    #1,(A0)
080012A0  1211      2402          move.b    (A1),D1
080012A2  4881      2403          ext.w     D1
080012A4  48C1      2404          ext.l     D1
080012A6  D081      2405          add.l     D1,D0
080012A8  0480 0000 2406          sub.l     #48,D0
080012AC  0030      
080012AE  2600      2407          move.l    D0,D3
080012B0  60B4      2408          bra       @vsprintf_getval_1
                    2409   @vsprintf_getval_5:
080012B2  2003      2410          move.l    D3,D0
080012B4  4CDF 000C 2411          movem.l   (A7)+,D2/D3
080012B8  4E5E      2412          unlk      A6
080012BA  4E75      2413          rts
                    2414   _vsprintf:
080012BC  4E56 FFCC 2415          link      A6,#-52
080012C0  48E7 3F3C 2416          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
080012C4  45EE 0008 2417          lea       8(A6),A2
080012C8  47F9 0800 2418          lea       @vsprintf_copy,A3
080012CC  120A      
080012CE  49F9 0800 2419          lea       _ultoa,A4
080012D2  1A16      
080012D4  4286      2420          clr.l     D6
                    2421   vsprintf_1:
080012D6  206E 000C 2422          move.l    12(A6),A0
080012DA  4A10      2423          tst.b     (A0)
080012DC  6700 0624 2424          beq       vsprintf_3
080012E0  206E 000C 2425          move.l    12(A6),A0
080012E4  1010      2426          move.b    (A0),D0
080012E6  4880      2427          ext.w     D0
080012E8  48C0      2428          ext.l     D0
080012EA  0C80 0000 2429          cmp.l     #37,D0
080012EE  0025      
080012F0  671C      2430          beq.s     vsprintf_4
080012F2  206E 000C 2431          move.l    12(A6),A0
080012F6  52AE 000C 2432          addq.l    #1,12(A6)
080012FA  1210      2433          move.b    (A0),D1
080012FC  4881      2434          ext.w     D1
080012FE  48C1      2435          ext.l     D1
08001300  2F01      2436          move.l    D1,-(A7)
08001302  2F0A      2437          move.l    A2,-(A7)
08001304  4E93      2438          jsr       (A3)
08001306  504F      2439          addq.w    #8,A7
08001308  5286      2440          addq.l    #1,D6
0800130A  6000 05F2 2441          bra       vsprintf_2
                    2442   vsprintf_4:
0800130E  52AE 000C 2443          addq.l    #1,12(A6)
08001312  422E FFD3 2444          clr.b     -45(A6)
08001316  422E FFD2 2445          clr.b     -46(A6)
0800131A  422E FFD0 2446          clr.b     -48(A6)
0800131E  422E FFCF 2447          clr.b     -49(A6)
08001322  422E FFCE 2448          clr.b     -50(A6)
08001326  422E FFCD 2449          clr.b     -51(A6)
0800132A  42AE FFFC 2450          clr.l     -4(A6)
0800132E  7AFF      2451          moveq     #-1,D5
08001330  41EE FFDC 2452          lea       -36(A6),A0
08001334  2608      2453          move.l    A0,D3
08001336  2408      2454          move.l    A0,D2
                    2455   vsprintf_6:
08001338  206E 000C 2456          move.l    12(A6),A0
0800133C  1010      2457          move.b    (A0),D0
0800133E  4880      2458          ext.w     D0
08001340  48C0      2459          ext.l     D0
08001342  0C80 0000 2460          cmp.l     #43,D0
08001346  002B      
08001348  6730      2461          beq.s     vsprintf_12
0800134A  6E18      2462          bgt.s     vsprintf_15
0800134C  0C80 0000 2463          cmp.l     #35,D0
08001350  0023      
08001352  6700 003E 2464          beq       vsprintf_14
08001356  6E00 0046 2465          bgt       vsprintf_9
0800135A  0C80 0000 2466          cmp.l     #32,D0
0800135E  0020      
08001360  6724      2467          beq.s     vsprintf_13
08001362  603A      2468          bra.s     vsprintf_9
                    2469   vsprintf_15:
08001364  0C80 0000 2470          cmp.l     #45,D0
08001368  002D      
0800136A  6702      2471          beq.s     vsprintf_11
0800136C  6030      2472          bra.s     vsprintf_9
                    2473   vsprintf_11:
0800136E  1D7C 0001 2474          move.b    #1,-51(A6)
08001372  FFCD      
08001374  52AE 000C 2475          addq.l    #1,12(A6)
08001378  6026      2476          bra.s     vsprintf_7
                    2477   vsprintf_12:
0800137A  1D7C 0001 2478          move.b    #1,-50(A6)
0800137E  FFCE      
08001380  52AE 000C 2479          addq.l    #1,12(A6)
08001384  601A      2480          bra.s     vsprintf_7
                    2481   vsprintf_13:
08001386  1D7C 0001 2482          move.b    #1,-49(A6)
0800138A  FFCF      
0800138C  52AE 000C 2483          addq.l    #1,12(A6)
08001390  600E      2484          bra.s     vsprintf_7
                    2485   vsprintf_14:
08001392  1D7C 0001 2486          move.b    #1,-48(A6)
08001396  FFD0      
08001398  52AE 000C 2487          addq.l    #1,12(A6)
0800139C  6002      2488          bra.s     vsprintf_7
                    2489   vsprintf_9:
0800139E  6002      2490          bra.s     vsprintf_8
                    2491   vsprintf_7:
080013A0  6096      2492          bra       vsprintf_6
                    2493   vsprintf_8:
080013A2  206E 000C 2494          move.l    12(A6),A0
080013A6  1010      2495          move.b    (A0),D0
080013A8  4880      2496          ext.w     D0
080013AA  48C0      2497          ext.l     D0
080013AC  0C80 0000 2498          cmp.l     #48,D0
080013B0  0030      
080013B2  660A      2499          bne.s     vsprintf_16
080013B4  52AE 000C 2500          addq.l    #1,12(A6)
080013B8  1D7C 0001 2501          move.b    #1,-46(A6)
080013BC  FFD2      
                    2502   vsprintf_16:
080013BE  486E 0010 2503          pea       16(A6)
080013C2  486E 000C 2504          pea       12(A6)
080013C6  6100 FE6C 2505          bsr       @vsprintf_getval
080013CA  504F      2506          addq.w    #8,A7
080013CC  2A40      2507          move.l    D0,A5
080013CE  206E 000C 2508          move.l    12(A6),A0
080013D2  1010      2509          move.b    (A0),D0
080013D4  4880      2510          ext.w     D0
080013D6  48C0      2511          ext.l     D0
080013D8  0C80 0000 2512          cmp.l     #46,D0
080013DC  002E      
080013DE  6614      2513          bne.s     vsprintf_18
080013E0  52AE 000C 2514          addq.l    #1,12(A6)
080013E4  486E 0010 2515          pea       16(A6)
080013E8  486E 000C 2516          pea       12(A6)
080013EC  6100 FE46 2517          bsr       @vsprintf_getval
080013F0  504F      2518          addq.w    #8,A7
080013F2  2A00      2519          move.l    D0,D5
                    2520   vsprintf_18:
080013F4  206E 000C 2521          move.l    12(A6),A0
080013F8  1010      2522          move.b    (A0),D0
080013FA  4880      2523          ext.w     D0
080013FC  48C0      2524          ext.l     D0
080013FE  0C80 0000 2525          cmp.l     #108,D0
08001402  006C      
08001404  660A      2526          bne.s     vsprintf_20
08001406  52AE 000C 2527          addq.l    #1,12(A6)
0800140A  1D7C 0001 2528          move.b    #1,-45(A6)
0800140E  FFD3      
                    2529   vsprintf_20:
08001410  206E 000C 2530          move.l    12(A6),A0
08001414  1010      2531          move.b    (A0),D0
08001416  4880      2532          ext.w     D0
08001418  48C0      2533          ext.l     D0
0800141A  0C80 0000 2534          cmp.l     #111,D0
0800141E  006F      
08001420  6700 00D4 2535          beq       vsprintf_27
08001424  6E34      2536          bgt.s     vsprintf_33
08001426  0C80 0000 2537          cmp.l     #100,D0
0800142A  0064      
0800142C  6700 0054 2538          beq       vsprintf_24
08001430  6E1C      2539          bgt.s     vsprintf_34
08001432  0C80 0000 2540          cmp.l     #99,D0
08001436  0063      
08001438  6700 012C 2541          beq       vsprintf_30
0800143C  6E00 016A 2542          bgt       vsprintf_22
08001440  0C80 0000 2543          cmp.l     #88,D0
08001444  0058      
08001446  6700 00E6 2544          beq       vsprintf_28
0800144A  6000 015C 2545          bra       vsprintf_22
                    2546   vsprintf_34:
0800144E  0C80 0000 2547          cmp.l     #105,D0
08001452  0069      
08001454  672C      2548          beq.s     vsprintf_24
08001456  6000 0150 2549          bra       vsprintf_22
                    2550   vsprintf_33:
0800145A  0C80 0000 2551          cmp.l     #117,D0
0800145E  0075      
08001460  6700 005C 2552          beq       vsprintf_26
08001464  6E0E      2553          bgt.s     vsprintf_35
08001466  0C80 0000 2554          cmp.l     #115,D0
0800146A  0073      
0800146C  6700 011C 2555          beq       vsprintf_31
08001470  6000 0136 2556          bra       vsprintf_22
                    2557   vsprintf_35:
08001474  0C80 0000 2558          cmp.l     #120,D0
08001478  0078      
0800147A  6700 00B2 2559          beq       vsprintf_28
0800147E  6000 0128 2560          bra       vsprintf_22
                    2561   vsprintf_24:
08001482  4A2E FFD3 2562          tst.b     -45(A6)
08001486  671A      2563          beq.s     vsprintf_36
08001488  4878 000A 2564          pea       10
0800148C  2F03      2565          move.l    D3,-(A7)
0800148E  206E 0010 2566          move.l    16(A6),A0
08001492  58AE 0010 2567          addq.l    #4,16(A6)
08001496  2F10      2568          move.l    (A0),-(A7)
08001498  6100 04F8 2569          bsr       _ltoa
0800149C  DEFC 000C 2570          add.w     #12,A7
080014A0  6018      2571          bra.s     vsprintf_37
                    2572   vsprintf_36:
080014A2  4878 000A 2573          pea       10
080014A6  2F03      2574          move.l    D3,-(A7)
080014A8  206E 0010 2575          move.l    16(A6),A0
080014AC  58AE 0010 2576          addq.l    #4,16(A6)
080014B0  2F10      2577          move.l    (A0),-(A7)
080014B2  6100 04DE 2578          bsr       _ltoa
080014B6  DEFC 000C 2579          add.w     #12,A7
                    2580   vsprintf_37:
080014BA  6000 00FA 2581          bra       vsprintf_23
                    2582   vsprintf_26:
080014BE  4A2E FFD3 2583          tst.b     -45(A6)
080014C2  6718      2584          beq.s     vsprintf_38
080014C4  4878 000A 2585          pea       10
080014C8  2F03      2586          move.l    D3,-(A7)
080014CA  206E 0010 2587          move.l    16(A6),A0
080014CE  58AE 0010 2588          addq.l    #4,16(A6)
080014D2  2F10      2589          move.l    (A0),-(A7)
080014D4  4E94      2590          jsr       (A4)
080014D6  DEFC 000C 2591          add.w     #12,A7
080014DA  6016      2592          bra.s     vsprintf_39
                    2593   vsprintf_38:
080014DC  4878 000A 2594          pea       10
080014E0  2F03      2595          move.l    D3,-(A7)
080014E2  206E 0010 2596          move.l    16(A6),A0
080014E6  58AE 0010 2597          addq.l    #4,16(A6)
080014EA  2F10      2598          move.l    (A0),-(A7)
080014EC  4E94      2599          jsr       (A4)
080014EE  DEFC 000C 2600          add.w     #12,A7
                    2601   vsprintf_39:
080014F2  6000 00C2 2602          bra       vsprintf_23
                    2603   vsprintf_27:
080014F6  4A2E FFD3 2604          tst.b     -45(A6)
080014FA  6718      2605          beq.s     vsprintf_40
080014FC  4878 0008 2606          pea       8
08001500  2F03      2607          move.l    D3,-(A7)
08001502  206E 0010 2608          move.l    16(A6),A0
08001506  58AE 0010 2609          addq.l    #4,16(A6)
0800150A  2F10      2610          move.l    (A0),-(A7)
0800150C  4E94      2611          jsr       (A4)
0800150E  DEFC 000C 2612          add.w     #12,A7
08001512  6016      2613          bra.s     vsprintf_41
                    2614   vsprintf_40:
08001514  4878 0008 2615          pea       8
08001518  2F03      2616          move.l    D3,-(A7)
0800151A  206E 0010 2617          move.l    16(A6),A0
0800151E  58AE 0010 2618          addq.l    #4,16(A6)
08001522  2F10      2619          move.l    (A0),-(A7)
08001524  4E94      2620          jsr       (A4)
08001526  DEFC 000C 2621          add.w     #12,A7
                    2622   vsprintf_41:
0800152A  6000 008A 2623          bra       vsprintf_23
                    2624   vsprintf_28:
0800152E  4A2E FFD3 2625          tst.b     -45(A6)
08001532  6718      2626          beq.s     vsprintf_42
08001534  4878 0010 2627          pea       16
08001538  2F03      2628          move.l    D3,-(A7)
0800153A  206E 0010 2629          move.l    16(A6),A0
0800153E  58AE 0010 2630          addq.l    #4,16(A6)
08001542  2F10      2631          move.l    (A0),-(A7)
08001544  4E94      2632          jsr       (A4)
08001546  DEFC 000C 2633          add.w     #12,A7
0800154A  6016      2634          bra.s     vsprintf_43
                    2635   vsprintf_42:
0800154C  4878 0010 2636          pea       16
08001550  2F03      2637          move.l    D3,-(A7)
08001552  206E 0010 2638          move.l    16(A6),A0
08001556  58AE 0010 2639          addq.l    #4,16(A6)
0800155A  2F10      2640          move.l    (A0),-(A7)
0800155C  4E94      2641          jsr       (A4)
0800155E  DEFC 000C 2642          add.w     #12,A7
                    2643   vsprintf_43:
08001562  6000 0052 2644          bra       vsprintf_23
                    2645   vsprintf_30:
08001566  206E 0010 2646          move.l    16(A6),A0
0800156A  58AE 0010 2647          addq.l    #4,16(A6)
0800156E  2010      2648          move.l    (A0),D0
08001570  2042      2649          move.l    D2,A0
08001572  5282      2650          addq.l    #1,D2
08001574  1080      2651          move.b    D0,(A0)
08001576  2042      2652          move.l    D2,A0
08001578  4210      2653          clr.b     (A0)
0800157A  200D      2654          move.l    A5,D0
0800157C  6704      2655          beq.s     vsprintf_44
0800157E  200D      2656          move.l    A5,D0
08001580  6002      2657          bra.s     vsprintf_45
                    2658   vsprintf_44:
08001582  7001      2659          moveq     #1,D0
                    2660   vsprintf_45:
08001584  2A00      2661          move.l    D0,D5
08001586  6000 002E 2662          bra       vsprintf_23
                    2663   vsprintf_31:
0800158A  206E 0010 2664          move.l    16(A6),A0
0800158E  58AE 0010 2665          addq.l    #4,16(A6)
08001592  2610      2666          move.l    (A0),D3
08001594  0C85 FFFF 2667          cmp.l     #-1,D5
08001598  FFFF      
0800159A  660A      2668          bne.s     vsprintf_46
0800159C  2F03      2669          move.l    D3,-(A7)
0800159E  6100 0578 2670          bsr       _strlen
080015A2  584F      2671          addq.w    #4,A7
080015A4  2A00      2672          move.l    D0,D5
                    2673   vsprintf_46:
080015A6  600E      2674          bra.s     vsprintf_23
                    2675   vsprintf_22:
080015A8  206E 000C 2676          move.l    12(A6),A0
080015AC  2242      2677          move.l    D2,A1
080015AE  5282      2678          addq.l    #1,D2
080015B0  1290      2679          move.b    (A0),(A1)
080015B2  2042      2680          move.l    D2,A0
080015B4  4210      2681          clr.b     (A0)
                    2682   vsprintf_23:
080015B6  2F03      2683          move.l    D3,-(A7)
080015B8  6100 055E 2684          bsr       _strlen
080015BC  584F      2685          addq.w    #4,A7
080015BE  1800      2686          move.b    D0,D4
080015C0  206E 000C 2687          move.l    12(A6),A0
080015C4  1010      2688          move.b    (A0),D0
080015C6  4880      2689          ext.w     D0
080015C8  48C0      2690          ext.l     D0
080015CA  0C80 0000 2691          cmp.l     #115,D0
080015CE  0073      
080015D0  6618      2692          bne.s     vsprintf_48
080015D2  0C85 0000 2693          cmp.l     #0,D5
080015D6  0000      
080015D8  6D10      2694          blt.s     vsprintf_48
080015DA  4884      2695          ext.w     D4
080015DC  48C4      2696          ext.l     D4
080015DE  B885      2697          cmp.l     D5,D4
080015E0  6F04      2698          ble.s     vsprintf_50
080015E2  1005      2699          move.b    D5,D0
080015E4  6002      2700          bra.s     vsprintf_51
                    2701   vsprintf_50:
080015E6  1004      2702          move.b    D4,D0
                    2703   vsprintf_51:
080015E8  1800      2704          move.b    D0,D4
                    2705   vsprintf_48:
080015EA  206E 000C 2706          move.l    12(A6),A0
080015EE  1010      2707          move.b    (A0),D0
080015F0  4880      2708          ext.w     D0
080015F2  48C0      2709          ext.l     D0
080015F4  0C80 0000 2710          cmp.l     #88,D0
080015F8  0058      
080015FA  6600 0026 2711          bne       vsprintf_56
080015FE  41EE FFDC 2712          lea       -36(A6),A0
08001602  2408      2713          move.l    A0,D2
                    2714   vsprintf_54:
08001604  2042      2715          move.l    D2,A0
08001606  4A10      2716          tst.b     (A0)
08001608  6718      2717          beq.s     vsprintf_56
0800160A  2042      2718          move.l    D2,A0
0800160C  1210      2719          move.b    (A0),D1
0800160E  4881      2720          ext.w     D1
08001610  48C1      2721          ext.l     D1
08001612  2F01      2722          move.l    D1,-(A7)
08001614  6100 0514 2723          bsr       _toupper
08001618  584F      2724          addq.w    #4,A7
0800161A  2042      2725          move.l    D2,A0
0800161C  1080      2726          move.b    D0,(A0)
0800161E  5282      2727          addq.l    #1,D2
08001620  60E2      2728          bra       vsprintf_54
                    2729   vsprintf_56:
08001622  7E00      2730          moveq     #0,D7
08001624  41EE FFD4 2731          lea       -44(A6),A0
08001628  2408      2732          move.l    A0,D2
0800162A  206E 000C 2733          move.l    12(A6),A0
0800162E  1010      2734          move.b    (A0),D0
08001630  4880      2735          ext.w     D0
08001632  48C0      2736          ext.l     D0
08001634  0C80 0000 2737          cmp.l     #100,D0
08001638  0064      
0800163A  6714      2738          beq.s     vsprintf_59
0800163C  206E 000C 2739          move.l    12(A6),A0
08001640  1010      2740          move.b    (A0),D0
08001642  4880      2741          ext.w     D0
08001644  48C0      2742          ext.l     D0
08001646  0C80 0000 2743          cmp.l     #105,D0
0800164A  0069      
0800164C  6600 0076 2744          bne       vsprintf_65
                    2745   vsprintf_59:
08001650  4A2E FFCE 2746          tst.b     -50(A6)
08001654  6612      2747          bne.s     vsprintf_62
08001656  2043      2748          move.l    D3,A0
08001658  1010      2749          move.b    (A0),D0
0800165A  4880      2750          ext.w     D0
0800165C  48C0      2751          ext.l     D0
0800165E  0C80 0000 2752          cmp.l     #45,D0
08001662  002D      
08001664  6600 002E 2753          bne       vsprintf_60
                    2754   vsprintf_62:
08001668  2043      2755          move.l    D3,A0
0800166A  1010      2756          move.b    (A0),D0
0800166C  4880      2757          ext.w     D0
0800166E  48C0      2758          ext.l     D0
08001670  0C80 0000 2759          cmp.l     #45,D0
08001674  002D      
08001676  660E      2760          bne.s     vsprintf_63
08001678  2043      2761          move.l    D3,A0
0800167A  5283      2762          addq.l    #1,D3
0800167C  2242      2763          move.l    D2,A1
0800167E  5282      2764          addq.l    #1,D2
08001680  1290      2765          move.b    (A0),(A1)
08001682  5304      2766          subq.b    #1,D4
08001684  6008      2767          bra.s     vsprintf_64
                    2768   vsprintf_63:
08001686  2042      2769          move.l    D2,A0
08001688  5282      2770          addq.l    #1,D2
0800168A  10BC 002B 2771          move.b    #43,(A0)
                    2772   vsprintf_64:
0800168E  5287      2773          addq.l    #1,D7
08001690  6000 0032 2774          bra       vsprintf_65
                    2775   vsprintf_60:
08001694  4A2E FFCF 2776          tst.b     -49(A6)
08001698  6700 002A 2777          beq       vsprintf_65
0800169C  2043      2778          move.l    D3,A0
0800169E  1010      2779          move.b    (A0),D0
080016A0  4880      2780          ext.w     D0
080016A2  48C0      2781          ext.l     D0
080016A4  0C80 0000 2782          cmp.l     #45,D0
080016A8  002D      
080016AA  660E      2783          bne.s     vsprintf_67
080016AC  2043      2784          move.l    D3,A0
080016AE  5283      2785          addq.l    #1,D3
080016B0  2242      2786          move.l    D2,A1
080016B2  5282      2787          addq.l    #1,D2
080016B4  1290      2788          move.b    (A0),(A1)
080016B6  5304      2789          subq.b    #1,D4
080016B8  6008      2790          bra.s     vsprintf_68
                    2791   vsprintf_67:
080016BA  2042      2792          move.l    D2,A0
080016BC  5282      2793          addq.l    #1,D2
080016BE  10BC 0020 2794          move.b    #32,(A0)
                    2795   vsprintf_68:
080016C2  5287      2796          addq.l    #1,D7
                    2797   vsprintf_65:
080016C4  4A2E FFD0 2798          tst.b     -48(A6)
080016C8  6700 0066 2799          beq       vsprintf_77
080016CC  206E 000C 2800          move.l    12(A6),A0
080016D0  1010      2801          move.b    (A0),D0
080016D2  4880      2802          ext.w     D0
080016D4  48C0      2803          ext.l     D0
080016D6  0C80 0000 2804          cmp.l     #111,D0
080016DA  006F      
080016DC  671A      2805          beq.s     vsprintf_73
080016DE  6E0C      2806          bgt.s     vsprintf_76
080016E0  0C80 0000 2807          cmp.l     #88,D0
080016E4  0058      
080016E6  6710      2808          beq.s     vsprintf_73
080016E8  6000 0046 2809          bra       vsprintf_77
                    2810   vsprintf_76:
080016EC  0C80 0000 2811          cmp.l     #120,D0
080016F0  0078      
080016F2  6704      2812          beq.s     vsprintf_73
080016F4  6000 003A 2813          bra       vsprintf_77
                    2814   vsprintf_73:
080016F8  2042      2815          move.l    D2,A0
080016FA  5282      2816          addq.l    #1,D2
080016FC  10BC 0030 2817          move.b    #48,(A0)
08001700  5287      2818          addq.l    #1,D7
08001702  206E 000C 2819          move.l    12(A6),A0
08001706  1010      2820          move.b    (A0),D0
08001708  4880      2821          ext.w     D0
0800170A  48C0      2822          ext.l     D0
0800170C  0C80 0000 2823          cmp.l     #120,D0
08001710  0078      
08001712  6712      2824          beq.s     vsprintf_79
08001714  206E 000C 2825          move.l    12(A6),A0
08001718  1010      2826          move.b    (A0),D0
0800171A  4880      2827          ext.w     D0
0800171C  48C0      2828          ext.l     D0
0800171E  0C80 0000 2829          cmp.l     #88,D0
08001722  0058      
08001724  660A      2830          bne.s     vsprintf_77
                    2831   vsprintf_79:
08001726  2042      2832          move.l    D2,A0
08001728  5282      2833          addq.l    #1,D2
0800172A  10BC 0078 2834          move.b    #120,(A0)
0800172E  5287      2835          addq.l    #1,D7
                    2836   vsprintf_77:
08001730  2042      2837          move.l    D2,A0
08001732  4210      2838          clr.b     (A0)
08001734  206E 000C 2839          move.l    12(A6),A0
08001738  1010      2840          move.b    (A0),D0
0800173A  4880      2841          ext.w     D0
0800173C  48C0      2842          ext.l     D0
0800173E  0C80 0000 2843          cmp.l     #105,D0
08001742  0069      
08001744  6700 0076 2844          beq       vsprintf_82
08001748  6E42      2845          bgt.s     vsprintf_93
0800174A  0C80 0000 2846          cmp.l     #99,D0
0800174E  0063      
08001750  6700 0084 2847          beq       vsprintf_96
08001754  6E1C      2848          bgt.s     vsprintf_94
08001756  0C80 0000 2849          cmp.l     #88,D0
0800175A  0058      
0800175C  6700 005E 2850          beq       vsprintf_82
08001760  6E00 0184 2851          bgt       vsprintf_80
08001764  0C80 0000 2852          cmp.l     #69,D0
08001768  0045      
0800176A  6700 0050 2853          beq       vsprintf_82
0800176E  6000 0176 2854          bra       vsprintf_80
                    2855   vsprintf_94:
08001772  0C80 0000 2856          cmp.l     #101,D0
08001776  0065      
08001778  6700 0042 2857          beq       vsprintf_82
0800177C  6E00 0168 2858          bgt       vsprintf_80
08001780  0C80 0000 2859          cmp.l     #100,D0
08001784  0064      
08001786  6734      2860          beq.s     vsprintf_82
08001788  6000 015C 2861          bra       vsprintf_80
                    2862   vsprintf_93:
0800178C  0C80 0000 2863          cmp.l     #117,D0
08001790  0075      
08001792  6728      2864          beq.s     vsprintf_82
08001794  6E1A      2865          bgt.s     vsprintf_95
08001796  0C80 0000 2866          cmp.l     #115,D0
0800179A  0073      
0800179C  6700 0038 2867          beq       vsprintf_96
080017A0  6E00 0144 2868          bgt       vsprintf_80
080017A4  0C80 0000 2869          cmp.l     #111,D0
080017A8  006F      
080017AA  6710      2870          beq.s     vsprintf_82
080017AC  6000 0138 2871          bra       vsprintf_80
                    2872   vsprintf_95:
080017B0  0C80 0000 2873          cmp.l     #120,D0
080017B4  0078      
080017B6  6704      2874          beq.s     vsprintf_82
080017B8  6000 012C 2875          bra       vsprintf_80
                    2876   vsprintf_82:
080017BC  4A2E FFD2 2877          tst.b     -46(A6)
080017C0  6714      2878          beq.s     vsprintf_96
080017C2  4A2E FFCD 2879          tst.b     -51(A6)
080017C6  660E      2880          bne.s     vsprintf_96
080017C8  200D      2881          move.l    A5,D0
080017CA  9087      2882          sub.l     D7,D0
080017CC  4884      2883          ext.w     D4
080017CE  48C4      2884          ext.l     D4
080017D0  9084      2885          sub.l     D4,D0
080017D2  2D40 FFFC 2886          move.l    D0,-4(A6)
                    2887   vsprintf_96:
080017D6  202E FFFC 2888          move.l    -4(A6),D0
080017DA  0C80 0000 2889          cmp.l     #0,D0
080017DE  0000      
080017E0  6C04      2890          bge.s     vsprintf_98
080017E2  42AE FFFC 2891          clr.l     -4(A6)
                    2892   vsprintf_98:
080017E6  4A2E FFCD 2893          tst.b     -51(A6)
080017EA  6600 0030 2894          bne       vsprintf_104
080017EE  4884      2895          ext.w     D4
080017F0  48C4      2896          ext.l     D4
080017F2  2004      2897          move.l    D4,D0
080017F4  D0AE FFFC 2898          add.l     -4(A6),D0
080017F8  D087      2899          add.l     D7,D0
080017FA  1D40 FFD1 2900          move.b    D0,-47(A6)
                    2901   vsprintf_102:
080017FE  102E FFD1 2902          move.b    -47(A6),D0
08001802  4880      2903          ext.w     D0
08001804  48C0      2904          ext.l     D0
08001806  220D      2905          move.l    A5,D1
08001808  534D      2906          subq.w    #1,A5
0800180A  B081      2907          cmp.l     D1,D0
0800180C  6C0E      2908          bge.s     vsprintf_104
0800180E  4878 0020 2909          pea       32
08001812  2F0A      2910          move.l    A2,-(A7)
08001814  4E93      2911          jsr       (A3)
08001816  504F      2912          addq.w    #8,A7
08001818  5286      2913          addq.l    #1,D6
0800181A  60E2      2914          bra       vsprintf_102
                    2915   vsprintf_104:
0800181C  41EE FFD4 2916          lea       -44(A6),A0
08001820  2408      2917          move.l    A0,D2
                    2918   vsprintf_105:
08001822  2042      2919          move.l    D2,A0
08001824  4A10      2920          tst.b     (A0)
08001826  6716      2921          beq.s     vsprintf_107
08001828  2042      2922          move.l    D2,A0
0800182A  5282      2923          addq.l    #1,D2
0800182C  1210      2924          move.b    (A0),D1
0800182E  4881      2925          ext.w     D1
08001830  48C1      2926          ext.l     D1
08001832  2F01      2927          move.l    D1,-(A7)
08001834  2F0A      2928          move.l    A2,-(A7)
08001836  4E93      2929          jsr       (A3)
08001838  504F      2930          addq.w    #8,A7
0800183A  5286      2931          addq.l    #1,D6
0800183C  60E4      2932          bra       vsprintf_105
                    2933   vsprintf_107:
0800183E  202E FFFC 2934          move.l    -4(A6),D0
08001842  1D40 FFD1 2935          move.b    D0,-47(A6)
                    2936   vsprintf_108:
08001846  102E FFD1 2937          move.b    -47(A6),D0
0800184A  532E FFD1 2938          subq.b    #1,-47(A6)
0800184E  4A00      2939          tst.b     D0
08001850  670E      2940          beq.s     vsprintf_110
08001852  4878 0030 2941          pea       48
08001856  2F0A      2942          move.l    A2,-(A7)
08001858  4E93      2943          jsr       (A3)
0800185A  504F      2944          addq.w    #8,A7
0800185C  5286      2945          addq.l    #1,D6
0800185E  60E6      2946          bra       vsprintf_108
                    2947   vsprintf_110:
08001860  2043      2948          move.l    D3,A0
08001862  4A10      2949          tst.b     (A0)
08001864  6700 0048 2950          beq       vsprintf_113
08001868  206E 000C 2951          move.l    12(A6),A0
0800186C  1010      2952          move.b    (A0),D0
0800186E  4880      2953          ext.w     D0
08001870  48C0      2954          ext.l     D0
08001872  0C80 0000 2955          cmp.l     #115,D0
08001876  0073      
08001878  670C      2956          beq.s     vsprintf_116
0800187A  6E18      2957          bgt.s     vsprintf_119
0800187C  0C80 0000 2958          cmp.l     #99,D0
08001880  0063      
08001882  6702      2959          beq.s     vsprintf_116
08001884  600E      2960          bra.s     vsprintf_119
                    2961   vsprintf_116:
08001886  2005      2962          move.l    D5,D0
08001888  5385      2963          subq.l    #1,D5
0800188A  0C80 0000 2964          cmp.l     #0,D0
0800188E  0000      
08001890  6E02      2965          bgt.s     vsprintf_119
08001892  6016      2966          bra.s     vsprintf_115
                    2967   vsprintf_119:
08001894  2043      2968          move.l    D3,A0
08001896  5283      2969          addq.l    #1,D3
08001898  1210      2970          move.b    (A0),D1
0800189A  4881      2971          ext.w     D1
0800189C  48C1      2972          ext.l     D1
0800189E  2F01      2973          move.l    D1,-(A7)
080018A0  2F0A      2974          move.l    A2,-(A7)
080018A2  4E93      2975          jsr       (A3)
080018A4  504F      2976          addq.w    #8,A7
080018A6  5286      2977          addq.l    #1,D6
080018A8  6002      2978          bra.s     vsprintf_112
                    2979   vsprintf_115:
080018AA  6002      2980          bra.s     vsprintf_113
                    2981   vsprintf_112:
080018AC  60B2      2982          bra       vsprintf_110
                    2983   vsprintf_113:
080018AE  4A2E FFCD 2984          tst.b     -51(A6)
080018B2  6700 0030 2985          beq       vsprintf_125
080018B6  4884      2986          ext.w     D4
080018B8  48C4      2987          ext.l     D4
080018BA  2004      2988          move.l    D4,D0
080018BC  D0AE FFFC 2989          add.l     -4(A6),D0
080018C0  D087      2990          add.l     D7,D0
080018C2  1D40 FFD1 2991          move.b    D0,-47(A6)
                    2992   vsprintf_123:
080018C6  102E FFD1 2993          move.b    -47(A6),D0
080018CA  4880      2994          ext.w     D0
080018CC  48C0      2995          ext.l     D0
080018CE  220D      2996          move.l    A5,D1
080018D0  534D      2997          subq.w    #1,A5
080018D2  B081      2998          cmp.l     D1,D0
080018D4  6C0E      2999          bge.s     vsprintf_125
080018D6  4878 0020 3000          pea       32
080018DA  2F0A      3001          move.l    A2,-(A7)
080018DC  4E93      3002          jsr       (A3)
080018DE  504F      3003          addq.w    #8,A7
080018E0  5386      3004          subq.l    #1,D6
080018E2  60E2      3005          bra       vsprintf_123
                    3006   vsprintf_125:
080018E4  6014      3007          bra.s     vsprintf_81
                    3008   vsprintf_80:
080018E6  206E 000C 3009          move.l    12(A6),A0
080018EA  1210      3010          move.b    (A0),D1
080018EC  4881      3011          ext.w     D1
080018EE  48C1      3012          ext.l     D1
080018F0  2F01      3013          move.l    D1,-(A7)
080018F2  2F0A      3014          move.l    A2,-(A7)
080018F4  4E93      3015          jsr       (A3)
080018F6  504F      3016          addq.w    #8,A7
080018F8  5286      3017          addq.l    #1,D6
                    3018   vsprintf_81:
080018FA  52AE 000C 3019          addq.l    #1,12(A6)
                    3020   vsprintf_2:
080018FE  6000 F9D6 3021          bra       vsprintf_1
                    3022   vsprintf_3:
08001902  4A92      3023          tst.l     (A2)
08001904  6710      3024          beq.s     vsprintf_126
08001906  4201      3025          clr.b     D1
08001908  C2BC 0000 3026          and.l     #255,D1
0800190C  00FF      
0800190E  2F01      3027          move.l    D1,-(A7)
08001910  2F0A      3028          move.l    A2,-(A7)
08001912  4E93      3029          jsr       (A3)
08001914  504F      3030          addq.w    #8,A7
                    3031   vsprintf_126:
08001916  2006      3032          move.l    D6,D0
08001918  4CDF 3CFC 3033          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0800191C  4E5E      3034          unlk      A6
0800191E  4E75      3035          rts
                    3036   @itoa_convert:
08001920  4E56 0000 3037          link      A6,#0
08001924  48E7 3C00 3038          movem.l   D2/D3/D4/D5,-(A7)
08001928  242E 0008 3039          move.l    8(A6),D2
0800192C  262E 0010 3040          move.l    16(A6),D3
08001930  2A2E 000C 3041          move.l    12(A6),D5
08001934  2F05      3042          move.l    D5,-(A7)
08001936  2F03      3043          move.l    D3,-(A7)
08001938  6100 F754 3044          bsr       ULDIV
0800193C  202F 0004 3045          move.l    4(A7),D0
08001940  504F      3046          addq.w    #8,A7
08001942  2800      3047          move.l    D0,D4
08001944  BA83      3048          cmp.l     D3,D5
08001946  651A      3049          blo.s     @itoa_convert_1
08001948  2F03      3050          move.l    D3,-(A7)
0800194A  2F05      3051          move.l    D5,-(A7)
0800194C  2F03      3052          move.l    D3,-(A7)
0800194E  6100 F73E 3053          bsr       ULDIV
08001952  2217      3054          move.l    (A7),D1
08001954  504F      3055          addq.w    #8,A7
08001956  2F01      3056          move.l    D1,-(A7)
08001958  2F02      3057          move.l    D2,-(A7)
0800195A  61C4      3058          bsr       @itoa_convert
0800195C  DEFC 000C 3059          add.w     #12,A7
08001960  2400      3060          move.l    D0,D2
                    3061   @itoa_convert_1:
08001962  0C84 0000 3062          cmp.l     #9,D4
08001966  0009      
08001968  6E0A      3063          bgt.s     @itoa_convert_3
0800196A  2004      3064          move.l    D4,D0
0800196C  0680 0000 3065          add.l     #48,D0
08001970  0030      
08001972  600E      3066          bra.s     @itoa_convert_4
                    3067   @itoa_convert_3:
08001974  2004      3068          move.l    D4,D0
08001976  0680 0000 3069          add.l     #97,D0
0800197A  0061      
0800197C  0480 0000 3070          sub.l     #10,D0
08001980  000A      
                    3071   @itoa_convert_4:
08001982  2042      3072          move.l    D2,A0
08001984  1080      3073          move.b    D0,(A0)
08001986  2002      3074          move.l    D2,D0
08001988  5280      3075          addq.l    #1,D0
0800198A  4CDF 003C 3076          movem.l   (A7)+,D2/D3/D4/D5
0800198E  4E5E      3077          unlk      A6
08001990  4E75      3078          rts
                    3079   _ltoa:
08001992  4E56 0000 3080          link      A6,#0
08001996  48E7 3C00 3081          movem.l   D2/D3/D4/D5,-(A7)
0800199A  242E 0008 3082          move.l    8(A6),D2
0800199E  262E 000C 3083          move.l    12(A6),D3
080019A2  2A2E 0010 3084          move.l    16(A6),D5
080019A6  2803      3085          move.l    D3,D4
080019A8  0C85 0000 3086          cmp.l     #2,D5
080019AC  0002      
080019AE  6D08      3087          blt.s     ltoa_3
080019B0  0C85 0000 3088          cmp.l     #36,D5
080019B4  0024      
080019B6  6F06      3089          ble.s     ltoa_1
                    3090   ltoa_3:
080019B8  2003      3091          move.l    D3,D0
080019BA  6000 0052 3092          bra       ltoa_4
                    3093   ltoa_1:
080019BE  0C85 0000 3094          cmp.l     #10,D5
080019C2  000A      
080019C4  6600 0032 3095          bne       ltoa_5
080019C8  0C82 0000 3096          cmp.l     #0,D2
080019CC  0000      
080019CE  6C28      3097          bge.s     ltoa_5
080019D0  2002      3098          move.l    D2,D0
080019D2  4480      3099          neg.l     D0
080019D4  2400      3100          move.l    D0,D2
080019D6  0C82 0000 3101          cmp.l     #0,D2
080019DA  0000      
080019DC  6C12      3102          bge.s     ltoa_7
080019DE  4879 0800 3103          pea       @itoa_1
080019E2  201A      
080019E4  2F03      3104          move.l    D3,-(A7)
080019E6  6100 016E 3105          bsr       _strcpy
080019EA  504F      3106          addq.w    #8,A7
080019EC  2003      3107          move.l    D3,D0
080019EE  601E      3108          bra.s     ltoa_4
                    3109   ltoa_7:
080019F0  2044      3110          move.l    D4,A0
080019F2  5284      3111          addq.l    #1,D4
080019F4  10BC 002D 3112          move.b    #45,(A0)
                    3113   ltoa_5:
080019F8  2F05      3114          move.l    D5,-(A7)
080019FA  2F02      3115          move.l    D2,-(A7)
080019FC  2F04      3116          move.l    D4,-(A7)
080019FE  6100 FF20 3117          bsr       @itoa_convert
08001A02  DEFC 000C 3118          add.w     #12,A7
08001A06  2800      3119          move.l    D0,D4
08001A08  2044      3120          move.l    D4,A0
08001A0A  4210      3121          clr.b     (A0)
08001A0C  2003      3122          move.l    D3,D0
                    3123   ltoa_4:
08001A0E  4CDF 003C 3124          movem.l   (A7)+,D2/D3/D4/D5
08001A12  4E5E      3125          unlk      A6
08001A14  4E75      3126          rts
                    3127   _ultoa:
08001A16  4E56 0000 3128          link      A6,#0
08001A1A  48E7 3800 3129          movem.l   D2/D3/D4,-(A7)
08001A1E  262E 0010 3130          move.l    16(A6),D3
08001A22  282E 000C 3131          move.l    12(A6),D4
08001A26  2404      3132          move.l    D4,D2
08001A28  0C83 0000 3133          cmp.l     #2,D3
08001A2C  0002      
08001A2E  6D08      3134          blt.s     ultoa_3
08001A30  0C83 0000 3135          cmp.l     #36,D3
08001A34  0024      
08001A36  6F04      3136          ble.s     ultoa_1
                    3137   ultoa_3:
08001A38  2004      3138          move.l    D4,D0
08001A3A  6018      3139          bra.s     ultoa_4
                    3140   ultoa_1:
08001A3C  2F03      3141          move.l    D3,-(A7)
08001A3E  2F2E 0008 3142          move.l    8(A6),-(A7)
08001A42  2F02      3143          move.l    D2,-(A7)
08001A44  6100 FEDA 3144          bsr       @itoa_convert
08001A48  DEFC 000C 3145          add.w     #12,A7
08001A4C  2400      3146          move.l    D0,D2
08001A4E  2042      3147          move.l    D2,A0
08001A50  4210      3148          clr.b     (A0)
08001A52  2004      3149          move.l    D4,D0
                    3150   ultoa_4:
08001A54  4CDF 001C 3151          movem.l   (A7)+,D2/D3/D4
08001A58  4E5E      3152          unlk      A6
08001A5A  4E75      3153          rts
                    3154   _itoa:
08001A5C  4E56 0000 3155          link      A6,#0
08001A60  2F2E 0010 3156          move.l    16(A6),-(A7)
08001A64  2F2E 000C 3157          move.l    12(A6),-(A7)
08001A68  2F2E 0008 3158          move.l    8(A6),-(A7)
08001A6C  6100 FF24 3159          bsr       _ltoa
08001A70  DEFC 000C 3160          add.w     #12,A7
08001A74  4E5E      3161          unlk      A6
08001A76  4E75      3162          rts
                    3163   ULMUL:
08001A78  4E56 0000 3164          link    A6,#0
08001A7C  48E7 C000 3165          movem.l D0/D1,-(A7)
08001A80  222E 0008 3166          move.l  8(A6),D1
08001A84  202E 000C 3167          move.l  12(A6),D0
08001A88  602C      3168          bra.s   lmul_3
                    3169   LMUL:
08001A8A  4E56 0000 3170          link    A6,#0
08001A8E  48E7 C000 3171          movem.l D0/D1,-(A7)
08001A92  222E 0008 3172          move.l  8(A6),D1
08001A96  202E 000C 3173          move.l  12(A6),D0
08001A9A  4A80      3174          tst.l   D0
08001A9C  6A0A      3175          bpl.s   lmul_1
08001A9E  4480      3176          neg.l   D0
08001AA0  4A81      3177          tst.l   D1
08001AA2  6A0A      3178          bpl.s   lmul_2
08001AA4  4481      3179          neg.l   D1
08001AA6  600E      3180          bra.s   lmul_3
                    3181   lmul_1:
08001AA8  4A81      3182          tst.l   D1
08001AAA  6A0A      3183          bpl.s   lmul_3
08001AAC  4481      3184          neg.l   D1
                    3185   lmul_2:
08001AAE  6114      3186          bsr.s   domul
08001AB0  4481      3187          neg.l   D1
08001AB2  4080      3188          negx.l  D0
08001AB4  6002      3189          bra.s   lmul_4
                    3190   lmul_3:
08001AB6  610C      3191          bsr.s   domul
                    3192   lmul_4:
08001AB8  2D41 0008 3193          move.l  D1,8(A6)
08001ABC  4CDF 0003 3194          movem.l (A7)+,D0/D1
08001AC0  4E5E      3195          unlk    A6
08001AC2  4E75      3196          rts
                    3197   domul:
08001AC4  0C81 0000 3198          cmpi.l  #$FFFF,D1
08001AC8  FFFF      
08001ACA  620C      3199          bhi.s   domul_1
08001ACC  0C80 0000 3200          cmpi.l  #$FFFF,D0
08001AD0  FFFF      
08001AD2  620E      3201          bhi.s   domul_2
08001AD4  C2C0      3202          mulu    D0,D1
08001AD6  4E75      3203          rts
                    3204   domul_1:
08001AD8  0C80 0000 3205          cmpi.l  #$FFFF,D0
08001ADC  FFFF      
08001ADE  6218      3206          bhi.s   domul_4
08001AE0  6002      3207          bra.s   domul_3
                    3208   domul_2
08001AE2  C141      3209          exg     D0,D1
                    3210   domul_3:
08001AE4  2F02      3211          move.l  D2,-(A7)
08001AE6  2401      3212          move.l  D1,D2
08001AE8  4842      3213          swap    D2
08001AEA  C2C0      3214          mulu    D0,D1
08001AEC  C4C0      3215          mulu    D0,D2
08001AEE  4842      3216          swap    D2
08001AF0  4242      3217          clr.w   D2
08001AF2  D282      3218          add.l   D2,D1
08001AF4  241F      3219          move.l  (A7)+,D2
08001AF6  4E75      3220          rts
                    3221   domul_4:
08001AF8  48E7 3000 3222          movem.l D2/D3,-(A7)
08001AFC  2401      3223          move.l  D1,D2
08001AFE  2601      3224          move.l  D1,D3
08001B00  C2C0      3225          mulu    D0,D1
08001B02  4842      3226          swap    D2
08001B04  C4C0      3227          mulu    D0,D2
08001B06  4840      3228          swap    D0
08001B08  C6C0      3229          mulu    D0,D3
08001B0A  D483      3230          add.l   D3,D2
08001B0C  4842      3231          swap    D2
08001B0E  4242      3232          clr.w   D2
08001B10  D282      3233          add.l   D2,D1
08001B12  4CDF 000C 3234          movem.l (A7)+,D2/D3
08001B16  4E75      3235          rts
                    3236   _strlen:
08001B18  206F 0004 3237          move.l    (4,A7),A0
08001B1C  2248      3238          move.l    A0,A1
                    3239   strlen_1:
08001B1E  4A19      3240          tst.b     (A1)+
08001B20  66FC      3241          bne       strlen_1
08001B22  2009      3242          move.l    A1,D0
08001B24  9088      3243          sub.l     A0,D0
08001B26  5380      3244          subq.l    #1,D0
08001B28  4E75      3245          rts
                    3246   _toupper:
08001B2A  4E56 0000 3247          link      A6,#0
08001B2E  48E7 2000 3248          movem.l   D2,-(A7)
08001B32  242E 0008 3249          move.l    8(A6),D2
08001B36  0C82 0000 3250          cmp.l     #97,D2
08001B3A  0061      
08001B3C  6D0E      3251          blt.s     toupper_1
08001B3E  0C82 0000 3252          cmp.l     #122,D2
08001B42  007A      
08001B44  6E06      3253          bgt.s     toupper_1
08001B46  C4BC 0000 3254          and.l     #95,D2
08001B4A  005F      
                    3255   toupper_1:
08001B4C  2002      3256          move.l    D2,D0
08001B4E  4CDF 0004 3257          movem.l   (A7)+,D2
08001B52  4E5E      3258          unlk      A6
08001B54  4E75      3259          rts
                    3260   _strcpy:
08001B56  206F 0004 3261          move.l    (4,A7),A0
08001B5A  226F 0008 3262          move.l    (8,A7),A1
08001B5E  2008      3263          move.l    A0,D0
                    3264   strcpy_1:
08001B60  10D9      3265          move.b    (A1)+,(A0)+
08001B62  66FC      3266          bne       strcpy_1
08001B64  4E75      3267          rts
                    3268          section   const
08001B66            3269                   align
                    3270   
                    3271   
                    3272   @lab5_1:
08001B66  0D0A 2043 3273          dc.b      13,10,32,67,104,97,110,103,105,110,103,32,115
08001B6A  6861 6E67 
08001B6E  696E 6720 
08001B72  73        
08001B73  6C61 7665 3274          dc.b      108,97,118,101,32,97,110,100,32,114,101,115
08001B77  2061 6E64 
08001B7B  2072 6573 
08001B7F  7461 7274 3275          dc.b      116,97,114,116,32,37,120,0
08001B83  2025 7800 
                    3276   @lab5_2:
08001B88  0D0A 2048 3277          dc.b      13,10,32,72,73,84,32,69,68,71,69,32,67,65,83
08001B8C  4954 2045 
08001B90  4447 4520 
08001B94  4341 53   
08001B97  4520 2578 3278          dc.b      69,32,37,120,32,37,120,37,120,0
08001B9B  2025 7825 
08001B9F  7800      
                    3279   @lab5_3:
08001BA2  0D0A 2057 3280          dc.b      13,10,32,87,114,105,116,101,32,97,100,100,114
08001BA6  7269 7465 
08001BAA  2061 6464 
08001BAE  72        
08001BAF  6573 7320 3281          dc.b      101,115,115,32,98,111,117,110,100,97,114,121
08001BB3  626F 756E 
08001BB7  6461 7279 
08001BBB  2C20 7265 3282          dc.b      44,32,114,101,115,116,97,114,116,105,110,103
08001BBF  7374 6172 
08001BC3  7469 6E67 
08001BC7  2077 6974 3283          dc.b      32,119,105,116,104,111,117,116,32,99,104,97
08001BCB  686F 7574 
08001BCF  2063 6861 
08001BD3  6E67 696E 3284          dc.b      110,103,105,110,103,32,115,108,97,118,101,0
08001BD7  6720 736C 
08001BDB  6176 6500 
                    3285   @lab5_4:
08001BE0  0D0A 2D2D 3286          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
08001BE4  2D2D 2D2D 
08001BE8  2D2D 2D2D 
08001BEC  2D2D 2D   
08001BEF  2D00      3287          dc.b      45,0
                    3288   @lab5_5:
08001BF2  0D0A 6675 3289          dc.b      13,10,102,117,108,108,97,100,100,114,58,32,37
08001BF6  6C6C 6164 
08001BFA  6472 3A20 
08001BFE  25        
08001BFF  7800      3290          dc.b      120,0
                    3291   @lab5_6:
08001C02  0D0A 6461 3292          dc.b      13,10,100,97,116,97,58,32,37,120,0
08001C06  7461 3A20 
08001C0A  2578 00   
                    3293   @lab5_7:
08001C0E  0D0A 5772 3294          dc.b      13,10,87,114,105,116,105,110,103,58,32,37,50
08001C12  6974 696E 
08001C16  673A 2025 
08001C1A  32        
08001C1B  7820 00   3295          dc.b      120,32,0
                    3296   @lab5_8:
08001C1E  2532 7820 3297          dc.b      37,50,120,32,0
08001C22  00        
                    3298   @lab5_9:
08001C24  0D0A 5365 3299          dc.b      13,10,83,101,108,101,99,116,32,98,97,110,107
08001C28  6C65 6374 
08001C2C  2062 616E 
08001C30  6B        
08001C31  3A0D 0A30 3300          dc.b      58,13,10,48,32,45,32,66,97,110,107,32,48,13
08001C35  202D 2042 
08001C39  616E 6B20 
08001C3D  300D      
08001C3F  0A31 202D 3301          dc.b      10,49,32,45,32,66,97,110,107,32,49,0
08001C43  2042 616E 
08001C47  6B20 3100 
                    3302   @lab5_10:
08001C4C  0D0A 496E 3303          dc.b      13,10,73,110,118,97,108,105,100,32,115,101,108
08001C50  7661 6C69 
08001C54  6420 7365 
08001C58  6C        
08001C59  6563 7469 3304          dc.b      101,99,116,105,111,110,46,0
08001C5D  6F6E 2E00 
                    3305   @lab5_11:
08001C62  0D0A 456E 3306          dc.b      13,10,69,110,116,101,114,32,109,101,109,32,97
08001C66  7465 7220 
08001C6A  6D65 6D20 
08001C6E  61        
08001C6F  6464 7265 3307          dc.b      100,100,114,101,115,115,32,104,105,58,0
08001C73  7373 2068 
08001C77  693A 00   
                    3308   @lab5_12:
08001C7A  0D0A 456E 3309          dc.b      13,10,69,110,116,101,114,32,109,101,109,32,97
08001C7E  7465 7220 
08001C82  6D65 6D20 
08001C86  61        
08001C87  6464 7265 3310          dc.b      100,100,114,101,115,115,32,108,111,58,0
08001C8B  7373 206C 
08001C8F  6F3A 00   
                    3311   @lab5_13:
08001C92  0D0A 5468 3312          dc.b      13,10,84,104,101,114,109,105,115,116,111,114
08001C96  6572 6D69 
08001C9A  7374 6F72 
08001C9E  3A20 2564 3313          dc.b      58,32,37,100,0
08001CA2  00        
                    3314   @lab5_14:
08001CA4  0D0A 506F 3315          dc.b      13,10,80,111,116,101,110,116,105,111,109,101
08001CA8  7465 6E74 
08001CAC  696F 6D65 
08001CB0  7465 723A 3316          dc.b      116,101,114,58,32,37,100,0
08001CB4  2025 6400 
                    3317   @lab5_15:
08001CB8  0D0A 5068 3318          dc.b      13,10,80,104,111,116,111,114,101,115,105,115
08001CBC  6F74 6F72 
08001CC0  6573 6973 
08001CC4  746F 723A 3319          dc.b      116,111,114,58,32,37,100,0
08001CC8  2025 6400 
                    3320   @lab5_16:
08001CCC  0D0A 4C61 3321          dc.b      13,10,76,97,98,32,53,58,32,73,50,67,0
08001CD0  6220 353A 
08001CD4  2049 3243 
08001CD8  00        
                    3322   @lab5_17:
08001CDA  0D0A 4368 3323          dc.b      13,10,67,104,111,111,115,101,32,116,104,101
08001CDE  6F6F 7365 
08001CE2  2074 6865 
08001CE6  2066 6F6C 3324          dc.b      32,102,111,108,108,111,119,105,110,103,58,13
08001CEA  6C6F 7769 
08001CEE  6E67 3A0D 
08001CF2  0A30 202D 3325          dc.b      10,48,32,45,32,87,114,105,116,101,32,66,121
08001CF6  2057 7269 
08001CFA  7465 2042 
08001CFE  79        
08001CFF  7465 0D0A 3326          dc.b      116,101,13,10,49,32,45,32,82,101,97,100,32,66
08001D03  3120 2D20 
08001D07  5265 6164 
08001D0B  2042      
08001D0D  7974 650D 3327          dc.b      121,116,101,13,10,50,32,45,32,80,97,103,101
08001D11  0A32 202D 
08001D15  2050 6167 
08001D19  65        
08001D1A  2057 7269 3328          dc.b      32,87,114,105,116,101,13,10,51,32,45,32,80,97
08001D1E  7465 0D0A 
08001D22  3320 2D20 
08001D26  5061      
08001D28  6765 2052 3329          dc.b      103,101,32,82,101,97,100,13,10,52,32,45,32,68
08001D2C  6561 640D 
08001D30  0A34 202D 
08001D34  2044      
08001D36  4143 2042 3330          dc.b      65,67,32,66,108,105,110,107,121,32,76,69,68
08001D3A  6C69 6E6B 
08001D3E  7920 4C45 
08001D42  44        
08001D43  0D0A 3520 3331          dc.b      13,10,53,32,45,32,65,68,67,32,82,101,97,100
08001D47  2D20 4144 
08001D4B  4320 5265 
08001D4F  6164      
08001D51  00        3332          dc.b      0
                    3333   @lab5_18:
08001D52  0D0A 456E 3334          dc.b      13,10,69,110,116,101,114,32,98,121,116,101,32
08001D56  7465 7220 
08001D5A  6279 7465 
08001D5E  20        
08001D5F  746F 2077 3335          dc.b      116,111,32,119,114,105,116,101,58,32,0
08001D63  7269 7465 
08001D67  3A20 00   
                    3336   @lab5_19:
08001D6A  0D0A 5772 3337          dc.b      13,10,87,114,105,116,116,101,110,32,37,120,32
08001D6E  6974 7465 
08001D72  6E20 2578 
08001D76  20        
08001D77  746F 2062 3338          dc.b      116,111,32,98,97,110,107,32,37,100,32,97,116
08001D7B  616E 6B20 
08001D7F  2564 2061 
08001D83  74        
08001D84  206D 656D 3339          dc.b      32,109,101,109,97,100,100,114,32,104,105,58
08001D88  6164 6472 
08001D8C  2068 693A 
08001D90  2025 7820 3340          dc.b      32,37,120,32,109,101,109,32,97,100,100,114,32
08001D94  6D65 6D20 
08001D98  6164 6472 
08001D9C  20        
08001D9D  6C6F 3A20 3341          dc.b      108,111,58,32,37,120,0
08001DA1  2578 00   
                    3342   @lab5_20:
08001DA4  0D0A 5265 3343          dc.b      13,10,82,101,97,100,32,37,120,32,102,114,111
08001DA8  6164 2025 
08001DAC  7820 6672 
08001DB0  6F        
08001DB1  6D20 6261 3344          dc.b      109,32,98,97,110,107,32,37,100,32,97,116,32
08001DB5  6E6B 2025 
08001DB9  6420 6174 
08001DBD  20        
08001DBE  6D65 6D61 3345          dc.b      109,101,109,97,100,100,114,32,104,105,58,32
08001DC2  6464 7220 
08001DC6  6869 3A20 
08001DCA  2578 206D 3346          dc.b      37,120,32,109,101,109,32,97,100,100,114,32,108
08001DCE  656D 2061 
08001DD2  6464 7220 
08001DD6  6C        
08001DD7  6F3A 2025 3347          dc.b      111,58,32,37,120,0
08001DDB  7800      
                    3348   @lab5_21:
08001DDE  0D0A 456E 3349          dc.b      13,10,69,110,116,101,114,32,115,105,122,101
08001DE2  7465 7220 
08001DE6  7369 7A65 
08001DEA  206F 6620 3350          dc.b      32,111,102,32,112,97,103,101,32,116,111,32,119
08001DEE  7061 6765 
08001DF2  2074 6F20 
08001DF6  77        
08001DF7  7269 7465 3351          dc.b      114,105,116,101,32,40,54,32,100,105,103,105
08001DFB  2028 3620 
08001DFF  6469 6769 
08001E03  7473 2C20 3352          dc.b      116,115,44,32,102,114,111,109,32,48,120,48,48
08001E07  6672 6F6D 
08001E0B  2030 7830 
08001E0F  30        
08001E10  3030 3030 3353          dc.b      48,48,48,48,32,40,49,41,32,116,111,32,48,120
08001E14  2028 3129 
08001E18  2074 6F20 
08001E1C  3078      
08001E1E  3031 4633 3354          dc.b      48,49,70,51,70,70,32,40,49,50,56,44,48,48,48
08001E22  4646 2028 
08001E26  3132 382C 
08001E2A  3030 30   
08001E2D  2929 3A20 3355          dc.b      41,41,58,32,0
08001E31  00        
                    3356   @lab5_22:
08001E32  0D0A 496E 3357          dc.b      13,10,73,110,112,117,116,32,83,105,122,101,58
08001E36  7075 7420 
08001E3A  5369 7A65 
08001E3E  3A        
08001E3F  2025 7800 3358          dc.b      32,37,120,0
                    3359   @lab5_23:
08001E44  0D0A 5772 3360          dc.b      13,10,87,114,111,116,101,32,118,97,108,117,101
08001E48  6F74 6520 
08001E4C  7661 6C75 
08001E50  65        
08001E51  7320 7374 3361          dc.b      115,32,115,116,97,114,116,105,110,103,32,97
08001E55  6172 7469 
08001E59  6E67 2061 
08001E5D  7420 6D65 3362          dc.b      116,32,109,101,109,97,100,100,114,32,48,120
08001E61  6D61 6464 
08001E65  7220 3078 
08001E69  2578 2578 3363          dc.b      37,120,37,120,32,97,110,100,32,98,97,110,107
08001E6D  2061 6E64 
08001E71  2062 616E 
08001E75  6B        
08001E76  2025 642C 3364          dc.b      32,37,100,44,32,116,111,116,97,108,32,115,105
08001E7A  2074 6F74 
08001E7E  616C 2073 
08001E82  69        
08001E83  7A65 3A20 3365          dc.b      122,101,58,32,37,120,13,10,68,97,116,97,58,32
08001E87  2578 0D0A 
08001E8B  4461 7461 
08001E8F  3A20      
08001E91  00        3366          dc.b      0
                    3367   @lab5_24:
08001E92  0D0A 456E 3368          dc.b      13,10,69,110,116,101,114,32,115,105,122,101
08001E96  7465 7220 
08001E9A  7369 7A65 
08001E9E  206F 6620 3369          dc.b      32,111,102,32,112,97,103,101,32,116,111,32,114
08001EA2  7061 6765 
08001EA6  2074 6F20 
08001EAA  72        
08001EAB  6561 6420 3370          dc.b      101,97,100,32,40,54,32,100,105,103,105,116,115
08001EAF  2836 2064 
08001EB3  6967 6974 
08001EB7  73        
08001EB8  2C20 6672 3371          dc.b      44,32,102,114,111,109,32,48,120,48,48,48,48
08001EBC  6F6D 2030 
08001EC0  7830 3030 
08001EC4  30        
08001EC5  3030 2028 3372          dc.b      48,48,32,40,49,41,32,116,111,32,48,120,48,49
08001EC9  3129 2074 
08001ECD  6F20 3078 
08001ED1  3031      
08001ED3  4633 4646 3373          dc.b      70,51,70,70,32,40,49,50,56,44,48,48,48,41,41
08001ED7  2028 3132 
08001EDB  382C 3030 
08001EDF  3029 29   
08001EE2  3A20 00   3374          dc.b      58,32,0
                    3375   @lab5_25:
08001EE6  0D0A 5265 3376          dc.b      13,10,82,101,97,100,32,118,97,108,117,101,115
08001EEA  6164 2076 
08001EEE  616C 7565 
08001EF2  73        
08001EF3  2073 7461 3377          dc.b      32,115,116,97,114,116,105,110,103,32,97,116
08001EF7  7274 696E 
08001EFB  6720 6174 
08001EFF  206D 656D 3378          dc.b      32,109,101,109,97,100,100,114,32,48,120,37,120
08001F03  6164 6472 
08001F07  2030 7825 
08001F0B  78        
08001F0C  2578 2061 3379          dc.b      37,120,32,97,110,100,32,98,97,110,107,32,37
08001F10  6E64 2062 
08001F14  616E 6B20 
08001F18  25        
08001F19  642C 2074 3380          dc.b      100,44,32,116,111,116,97,108,32,115,105,122
08001F1D  6F74 616C 
08001F21  2073 697A 
08001F25  653A 2025 3381          dc.b      101,58,32,37,120,13,10,68,97,116,97,58,32,0
08001F29  780D 0A44 
08001F2D  6174 613A 
08001F31  2000      
                    3382   @lab5_26:
08001F34  0D0A 4441 3383          dc.b      13,10,68,65,67,32,66,108,105,110,107,121,46
08001F38  4320 426C 
08001F3C  696E 6B79 
08001F40  2E        
08001F41  2E2E 2066 3384          dc.b      46,46,32,102,114,101,113,117,101,110,99,121
08001F45  7265 7175 
08001F49  656E 6379 
08001F4D  206F 6620 3385          dc.b      32,111,102,32,98,108,105,110,107,121,32,105
08001F51  626C 696E 
08001F55  6B79 2069 
08001F59  733A 200D 3386          dc.b      115,58,32,13,10,79,78,32,45,32,50,53,48,109
08001F5D  0A4F 4E20 
08001F61  2D20 3235 
08001F65  306D      
08001F67  7320 2D20 3387          dc.b      115,32,45,32,79,70,70,32,45,32,50,53,48,109
08001F6B  4F46 4620 
08001F6F  2D20 3235 
08001F73  306D      
08001F75  730D 0A30 3388          dc.b      115,13,10,48,78,32,45,32,50,53,48,109,115,32
08001F79  4E20 2D20 
08001F7D  3235 306D 
08001F81  7320      
08001F83  2D20 4F46 3389          dc.b      45,32,79,70,70,32,45,32,50,53,48,109,115,13
08001F87  4620 2D20 
08001F8B  3235 306D 
08001F8F  730D      
08001F91  0A4F 4E20 3390          dc.b      10,79,78,32,45,32,55,53,48,109,115,32,45,32
08001F95  2D20 3735 
08001F99  306D 7320 
08001F9D  2D20      
08001F9F  4F46 4620 3391          dc.b      79,70,70,32,45,32,55,53,48,109,115,13,10,82
08001FA3  2D20 3735 
08001FA7  306D 730D 
08001FAB  0A52      
08001FAD  6570 6561 3392          dc.b      101,112,101,97,116,32,102,111,114,101,118,101
08001FB1  7420 666F 
08001FB5  7265 7665 
08001FB9  720D 0A00 3393          dc.b      114,13,10,0
                    3394   @lab5_27:
08001FBE  0D0A 4144 3395          dc.b      13,10,65,68,67,32,67,104,97,110,110,101,108
08001FC2  4320 4368 
08001FC6  616E 6E65 
08001FCA  6C        
08001FCB  204F 7574 3396          dc.b      32,79,117,116,112,117,116,58,0
08001FCF  7075 743A 
08001FD3  00        
                    3397   @lab5_28:
08001FD4  0D0A 6765 3398          dc.b      13,10,103,101,116,32,54,32,104,101,120,32,100
08001FD8  7420 3620 
08001FDC  6865 7820 
08001FE0  64        
08001FE1  6967 6974 3399          dc.b      105,103,105,116,115,58,32,0
08001FE5  733A 2000 
                    3400   @lab5_29:
08001FEA  0D0A 496E 3401          dc.b      13,10,73,110,112,117,116,58,37,120,0
08001FEE  7075 743A 
08001FF2  2578 00   
                    3402   @lab5_30:
08001FF6  0D0A 496E 3403          dc.b      13,10,73,110,118,97,108,105,100,32,83,101,108
08001FFA  7661 6C69 
08001FFE  6420 5365 
08002002  6C        
08002003  6563 7469 3404          dc.b      101,99,116,105,111,110,46,13,10,0
08002007  6F6E 2E0D 
0800200B  0A00      
                    3405          section   data
0800200E            3406                   align
                    3407   
                    3408   *********************************************************************************************************************************************************
                    3409   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    3410   ********************************************************************************************************************************************************
                    3411   
          0800 200E 3412   DataStart       equ       *
0800200E            3413   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
08002012            3414   __allocp:       ds.l      1                    start of free memory block list
08002016            3415   __heap:         ds.l      1                    begin of free memory
                    3416   
                    3417   
                    3418   @itoa_1:
0800201A  2D32 3134 3419          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0800201E  3734 3833 
08002022  3634 3800 
                    3420          section   bss
08002026            3421                   align
                    3422   
          0800 2026 3423   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 0018 3424   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    3425   
                    3426   *********************************************************************************************************
                    3427   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    3428   *********************************************************************************************************
          0800 2026 3429   BssStart       equ       *
                    3430   
                    3431   _i:
08002026            3432          ds.b      4
                    3433   _x:
0800202A            3434          ds.b      4
                    3435   _y:
0800202E            3436          ds.b      4
                    3437   _z:
08002032            3438          ds.b      4
                    3439   _PortA_Count:
08002036            3440          ds.b      4
                    3441   _Timer1Count:
0800203A            3442          ds.b      1
                    3443   _Timer2Count:
0800203C            3444          ds.b      1
                    3445   _Timer3Count:
0800203E            3446          ds.b      1
                    3447   _Timer4Count:
08002040            3448          ds.b      1
                    3449          section   heap
08002042            3450                  align
                    3451   
          0800 2042 3452   BssEnd         equ       *
          0000 001C 3453   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    3454   
                    3455   *********************************************************************************************************
                    3456   * Section for Heap
                    3457   *********************************************************************************************************
                    3458   
          0800 2042 3459   heap           equ       *
08002042            3460                  align
          0800 0000

Assembly errors: 0
