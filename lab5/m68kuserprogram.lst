680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 28 Mar 2022      Time: 16:10:46          Source: C:\USERS\MARTINCHUA\DESKTOP\CPEN412\CPEN412\LAB5\M68KUSERPROGRAM.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  1F86      
0800000A  203C 0000   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  001C      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  1F6E      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  1F72      
0800002C  23FC 0800   40                   move.l    #heap,__heap           pointer to free memory
08000030  1FA2 0800 
08000034  1F76      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  0BEA      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; C:\USERS\MARTINCHUA\DESKTOP\CPEN412\CPEN412\LAB5\SUBMISSION\LAB5.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdio.h>
                      46   ; #include <string.h>
                      47   ; #include <ctype.h>
                      48   ; //IMPORTANT
                      49   ; //
                      50   ; // Uncomment one of the two #defines below
                      51   ; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
                      52   ; // 0B000000 for running programs from dram
                      53   ; //
                      54   ; // In your labs, you will initially start by designing a system with SRam and later move to
                      55   ; // Dram, so these constants will need to be changed based on the version of the system you have
                      56   ; // building
                      57   ; //
                      58   ; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
                      59   ; // is based around Dram so #define accordingly before building
                      60   ; // #define StartOfExceptionVectorTable 0x08030000
                      61   ; #define StartOfExceptionVectorTable 0x0B000000
                      62   ; /**********************************************************************************************
                      63   ; **	Parallel port addresses
                      64   ; **********************************************************************************************/
                      65   ; #define PortA   *(volatile unsigned char *)(0x00400000)
                      66   ; #define PortB   *(volatile unsigned char *)(0x00400002)
                      67   ; #define PortC   *(volatile unsigned char *)(0x00400004)
                      68   ; #define PortD   *(volatile unsigned char *)(0x00400006)
                      69   ; #define PortE   *(volatile unsigned char *)(0x00400008)
                      70   ; /*********************************************************************************************
                      71   ; **	Hex 7 seg displays port addresses
                      72   ; *********************************************************************************************/
                      73   ; #define HEX_A        *(volatile unsigned char *)(0x00400010)
                      74   ; #define HEX_B        *(volatile unsigned char *)(0x00400012)
                      75   ; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
                      76   ; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
                      77   ; /**********************************************************************************************
                      78   ; **	LCD display port addresses
                      79   ; **********************************************************************************************/
                      80   ; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
                      81   ; #define LCDdata      *(volatile unsigned char *)(0x00400022)
                      82   ; /********************************************************************************************
                      83   ; **	Timer Port addresses
                      84   ; *********************************************************************************************/
                      85   ; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
                      86   ; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
                      87   ; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
                      88   ; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
                      89   ; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
                      90   ; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
                      91   ; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
                      92   ; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
                      93   ; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
                      94   ; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
                      95   ; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
                      96   ; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
                      97   ; /*********************************************************************************************
                      98   ; **	RS232 port addresses
                      99   ; *********************************************************************************************/
                     100   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                     101   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                     102   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                     103   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                     104   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                     105   ; /*********************************************************************************************
                     106   ; **	PIA 1 and 2 port addresses
                     107   ; *********************************************************************************************/
                     108   ; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
                     109   ; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
                     110   ; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
                     111   ; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
                     112   ; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
                     113   ; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
                     114   ; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
                     115   ; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
                     116   ; /*************************************************************
                     117   ; ** I2C Controller registers
                     118   ; **************************************************************/
                     119   ; // I2C Registers
                     120   ; #define I2C_PRERLO     (*(volatile unsigned char *)(0x00408000))
                     121   ; #define I2C_PRERHI     (*(volatile unsigned char *)(0x00408002))
                     122   ; #define I2C_CTR        (*(volatile unsigned char *)(0x00408004))
                     123   ; #define I2C_TXR        (*(volatile unsigned char *)(0x00408006))
                     124   ; #define I2C_RXR        (*(volatile unsigned char *)(0x00408006))
                     125   ; #define I2C_CR         (*(volatile unsigned char *)(0x00408008))
                     126   ; #define I2C_SR         (*(volatile unsigned char *)(0x00408008))
                     127   ; // STA bit == cmd[7], W bit == cmd[4], IACK bit == cmd[0] -> 8'b1001_0001
                     128   ; #define WSTART 0x91
                     129   ; // STO bit == cmd[6], W bit == cmd[4] -> 8'b0101_0000
                     130   ; #define WSTOP 0x50
                     131   ; // W bit = cmd[4] -> 8'b0001_0000
                     132   ; #define WRITE 0x10
                     133   ; // R bit == cmd[5], NACK bit == cmd[3], IACK bit == cmd[0] -> 8'b0010_1001
                     134   ; #define READNACK 0x29
                     135   ; // R bit == cmd[5], NACK bit == cmd[3], IACK bit == cmd[0] -> 8'b0010_0001
                     136   ; #define READACK 0x21
                     137   ; #define EEPROM_SLAVE_BANK0 0xA0
                     138   ; #define EEPROM_SLAVE_BANK1 0xA8
                     139   ; #define ADCDAC_SLAVE 0x90
                     140   ; // 8'b01xx_0xxx
                     141   ; #define DAC_OUT_ON 0x40
                     142   ; // 8'b00xx_0xxx
                     143   ; #define DAC_OUT_OFF 0x00
                     144   ; // 8'b0000_0101
                     145   ; #define ADC_AUTO_INCREMENT_A1 0x05
                     146   ; #define ADC_AUTO_INCREMENT_A0 0x04
                     147   ; /*********************************************************************************************************************************
                     148   ; (( DO NOT initialise global variables here, do it main even if you want 0
                     149   ; (( it's a limitation of the compiler
                     150   ; (( YOU HAVE BEEN WARNED
                     151   ; *********************************************************************************************************************************/
                     152   ; unsigned int i, x, y, z, PortA_Count;
                     153   ; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count ;
                     154   ; /*******************************************************************************************
                     155   ; ** Function Prototypes
                     156   ; *******************************************************************************************/
                     157   ; void Wait1ms(void);
                     158   ; void Wait3ms(void);
                     159   ; void Wait250ms(void);
                     160   ; void Wait750ms(void);
                     161   ; void Wait1s(void);
                     162   ; void Init_LCD(void) ;
                     163   ; void LCDOutchar(int c);
                     164   ; void LCDOutMess(char *theMessage);
                     165   ; void LCDClearln(void);
                     166   ; void LCDline1Message(char *theMessage);
                     167   ; void LCDline2Message(char *theMessage);
                     168   ; int sprintf(char *out, const char *format, ...) ;
                     169   ; // I2C
                     170   ; void I2C_Init(void);
                     171   ; void I2C_Start(void);
                     172   ; void I2C_Stop(void);
                     173   ; void WaitForTIPFlagReset(void);
                     174   ; void WaitForRxACK(void);
                     175   ; void WriteI2CChar(char data, char slave_addr, char memaddr_hi, char memaddr_lo);
                     176   ; void ReadI2CChar(char *data, char slave_addr, char memaddr_hi, char memaddr_lo);
                     177   ; void WriteI2CPage(char slave_addr, char memaddr_hi, char memaddr_lo, char size);
                     178   ; void ReadI2CPage(char *data, char slave_addr, char memaddr_hi, char memaddr_lo, char size);
                     179   ; void GetMemAddr(char *hi, char *lo);
                     180   ; void GetBank(char *bank);
                     181   ; void Wait(void);
                     182   ; void readADC(void);
                     183   ; /*****************************************************************************************
                     184   ; **	Interrupt service routine for Timers
                     185   ; **
                     186   ; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
                     187   ; **  out which timer is producing the interrupt
                     188   ; **
                     189   ; *****************************************************************************************/
                     190   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     191   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     192   ; char xtod(int c)
                     193   ; {
                     194   _xtod:
0800003E  4E56 0000  195          link      A6,#0
08000042  2F02       196          move.l    D2,-(A7)
08000044  242E 0008  197          move.l    8(A6),D2
                     198   ; if ((char)(c) <= (char)('9'))
08000048  0C02 0039  199          cmp.b     #57,D2
0800004C  6E08       200          bgt.s     xtod_1
                     201   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
0800004E  1002       202          move.b    D2,D0
08000050  0400 0030  203          sub.b     #48,D0
08000054  6014       204          bra.s     xtod_3
                     205   xtod_1:
                     206   ; else if((char)(c) > (char)('F'))    // assume lower case
08000056  0C02 0046  207          cmp.b     #70,D2
0800005A  6F08       208          ble.s     xtod_4
                     209   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
0800005C  1002       210          move.b    D2,D0
0800005E  0400 0057  211          sub.b     #87,D0
08000062  6006       212          bra.s     xtod_3
                     213   xtod_4:
                     214   ; else
                     215   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
08000064  1002       216          move.b    D2,D0
08000066  0400 0037  217          sub.b     #55,D0
                     218   xtod_3:
0800006A  241F       219          move.l    (A7)+,D2
0800006C  4E5E       220          unlk      A6
0800006E  4E75       221          rts
                     222   ; }
                     223   ; int Get2HexDigits(char *CheckSumPtr)
                     224   ; {
                     225   _Get2HexDigits:
08000070  4E56 0000  226          link      A6,#0
08000074  2F02       227          move.l    D2,-(A7)
                     228   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
08000076  2F00       229          move.l    D0,-(A7)
08000078  4EB9 0800  230          jsr       __getch
0800007C  02C8      
0800007E  2200       231          move.l    D0,D1
08000080  201F       232          move.l    (A7)+,D0
08000082  2F01       233          move.l    D1,-(A7)
08000084  4EB9 0800  234          jsr       _xtod
08000088  003E      
0800008A  584F       235          addq.w    #4,A7
0800008C  C0BC 0000  236          and.l     #255,D0
08000090  00FF      
08000092  E980       237          asl.l     #4,D0
08000094  2F00       238          move.l    D0,-(A7)
08000096  2F01       239          move.l    D1,-(A7)
08000098  4EB9 0800  240          jsr       __getch
0800009C  02C8      
0800009E  221F       241          move.l    (A7)+,D1
080000A0  2F00       242          move.l    D0,-(A7)
080000A2  4EB9 0800  243          jsr       _xtod
080000A6  003E      
080000A8  584F       244          addq.w    #4,A7
080000AA  2200       245          move.l    D0,D1
080000AC  201F       246          move.l    (A7)+,D0
080000AE  C2BC 0000  247          and.l     #255,D1
080000B2  00FF      
080000B4  8081       248          or.l      D1,D0
080000B6  2400       249          move.l    D0,D2
                     250   ; if(CheckSumPtr)
080000B8  4AAE 0008  251          tst.l     8(A6)
080000BC  6706       252          beq.s     Get2HexDigits_1
                     253   ; *CheckSumPtr += i ;
080000BE  206E 0008  254          move.l    8(A6),A0
080000C2  D510       255          add.b     D2,(A0)
                     256   Get2HexDigits_1:
                     257   ; return i ;
080000C4  2002       258          move.l    D2,D0
080000C6  241F       259          move.l    (A7)+,D2
080000C8  4E5E       260          unlk      A6
080000CA  4E75       261          rts
                     262   ; }
                     263   ; int Get4HexDigits(char *CheckSumPtr)
                     264   ; {
                     265   _Get4HexDigits:
080000CC  4E56 0000  266          link      A6,#0
                     267   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000D0  2F2E 0008  268          move.l    8(A6),-(A7)
080000D4  4EB9 0800  269          jsr       _Get2HexDigits
080000D8  0070      
080000DA  584F       270          addq.w    #4,A7
080000DC  E180       271          asl.l     #8,D0
080000DE  2F00       272          move.l    D0,-(A7)
080000E0  2F2E 0008  273          move.l    8(A6),-(A7)
080000E4  4EB9 0800  274          jsr       _Get2HexDigits
080000E8  0070      
080000EA  584F       275          addq.w    #4,A7
080000EC  2200       276          move.l    D0,D1
080000EE  201F       277          move.l    (A7)+,D0
080000F0  8081       278          or.l      D1,D0
080000F2  4E5E       279          unlk      A6
080000F4  4E75       280          rts
                     281   ; }
                     282   ; int Get6HexDigits(char *CheckSumPtr)
                     283   ; {
                     284   _Get6HexDigits:
080000F6  4E56 0000  285          link      A6,#0
                     286   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000FA  2F2E 0008  287          move.l    8(A6),-(A7)
080000FE  4EB9 0800  288          jsr       _Get4HexDigits
08000102  00CC      
08000104  584F       289          addq.w    #4,A7
08000106  E180       290          asl.l     #8,D0
08000108  2F00       291          move.l    D0,-(A7)
0800010A  2F2E 0008  292          move.l    8(A6),-(A7)
0800010E  4EB9 0800  293          jsr       _Get2HexDigits
08000112  0070      
08000114  584F       294          addq.w    #4,A7
08000116  2200       295          move.l    D0,D1
08000118  201F       296          move.l    (A7)+,D0
0800011A  8081       297          or.l      D1,D0
0800011C  4E5E       298          unlk      A6
0800011E  4E75       299          rts
                     300   ; }
                     301   ; int Get8HexDigits(char *CheckSumPtr)
                     302   ; {
                     303   _Get8HexDigits:
08000120  4E56 0000  304          link      A6,#0
                     305   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
08000124  2F2E 0008  306          move.l    8(A6),-(A7)
08000128  4EB9 0800  307          jsr       _Get4HexDigits
0800012C  00CC      
0800012E  584F       308          addq.w    #4,A7
08000130  E180       309          asl.l     #8,D0
08000132  E180       310          asl.l     #8,D0
08000134  2F00       311          move.l    D0,-(A7)
08000136  2F2E 0008  312          move.l    8(A6),-(A7)
0800013A  4EB9 0800  313          jsr       _Get4HexDigits
0800013E  00CC      
08000140  584F       314          addq.w    #4,A7
08000142  2200       315          move.l    D0,D1
08000144  201F       316          move.l    (A7)+,D0
08000146  8081       317          or.l      D1,D0
08000148  4E5E       318          unlk      A6
0800014A  4E75       319          rts
                     320   ; }
                     321   ; void Timer_ISR()
                     322   ; {
                     323   _Timer_ISR:
                     324   ; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
0800014C  1039 0040  325          move.b    4194354,D0
08000150  0032      
08000152  0C00 0001  326          cmp.b     #1,D0
08000156  661A       327          bne.s     Timer_ISR_1
                     328   ; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
08000158  13FC 0003  329          move.b    #3,4194354
0800015C  0040 0032 
                     330   ; PortA = Timer1Count++ ;     // increment an LED count on PortA with each tick of Timer 1
08000160  1039 0800  331          move.b    _Timer1Count.L,D0
08000164  1F9A      
08000166  5239 0800  332          addq.b    #1,_Timer1Count.L
0800016A  1F9A      
0800016C  13C0 0040  333          move.b    D0,4194304
08000170  0000      
                     334   Timer_ISR_1:
                     335   ; }
                     336   ; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
08000172  1039 0040  337          move.b    4194358,D0
08000176  0036      
08000178  0C00 0001  338          cmp.b     #1,D0
0800017C  661A       339          bne.s     Timer_ISR_3
                     340   ; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0800017E  13FC 0003  341          move.b    #3,4194358
08000182  0040 0036 
                     342   ; PortC = Timer2Count++ ;     // increment an LED count on PortC with each tick of Timer 2
08000186  1039 0800  343          move.b    _Timer2Count.L,D0
0800018A  1F9C      
0800018C  5239 0800  344          addq.b    #1,_Timer2Count.L
08000190  1F9C      
08000192  13C0 0040  345          move.b    D0,4194308
08000196  0004      
                     346   Timer_ISR_3:
                     347   ; }
                     348   ; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
08000198  1039 0040  349          move.b    4194362,D0
0800019C  003A      
0800019E  0C00 0001  350          cmp.b     #1,D0
080001A2  661A       351          bne.s     Timer_ISR_5
                     352   ; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080001A4  13FC 0003  353          move.b    #3,4194362
080001A8  0040 003A 
                     354   ; HEX_A = Timer3Count++ ;     // increment a HEX count on Port HEX_A with each tick of Timer 3
080001AC  1039 0800  355          move.b    _Timer3Count.L,D0
080001B0  1F9E      
080001B2  5239 0800  356          addq.b    #1,_Timer3Count.L
080001B6  1F9E      
080001B8  13C0 0040  357          move.b    D0,4194320
080001BC  0010      
                     358   Timer_ISR_5:
                     359   ; }
                     360   ; if(Timer4Status == 1) {         // Did Timer 4 produce the Interrupt?
080001BE  1039 0040  361          move.b    4194366,D0
080001C2  003E      
080001C4  0C00 0001  362          cmp.b     #1,D0
080001C8  661A       363          bne.s     Timer_ISR_7
                     364   ; Timer4Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080001CA  13FC 0003  365          move.b    #3,4194366
080001CE  0040 003E 
                     366   ; HEX_B = Timer4Count++ ;     // increment a HEX count on HEX_B with each tick of Timer 4
080001D2  1039 0800  367          move.b    _Timer4Count.L,D0
080001D6  1FA0      
080001D8  5239 0800  368          addq.b    #1,_Timer4Count.L
080001DC  1FA0      
080001DE  13C0 0040  369          move.b    D0,4194322
080001E2  0012      
                     370   Timer_ISR_7:
080001E4  4E75       371          rts
                     372   ; }
                     373   ; }
                     374   ; /*****************************************************************************************
                     375   ; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
                     376   ; **  Add your code here to poll Status register and clear interrupt
                     377   ; *****************************************************************************************/
                     378   ; void ACIA_ISR()
                     379   ; {}
                     380   _ACIA_ISR:
080001E6  4E75       381          rts
                     382   ; /***************************************************************************************
                     383   ; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
                     384   ; **  Add your code here to poll Status register and clear interrupt
                     385   ; *****************************************************************************************/
                     386   ; void PIA_ISR()
                     387   ; {}
                     388   _PIA_ISR:
080001E8  4E75       389          rts
                     390   ; /***********************************************************************************
                     391   ; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
                     392   ; ************************************************************************************/
                     393   ; void Key2PressISR()
                     394   ; {}
                     395   _Key2PressISR:
080001EA  4E75       396          rts
                     397   ; /***********************************************************************************
                     398   ; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
                     399   ; ************************************************************************************/
                     400   ; void Key1PressISR()
                     401   ; {}
                     402   _Key1PressISR:
080001EC  4E75       403          rts
                     404   ; /************************************************************************************
                     405   ; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
                     406   ; ************************************************************************************/
                     407   ; void Wait1ms(void)
                     408   ; {
                     409   _Wait1ms:
080001EE  2F02       410          move.l    D2,-(A7)
                     411   ; int  i ;
                     412   ; for(i = 0; i < 1000; i ++)
080001F0  4282       413          clr.l     D2
                     414   Wait1ms_1:
080001F2  0C82 0000  415          cmp.l     #1000,D2
080001F6  03E8      
080001F8  6C04       416          bge.s     Wait1ms_3
080001FA  5282       417          addq.l    #1,D2
080001FC  60F4       418          bra       Wait1ms_1
                     419   Wait1ms_3:
080001FE  241F       420          move.l    (A7)+,D2
08000200  4E75       421          rts
                     422   ; ;
                     423   ; }
                     424   ; /************************************************************************************
                     425   ; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
                     426   ; **************************************************************************************/
                     427   ; void Wait3ms(void)
                     428   ; {
                     429   _Wait3ms:
08000202  2F02       430          move.l    D2,-(A7)
                     431   ; int i ;
                     432   ; for(i = 0; i < 3; i++)
08000204  4282       433          clr.l     D2
                     434   Wait3ms_1:
08000206  0C82 0000  435          cmp.l     #3,D2
0800020A  0003      
0800020C  6C0A       436          bge.s     Wait3ms_3
                     437   ; Wait1ms() ;
0800020E  4EB9 0800  438          jsr       _Wait1ms
08000212  01EE      
08000214  5282       439          addq.l    #1,D2
08000216  60EE       440          bra       Wait3ms_1
                     441   Wait3ms_3:
08000218  241F       442          move.l    (A7)+,D2
0800021A  4E75       443          rts
                     444   ; }
                     445   ; void Wait250ms(void)
                     446   ; {
                     447   _Wait250ms:
0800021C  2F02       448          move.l    D2,-(A7)
                     449   ; int i ;
                     450   ; for(i = 0; i < 250; i++)
0800021E  4282       451          clr.l     D2
                     452   Wait250ms_1:
08000220  0C82 0000  453          cmp.l     #250,D2
08000224  00FA      
08000226  6C0A       454          bge.s     Wait250ms_3
                     455   ; Wait1ms() ;
08000228  4EB9 0800  456          jsr       _Wait1ms
0800022C  01EE      
0800022E  5282       457          addq.l    #1,D2
08000230  60EE       458          bra       Wait250ms_1
                     459   Wait250ms_3:
08000232  241F       460          move.l    (A7)+,D2
08000234  4E75       461          rts
                     462   ; }
                     463   ; void Wait750ms(void)
                     464   ; {
                     465   _Wait750ms:
08000236  2F02       466          move.l    D2,-(A7)
                     467   ; int i ;
                     468   ; for(i = 0; i < 750; i++)
08000238  4282       469          clr.l     D2
                     470   Wait750ms_1:
0800023A  0C82 0000  471          cmp.l     #750,D2
0800023E  02EE      
08000240  6C0A       472          bge.s     Wait750ms_3
                     473   ; Wait1ms() ;
08000242  4EB9 0800  474          jsr       _Wait1ms
08000246  01EE      
08000248  5282       475          addq.l    #1,D2
0800024A  60EE       476          bra       Wait750ms_1
                     477   Wait750ms_3:
0800024C  241F       478          move.l    (A7)+,D2
0800024E  4E75       479          rts
                     480   ; }
                     481   ; /************************************************************************************
                     482   ; **  Subroutine to give the 68000 something useless to do to waste 1s
                     483   ; **************************************************************************************/
                     484   ; void Wait1s(void){
                     485   _Wait1s:
08000250  2F02       486          move.l    D2,-(A7)
                     487   ; int i;
                     488   ; for(i = 0; i < 1000; i++)
08000252  4282       489          clr.l     D2
                     490   Wait1s_1:
08000254  0C82 0000  491          cmp.l     #1000,D2
08000258  03E8      
0800025A  6C0A       492          bge.s     Wait1s_3
                     493   ; Wait1ms();
0800025C  4EB9 0800  494          jsr       _Wait1ms
08000260  01EE      
08000262  5282       495          addq.l    #1,D2
08000264  60EE       496          bra       Wait1s_1
                     497   Wait1s_3:
08000266  241F       498          move.l    (A7)+,D2
08000268  4E75       499          rts
                     500   ; }
                     501   ; /*********************************************************************************************
                     502   ; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
                     503   ; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
                     504   ; *********************************************************************************************/
                     505   ; void Init_LCD(void)
                     506   ; {
                     507   _Init_LCD:
                     508   ; LCDcommand = 0x0c ;
0800026A  13FC 000C  509          move.b    #12,4194336
0800026E  0040 0020 
                     510   ; Wait3ms() ;
08000272  4EB9 0800  511          jsr       _Wait3ms
08000276  0202      
                     512   ; LCDcommand = 0x38 ;
08000278  13FC 0038  513          move.b    #56,4194336
0800027C  0040 0020 
                     514   ; Wait3ms() ;
08000280  4EB9 0800  515          jsr       _Wait3ms
08000284  0202      
08000286  4E75       516          rts
                     517   ; }
                     518   ; /*********************************************************************************************
                     519   ; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     520   ; *********************************************************************************************/
                     521   ; void Init_RS232(void)
                     522   ; {
                     523   _Init_RS232:
                     524   ; RS232_Control = 0x15 ; //  %00010101 set up 6850 uses divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
08000288  13FC 0015  525          move.b    #21,4194368
0800028C  0040 0040 
                     526   ; RS232_Baud = 0x1 ;      // program baud rate generator 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
08000290  13FC 0001  527          move.b    #1,4194372
08000294  0040 0044 
08000298  4E75       528          rts
                     529   ; }
                     530   ; /*********************************************************************************************************
                     531   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     532   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     533   ; **  to allow the board to communicate with HyperTerminal Program
                     534   ; **
                     535   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     536   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     537   ; **  call _putch() also
                     538   ; *********************************************************************************************************/
                     539   ; int _putch( int c)
                     540   ; {
                     541   __putch:
0800029A  4E56 0000  542          link      A6,#0
                     543   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     544   _putch_1:
0800029E  1039 0040  545          move.b    4194368,D0
080002A2  0040      
080002A4  C03C 0002  546          and.b     #2,D0
080002A8  0C00 0002  547          cmp.b     #2,D0
080002AC  6702       548          beq.s     _putch_3
080002AE  60EE       549          bra       _putch_1
                     550   _putch_3:
                     551   ; ;
                     552   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
080002B0  202E 0008  553          move.l    8(A6),D0
080002B4  C0BC 0000  554          and.l     #127,D0
080002B8  007F      
080002BA  13C0 0040  555          move.b    D0,4194370
080002BE  0042      
                     556   ; return c ;                                              // putchar() expects the character to be returned
080002C0  202E 0008  557          move.l    8(A6),D0
080002C4  4E5E       558          unlk      A6
080002C6  4E75       559          rts
                     560   ; }
                     561   ; /*********************************************************************************************************
                     562   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     563   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     564   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     565   ; **
                     566   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     567   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
                     568   ; **  call _getch() also
                     569   ; *********************************************************************************************************/
                     570   ; int _getch( void )
                     571   ; {
                     572   __getch:
080002C8  4E56 FFFC  573          link      A6,#-4
                     574   ; char c ;
                     575   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     576   _getch_1:
080002CC  1039 0040  577          move.b    4194368,D0
080002D0  0040      
080002D2  C03C 0001  578          and.b     #1,D0
080002D6  0C00 0001  579          cmp.b     #1,D0
080002DA  6702       580          beq.s     _getch_3
080002DC  60EE       581          bra       _getch_1
                     582   _getch_3:
                     583   ; ;
                     584   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
080002DE  1039 0040  585          move.b    4194370,D0
080002E2  0042      
080002E4  C0BC 0000  586          and.l     #255,D0
080002E8  00FF      
080002EA  C0BC 0000  587          and.l     #127,D0
080002EE  007F      
080002F0  4E5E       588          unlk      A6
080002F2  4E75       589          rts
                     590   ; }
                     591   ; /******************************************************************************
                     592   ; **  Subroutine to output a single character to the 2 row LCD display
                     593   ; **  It is assumed the character is an ASCII code and it will be displayed at the
                     594   ; **  current cursor position
                     595   ; *******************************************************************************/
                     596   ; void LCDOutchar(int c)
                     597   ; {
                     598   _LCDOutchar:
080002F4  4E56 0000  599          link      A6,#0
                     600   ; LCDdata = (char)(c);
080002F8  202E 0008  601          move.l    8(A6),D0
080002FC  13C0 0040  602          move.b    D0,4194338
08000300  0022      
                     603   ; Wait1ms() ;
08000302  4EB9 0800  604          jsr       _Wait1ms
08000306  01EE      
08000308  4E5E       605          unlk      A6
0800030A  4E75       606          rts
                     607   ; }
                     608   ; /**********************************************************************************
                     609   ; *subroutine to output a message at the current cursor position of the LCD display
                     610   ; ************************************************************************************/
                     611   ; void LCDOutMessage(char *theMessage)
                     612   ; {
                     613   _LCDOutMessage:
0800030C  4E56 FFFC  614          link      A6,#-4
                     615   ; char c ;
                     616   ; while((c = *theMessage++) != 0)     // output characters from the string until NULL
                     617   LCDOutMessage_1:
08000310  206E 0008  618          move.l    8(A6),A0
08000314  52AE 0008  619          addq.l    #1,8(A6)
08000318  1D50 FFFF  620          move.b    (A0),-1(A6)
0800031C  1010       621          move.b    (A0),D0
0800031E  6714       622          beq.s     LCDOutMessage_3
                     623   ; LCDOutchar(c) ;
08000320  122E FFFF  624          move.b    -1(A6),D1
08000324  4881       625          ext.w     D1
08000326  48C1       626          ext.l     D1
08000328  2F01       627          move.l    D1,-(A7)
0800032A  4EB9 0800  628          jsr       _LCDOutchar
0800032E  02F4      
08000330  584F       629          addq.w    #4,A7
08000332  60DC       630          bra       LCDOutMessage_1
                     631   LCDOutMessage_3:
08000334  4E5E       632          unlk      A6
08000336  4E75       633          rts
                     634   ; }
                     635   ; /******************************************************************************
                     636   ; *subroutine to clear the line by issuing 24 space characters
                     637   ; *******************************************************************************/
                     638   ; void LCDClearln(void)
                     639   ; {
                     640   _LCDClearln:
08000338  2F02       641          move.l    D2,-(A7)
                     642   ; int i ;
                     643   ; for(i = 0; i < 24; i ++)
0800033A  4282       644          clr.l     D2
                     645   LCDClearln_1:
0800033C  0C82 0000  646          cmp.l     #24,D2
08000340  0018      
08000342  6C10       647          bge.s     LCDClearln_3
                     648   ; LCDOutchar(' ') ;       // write a space char to the LCD display
08000344  4878 0020  649          pea       32
08000348  4EB9 0800  650          jsr       _LCDOutchar
0800034C  02F4      
0800034E  584F       651          addq.w    #4,A7
08000350  5282       652          addq.l    #1,D2
08000352  60E8       653          bra       LCDClearln_1
                     654   LCDClearln_3:
08000354  241F       655          move.l    (A7)+,D2
08000356  4E75       656          rts
                     657   ; }
                     658   ; /******************************************************************************
                     659   ; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
                     660   ; *******************************************************************************/
                     661   ; void LCDLine1Message(char *theMessage)
                     662   ; {
                     663   _LCDLine1Message:
08000358  4E56 0000  664          link      A6,#0
                     665   ; LCDcommand = 0x80 ;
0800035C  13FC 0080  666          move.b    #128,4194336
08000360  0040 0020 
                     667   ; Wait3ms();
08000364  4EB9 0800  668          jsr       _Wait3ms
08000368  0202      
                     669   ; LCDClearln() ;
0800036A  4EB9 0800  670          jsr       _LCDClearln
0800036E  0338      
                     671   ; LCDcommand = 0x80 ;
08000370  13FC 0080  672          move.b    #128,4194336
08000374  0040 0020 
                     673   ; Wait3ms() ;
08000378  4EB9 0800  674          jsr       _Wait3ms
0800037C  0202      
                     675   ; LCDOutMessage(theMessage) ;
0800037E  2F2E 0008  676          move.l    8(A6),-(A7)
08000382  4EB9 0800  677          jsr       _LCDOutMessage
08000386  030C      
08000388  584F       678          addq.w    #4,A7
0800038A  4E5E       679          unlk      A6
0800038C  4E75       680          rts
                     681   ; }
                     682   ; /******************************************************************************
                     683   ; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
                     684   ; *******************************************************************************/
                     685   ; void LCDLine2Message(char *theMessage)
                     686   ; {
                     687   _LCDLine2Message:
0800038E  4E56 0000  688          link      A6,#0
                     689   ; LCDcommand = 0xC0 ;
08000392  13FC 00C0  690          move.b    #192,4194336
08000396  0040 0020 
                     691   ; Wait3ms();
0800039A  4EB9 0800  692          jsr       _Wait3ms
0800039E  0202      
                     693   ; LCDClearln() ;
080003A0  4EB9 0800  694          jsr       _LCDClearln
080003A4  0338      
                     695   ; LCDcommand = 0xC0 ;
080003A6  13FC 00C0  696          move.b    #192,4194336
080003AA  0040 0020 
                     697   ; Wait3ms() ;
080003AE  4EB9 0800  698          jsr       _Wait3ms
080003B2  0202      
                     699   ; LCDOutMessage(theMessage) ;
080003B4  2F2E 0008  700          move.l    8(A6),-(A7)
080003B8  4EB9 0800  701          jsr       _LCDOutMessage
080003BC  030C      
080003BE  584F       702          addq.w    #4,A7
080003C0  4E5E       703          unlk      A6
080003C2  4E75       704          rts
                     705   ; }
                     706   ; void I2C_Start(void){
                     707   _I2C_Start:
                     708   ; // Start condition is 8'b1000_0000
                     709   ; I2C_CR = 0x80;
080003C4  13FC 0080  710          move.b    #128,4227080
080003C8  0040 8008 
080003CC  4E75       711          rts
                     712   ; }
                     713   ; void I2C_Stop(void){
                     714   _I2C_Stop:
                     715   ; // Stop condition is 8'b0100_0000
                     716   ; I2C_CR = 0x40;
080003CE  13FC 0040  717          move.b    #64,4227080
080003D2  0040 8008 
080003D6  4E75       718          rts
                     719   ; }
                     720   ; void I2C_Init(void){
                     721   _I2C_Init:
                     722   ; // Make sure I2C core is off
                     723   ; I2C_CTR = (char)0x00;
080003D8  4239 0040  724          clr.b     4227076
080003DC  8004      
                     725   ; // Prescale register clock, 25Mhz / (5 * 100KHz) - 1  -> 0x0031
                     726   ; I2C_PRERLO = (char)0x31;
080003DE  13FC 0031  727          move.b    #49,4227072
080003E2  0040 8000 
                     728   ; I2C_PRERHI = (char)0x00;
080003E6  4239 0040  729          clr.b     4227074
080003EA  8002      
                     730   ; // Enable I2C Core, no interrupt enabled
                     731   ; // 8'b10xx_xxxx
                     732   ; I2C_CTR = (char)0x80;
080003EC  13FC 0080  733          move.b    #128,4227076
080003F0  0040 8004 
080003F4  4E75       734          rts
                     735   ; }
                     736   ; void WaitForRxACK(void){
                     737   _WaitForRxACK:
                     738   ; // Read RxACK bit from Status Register, should be '0'
                     739   ; // Status Register [7] == 0
                     740   ; while(((I2C_SR >> 7) & 1) == 1){
                     741   WaitForRxACK_1:
080003F6  1039 0040  742          move.b    4227080,D0
080003FA  8008      
080003FC  EE08       743          lsr.b     #7,D0
080003FE  C03C 0001  744          and.b     #1,D0
08000402  0C00 0001  745          cmp.b     #1,D0
08000406  6602       746          bne.s     WaitForRxACK_3
                     747   ; }
08000408  60EC       748          bra       WaitForRxACK_1
                     749   WaitForRxACK_3:
0800040A  4E75       750          rts
                     751   ; }
                     752   ; void WaitForTIPFlagReset(void){
                     753   _WaitForTIPFlagReset:
                     754   ; // Status Register [1] == 0
                     755   ; while((I2C_SR >> 1) & 1){
                     756   WaitForTIPFlagReset_1:
0800040C  1039 0040  757          move.b    4227080,D0
08000410  8008      
08000412  E208       758          lsr.b     #1,D0
08000414  C03C 0001  759          and.b     #1,D0
08000418  6702       760          beq.s     WaitForTIPFlagReset_3
                     761   ; }
0800041A  60F0       762          bra       WaitForTIPFlagReset_1
                     763   WaitForTIPFlagReset_3:
0800041C  4E75       764          rts
                     765   ; }
                     766   ; void Wait(void){
                     767   _Wait:
                     768   ; WaitForTIPFlagReset();
0800041E  4EB9 0800  769          jsr       _WaitForTIPFlagReset
08000422  040C      
                     770   ; WaitForRxACK();
08000424  4EB9 0800  771          jsr       _WaitForRxACK
08000428  03F6      
0800042A  4E75       772          rts
                     773   ; }
                     774   ; void TransmitI2C(char data, char cr){
                     775   _TransmitI2C:
0800042C  4E56 0000  776          link      A6,#0
                     777   ; I2C_TXR = data;
08000430  13EE 000B  778          move.b    11(A6),4227078
08000434  0040 8006 
                     779   ; I2C_CR = cr;
08000438  13EE 000F  780          move.b    15(A6),4227080
0800043C  0040 8008 
                     781   ; Wait();
08000440  4EB9 0800  782          jsr       _Wait
08000444  041E      
08000446  4E5E       783          unlk      A6
08000448  4E75       784          rts
                     785   ; }
                     786   ; // Assumptions: addr is at most 7 bits wide
                     787   ; void WriteI2CChar(char data, char slave_addr, char memaddr_hi, char memaddr_lo){
                     788   _WriteI2CChar:
0800044A  4E56 0000  789          link      A6,#0
0800044E  2F0A       790          move.l    A2,-(A7)
08000450  45F9 0800  791          lea       _TransmitI2C.L,A2
08000454  042C      
                     792   ; // Check before doing anything
                     793   ; WaitForTIPFlagReset();
08000456  4EB9 0800  794          jsr       _WaitForTIPFlagReset
0800045A  040C      
                     795   ; // Set slave to write mode, Generate start command
                     796   ; TransmitI2C(slave_addr, WSTART);
0800045C  4878 0091  797          pea       145
08000460  122E 000F  798          move.b    15(A6),D1
08000464  4881       799          ext.w     D1
08000466  48C1       800          ext.l     D1
08000468  2F01       801          move.l    D1,-(A7)
0800046A  4E92       802          jsr       (A2)
0800046C  504F       803          addq.w    #8,A7
                     804   ; // Write Mem Address and set W bit
                     805   ; TransmitI2C(memaddr_hi, WRITE);
0800046E  4878 0010  806          pea       16
08000472  122E 0013  807          move.b    19(A6),D1
08000476  4881       808          ext.w     D1
08000478  48C1       809          ext.l     D1
0800047A  2F01       810          move.l    D1,-(A7)
0800047C  4E92       811          jsr       (A2)
0800047E  504F       812          addq.w    #8,A7
                     813   ; TransmitI2C(memaddr_lo, WRITE);
08000480  4878 0010  814          pea       16
08000484  122E 0017  815          move.b    23(A6),D1
08000488  4881       816          ext.w     D1
0800048A  48C1       817          ext.l     D1
0800048C  2F01       818          move.l    D1,-(A7)
0800048E  4E92       819          jsr       (A2)
08000490  504F       820          addq.w    #8,A7
                     821   ; // Write data transmit register, set STO bit, set W bit. 
                     822   ; TransmitI2C(data, WSTOP);
08000492  4878 0050  823          pea       80
08000496  122E 000B  824          move.b    11(A6),D1
0800049A  4881       825          ext.w     D1
0800049C  48C1       826          ext.l     D1
0800049E  2F01       827          move.l    D1,-(A7)
080004A0  4E92       828          jsr       (A2)
080004A2  504F       829          addq.w    #8,A7
080004A4  245F       830          move.l    (A7)+,A2
080004A6  4E5E       831          unlk      A6
080004A8  4E75       832          rts
                     833   ; }
                     834   ; // Assumptions: slave_addr is in write mode
                     835   ; void ReadI2CChar(char *data, char slave_addr, char memaddr_hi, char memaddr_lo){
                     836   _ReadI2CChar:
080004AA  4E56 0000  837          link      A6,#0
080004AE  2F0A       838          move.l    A2,-(A7)
080004B0  45F9 0800  839          lea       _TransmitI2C.L,A2
080004B4  042C      
                     840   ; // Check before doing anything
                     841   ; WaitForTIPFlagReset();
080004B6  4EB9 0800  842          jsr       _WaitForTIPFlagReset
080004BA  040C      
                     843   ; // Set slave to write mode, Generate start command
                     844   ; TransmitI2C(slave_addr, WSTART);
080004BC  4878 0091  845          pea       145
080004C0  122E 000F  846          move.b    15(A6),D1
080004C4  4881       847          ext.w     D1
080004C6  48C1       848          ext.l     D1
080004C8  2F01       849          move.l    D1,-(A7)
080004CA  4E92       850          jsr       (A2)
080004CC  504F       851          addq.w    #8,A7
                     852   ; // Write Mem Address and set W bit
                     853   ; TransmitI2C(memaddr_hi, WRITE);
080004CE  4878 0010  854          pea       16
080004D2  122E 0013  855          move.b    19(A6),D1
080004D6  4881       856          ext.w     D1
080004D8  48C1       857          ext.l     D1
080004DA  2F01       858          move.l    D1,-(A7)
080004DC  4E92       859          jsr       (A2)
080004DE  504F       860          addq.w    #8,A7
                     861   ; TransmitI2C(memaddr_lo, WRITE);
080004E0  4878 0010  862          pea       16
080004E4  122E 0017  863          move.b    23(A6),D1
080004E8  4881       864          ext.w     D1
080004EA  48C1       865          ext.l     D1
080004EC  2F01       866          move.l    D1,-(A7)
080004EE  4E92       867          jsr       (A2)
080004F0  504F       868          addq.w    #8,A7
                     869   ; // Set slave to read mode and generate start command for reading
                     870   ; TransmitI2C(slave_addr | 1, WSTART);
080004F2  4878 0091  871          pea       145
080004F6  122E 000F  872          move.b    15(A6),D1
080004FA  823C 0001  873          or.b      #1,D1
080004FE  4881       874          ext.w     D1
08000500  48C1       875          ext.l     D1
08000502  2F01       876          move.l    D1,-(A7)
08000504  4E92       877          jsr       (A2)
08000506  504F       878          addq.w    #8,A7
                     879   ; // Read data transmit register, set R bit, set NACK and IACK
                     880   ; I2C_CR = READNACK;
08000508  13FC 0029  881          move.b    #41,4227080
0800050C  0040 8008 
                     882   ; // Wait for read data to come in
                     883   ; while((I2C_SR & 1) !=1){}
                     884   ReadI2CChar_1:
08000510  1039 0040  885          move.b    4227080,D0
08000514  8008      
08000516  C03C 0001  886          and.b     #1,D0
0800051A  0C00 0001  887          cmp.b     #1,D0
0800051E  6702       888          beq.s     ReadI2CChar_3
08000520  60EE       889          bra       ReadI2CChar_1
                     890   ReadI2CChar_3:
                     891   ; *data = I2C_RXR;
08000522  206E 0008  892          move.l    8(A6),A0
08000526  10B9 0040  893          move.b    4227078,(A0)
0800052A  8006      
                     894   ; I2C_CR = 0x41;
0800052C  13FC 0041  895          move.b    #65,4227080
08000530  0040 8008 
08000534  245F       896          move.l    (A7)+,A2
08000536  4E5E       897          unlk      A6
08000538  4E75       898          rts
                     899   ; }
                     900   ; // Increment logic, handles bank overflows, handle write addressing boundaries
                     901   ; void incrI2C(char *slave_addr, char *memaddr_hi, char *memaddr_lo, int read, int addr_change){
                     902   _incrI2C:
0800053A  4E56 FFFC  903          link      A6,#-4
0800053E  48E7 3E30  904          movem.l   D2/D3/D4/D5/D6/A2/A3,-(A7)
08000542  45F9 0800  905          lea       _TransmitI2C.L,A2
08000546  042C      
08000548  242E 0008  906          move.l    8(A6),D2
0800054C  262E 0010  907          move.l    16(A6),D3
08000550  282E 000C  908          move.l    12(A6),D4
08000554  47F9 0800  909          lea       _printf.L,A3
08000558  11AA      
                     910   ; char zeewo = 0x00;
0800055A  4205       911          clr.b     D5
                     912   ; char one = 0x01;
0800055C  7C01       913          moveq     #1,D6
                     914   ; int edge = 0;
0800055E  42AE FFFC  915          clr.l     -4(A6)
                     916   ; // printf("\r\n %x %x%x", *slave_addr, *memaddr_hi, *memaddr_lo);
                     917   ; if ((*memaddr_lo & 0xFF) == 0xFF){
08000562  2043       918          move.l    D3,A0
08000564  1010       919          move.b    (A0),D0
08000566  4880       920          ext.w     D0
08000568  C07C 00FF  921          and.w     #255,D0
0800056C  0C40 00FF  922          cmp.w     #255,D0
08000570  6600 011E  923          bne       incrI2C_1
                     924   ; if ((*memaddr_hi & 0xFF) == 0xFF){ // Change bank
08000574  2044       925          move.l    D4,A0
08000576  1010       926          move.b    (A0),D0
08000578  4880       927          ext.w     D0
0800057A  C07C 00FF  928          and.w     #255,D0
0800057E  0C40 00FF  929          cmp.w     #255,D0
08000582  6600 0102  930          bne       incrI2C_3
                     931   ; *slave_addr = ((*slave_addr & 0x8) == 0x8) ? EEPROM_SLAVE_BANK0 : EEPROM_SLAVE_BANK1;
08000586  2042       932          move.l    D2,A0
08000588  1010       933          move.b    (A0),D0
0800058A  C03C 0008  934          and.b     #8,D0
0800058E  0C00 0008  935          cmp.b     #8,D0
08000592  6606       936          bne.s     incrI2C_5
08000594  303C 00A0  937          move.w    #160,D0
08000598  6004       938          bra.s     incrI2C_6
                     939   incrI2C_5:
0800059A  303C 00A8  940          move.w    #168,D0
                     941   incrI2C_6:
0800059E  2042       942          move.l    D2,A0
080005A0  1080       943          move.b    D0,(A0)
                     944   ; *memaddr_lo = zeewo;
080005A2  2043       945          move.l    D3,A0
080005A4  1085       946          move.b    D5,(A0)
                     947   ; *memaddr_hi = zeewo;
080005A6  2044       948          move.l    D4,A0
080005A8  1085       949          move.b    D5,(A0)
                     950   ; if(read & 1){
080005AA  202E 0014  951          move.l    20(A6),D0
080005AE  C0BC 0000  952          and.l     #1,D0
080005B2  0001      
080005B4  6700 0066  953          beq       incrI2C_7
                     954   ; printf("\r\n Changing slave and restart %x", *slave_addr);
080005B8  2042       955          move.l    D2,A0
080005BA  1210       956          move.b    (A0),D1
080005BC  4881       957          ext.w     D1
080005BE  48C1       958          ext.l     D1
080005C0  2F01       959          move.l    D1,-(A7)
080005C2  4879 0800  960          pea       @lab5_1.L
080005C6  1B38      
080005C8  4E93       961          jsr       (A3)
080005CA  504F       962          addq.w    #8,A7
                     963   ; TransmitI2C(*slave_addr, WSTART);
080005CC  4878 0091  964          pea       145
080005D0  2042       965          move.l    D2,A0
080005D2  1210       966          move.b    (A0),D1
080005D4  4881       967          ext.w     D1
080005D6  48C1       968          ext.l     D1
080005D8  2F01       969          move.l    D1,-(A7)
080005DA  4E92       970          jsr       (A2)
080005DC  504F       971          addq.w    #8,A7
                     972   ; TransmitI2C(*memaddr_hi, WRITE);
080005DE  4878 0010  973          pea       16
080005E2  2044       974          move.l    D4,A0
080005E4  1210       975          move.b    (A0),D1
080005E6  4881       976          ext.w     D1
080005E8  48C1       977          ext.l     D1
080005EA  2F01       978          move.l    D1,-(A7)
080005EC  4E92       979          jsr       (A2)
080005EE  504F       980          addq.w    #8,A7
                     981   ; TransmitI2C(*memaddr_lo, WRITE);
080005F0  4878 0010  982          pea       16
080005F4  2043       983          move.l    D3,A0
080005F6  1210       984          move.b    (A0),D1
080005F8  4881       985          ext.w     D1
080005FA  48C1       986          ext.l     D1
080005FC  2F01       987          move.l    D1,-(A7)
080005FE  4E92       988          jsr       (A2)
08000600  504F       989          addq.w    #8,A7
                     990   ; TransmitI2C(*slave_addr | 1, WSTART);
08000602  4878 0091  991          pea       145
08000606  2042       992          move.l    D2,A0
08000608  1210       993          move.b    (A0),D1
0800060A  823C 0001  994          or.b      #1,D1
0800060E  4881       995          ext.w     D1
08000610  48C1       996          ext.l     D1
08000612  2F01       997          move.l    D1,-(A7)
08000614  4E92       998          jsr       (A2)
08000616  504F       999          addq.w    #8,A7
08000618  6000 0038 1000          bra       incrI2C_8
                    1001   incrI2C_7:
                    1002   ; }
                    1003   ; else{
                    1004   ; TransmitI2C(*slave_addr, WSTART);
0800061C  4878 0091 1005          pea       145
08000620  2042      1006          move.l    D2,A0
08000622  1210      1007          move.b    (A0),D1
08000624  4881      1008          ext.w     D1
08000626  48C1      1009          ext.l     D1
08000628  2F01      1010          move.l    D1,-(A7)
0800062A  4E92      1011          jsr       (A2)
0800062C  504F      1012          addq.w    #8,A7
                    1013   ; TransmitI2C(*memaddr_hi, WRITE);
0800062E  4878 0010 1014          pea       16
08000632  2044      1015          move.l    D4,A0
08000634  1210      1016          move.b    (A0),D1
08000636  4881      1017          ext.w     D1
08000638  48C1      1018          ext.l     D1
0800063A  2F01      1019          move.l    D1,-(A7)
0800063C  4E92      1020          jsr       (A2)
0800063E  504F      1021          addq.w    #8,A7
                    1022   ; TransmitI2C(*memaddr_lo, WRITE);
08000640  4878 0010 1023          pea       16
08000644  2043      1024          move.l    D3,A0
08000646  1210      1025          move.b    (A0),D1
08000648  4881      1026          ext.w     D1
0800064A  48C1      1027          ext.l     D1
0800064C  2F01      1028          move.l    D1,-(A7)
0800064E  4E92      1029          jsr       (A2)
08000650  504F      1030          addq.w    #8,A7
                    1031   incrI2C_8:
                    1032   ; }
                    1033   ; printf("\r\n HIT EDGE CASE %x %x%x", *slave_addr, *memaddr_hi, *memaddr_lo);
08000652  2043      1034          move.l    D3,A0
08000654  1210      1035          move.b    (A0),D1
08000656  4881      1036          ext.w     D1
08000658  48C1      1037          ext.l     D1
0800065A  2F01      1038          move.l    D1,-(A7)
0800065C  2044      1039          move.l    D4,A0
0800065E  1210      1040          move.b    (A0),D1
08000660  4881      1041          ext.w     D1
08000662  48C1      1042          ext.l     D1
08000664  2F01      1043          move.l    D1,-(A7)
08000666  2042      1044          move.l    D2,A0
08000668  1210      1045          move.b    (A0),D1
0800066A  4881      1046          ext.w     D1
0800066C  48C1      1047          ext.l     D1
0800066E  2F01      1048          move.l    D1,-(A7)
08000670  4879 0800 1049          pea       @lab5_2.L
08000674  1B5A      
08000676  4E93      1050          jsr       (A3)
08000678  DEFC 0010 1051          add.w     #16,A7
                    1052   ; edge = 1;
0800067C  2D7C 0000 1053          move.l    #1,-4(A6)
08000680  0001 FFFC 
08000684  6008      1054          bra.s     incrI2C_4
                    1055   incrI2C_3:
                    1056   ; }
                    1057   ; else{
                    1058   ; *memaddr_hi += one;
08000686  2044      1059          move.l    D4,A0
08000688  DD10      1060          add.b     D6,(A0)
                    1061   ; *memaddr_lo = zeewo;
0800068A  2043      1062          move.l    D3,A0
0800068C  1085      1063          move.b    D5,(A0)
                    1064   incrI2C_4:
0800068E  6004      1065          bra.s     incrI2C_2
                    1066   incrI2C_1:
                    1067   ; }
                    1068   ; }
                    1069   ; else{
                    1070   ; *memaddr_lo += one;
08000690  2043      1071          move.l    D3,A0
08000692  DD10      1072          add.b     D6,(A0)
                    1073   incrI2C_2:
                    1074   ; }
                    1075   ; if(read == 0 && addr_change == 1){
08000694  202E 0014 1076          move.l    20(A6),D0
08000698  6600 0050 1077          bne       incrI2C_9
0800069C  202E 0018 1078          move.l    24(A6),D0
080006A0  0C80 0000 1079          cmp.l     #1,D0
080006A4  0001      
080006A6  6600 0042 1080          bne       incrI2C_9
                    1081   ; printf("\r\n Write address boundary, restarting without changing slave");
080006AA  4879 0800 1082          pea       @lab5_3.L
080006AE  1B74      
080006B0  4E93      1083          jsr       (A3)
080006B2  584F      1084          addq.w    #4,A7
                    1085   ; TransmitI2C(*slave_addr, WSTART);
080006B4  4878 0091 1086          pea       145
080006B8  2042      1087          move.l    D2,A0
080006BA  1210      1088          move.b    (A0),D1
080006BC  4881      1089          ext.w     D1
080006BE  48C1      1090          ext.l     D1
080006C0  2F01      1091          move.l    D1,-(A7)
080006C2  4E92      1092          jsr       (A2)
080006C4  504F      1093          addq.w    #8,A7
                    1094   ; TransmitI2C(*memaddr_hi, WRITE);
080006C6  4878 0010 1095          pea       16
080006CA  2044      1096          move.l    D4,A0
080006CC  1210      1097          move.b    (A0),D1
080006CE  4881      1098          ext.w     D1
080006D0  48C1      1099          ext.l     D1
080006D2  2F01      1100          move.l    D1,-(A7)
080006D4  4E92      1101          jsr       (A2)
080006D6  504F      1102          addq.w    #8,A7
                    1103   ; TransmitI2C(*memaddr_lo, WRITE);
080006D8  4878 0010 1104          pea       16
080006DC  2043      1105          move.l    D3,A0
080006DE  1210      1106          move.b    (A0),D1
080006E0  4881      1107          ext.w     D1
080006E2  48C1      1108          ext.l     D1
080006E4  2F01      1109          move.l    D1,-(A7)
080006E6  4E92      1110          jsr       (A2)
080006E8  504F      1111          addq.w    #8,A7
                    1112   incrI2C_9:
080006EA  4CDF 0C7C 1113          movem.l   (A7)+,D2/D3/D4/D5/D6/A2/A3
080006EE  4E5E      1114          unlk      A6
080006F0  4E75      1115          rts
                    1116   ; }
                    1117   ; }
                    1118   ; void WriteI2CPage(char slave_addr, char memaddr_hi, char memaddr_lo, char size){
                    1119   _WriteI2CPage:
080006F2  4E56 0000 1120          link      A6,#0
080006F6  48E7 3830 1121          movem.l   D2/D3/D4/A2/A3,-(A7)
080006FA  45F9 0800 1122          lea       _TransmitI2C.L,A2
080006FE  042C      
08000700  47F9 0800 1123          lea       _printf.L,A3
08000704  11AA      
08000706  162E 0017 1124          move.b    23(A6),D3
0800070A  4883      1125          ext.w     D3
0800070C  48C3      1126          ext.l     D3
                    1127   ; // Data is array of size "size", max size 128
                    1128   ; // WriteI2CChar();
                    1129   ; char i;
                    1130   ; int full_addr = (memaddr_hi) << 8 | memaddr_lo;
0800070E  102E 000F 1131          move.b    15(A6),D0
08000712  4880      1132          ext.w     D0
08000714  48C0      1133          ext.l     D0
08000716  E180      1134          asl.l     #8,D0
08000718  122E 0013 1135          move.b    19(A6),D1
0800071C  4881      1136          ext.w     D1
0800071E  48C1      1137          ext.l     D1
08000720  8081      1138          or.l      D1,D0
08000722  2800      1139          move.l    D0,D4
                    1140   ; // Check before doing anything
                    1141   ; WaitForTIPFlagReset();
08000724  4EB9 0800 1142          jsr       _WaitForTIPFlagReset
08000728  040C      
                    1143   ; // Set slave to write mode, Generate start command
                    1144   ; TransmitI2C(slave_addr, WSTART);
0800072A  4878 0091 1145          pea       145
0800072E  122E 000B 1146          move.b    11(A6),D1
08000732  4881      1147          ext.w     D1
08000734  48C1      1148          ext.l     D1
08000736  2F01      1149          move.l    D1,-(A7)
08000738  4E92      1150          jsr       (A2)
0800073A  504F      1151          addq.w    #8,A7
                    1152   ; // Write Mem Address and set W bit
                    1153   ; TransmitI2C(memaddr_hi, WRITE);
0800073C  4878 0010 1154          pea       16
08000740  122E 000F 1155          move.b    15(A6),D1
08000744  4881      1156          ext.w     D1
08000746  48C1      1157          ext.l     D1
08000748  2F01      1158          move.l    D1,-(A7)
0800074A  4E92      1159          jsr       (A2)
0800074C  504F      1160          addq.w    #8,A7
                    1161   ; TransmitI2C(memaddr_lo, WRITE);
0800074E  4878 0010 1162          pea       16
08000752  122E 0013 1163          move.b    19(A6),D1
08000756  4881      1164          ext.w     D1
08000758  48C1      1165          ext.l     D1
0800075A  2F01      1166          move.l    D1,-(A7)
0800075C  4E92      1167          jsr       (A2)
0800075E  504F      1168          addq.w    #8,A7
                    1169   ; for (i = 0; i <= size; i++){
08000760  4202      1170          clr.b     D2
                    1171   WriteI2CPage_1:
08000762  B403      1172          cmp.b     D3,D2
08000764  6E00 00E2 1173          bgt       WriteI2CPage_3
                    1174   ; // Write without stop unless we're at the end of a write boundary
                    1175   ; if (i >= (size-1) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF) || ((((full_addr+1) % 0x80) == 0))&& i !=0){
08000768  1003      1176          move.b    D3,D0
0800076A  5300      1177          subq.b    #1,D0
0800076C  B400      1178          cmp.b     D0,D2
0800076E  6C00 0044 1179          bge       WriteI2CPage_6
08000772  102E 000F 1180          move.b    15(A6),D0
08000776  4880      1181          ext.w     D0
08000778  C07C 00FF 1182          and.w     #255,D0
0800077C  0C40 00FF 1183          cmp.w     #255,D0
08000780  6610      1184          bne.s     WriteI2CPage_7
08000782  102E 0013 1185          move.b    19(A6),D0
08000786  4880      1186          ext.w     D0
08000788  C07C 00FF 1187          and.w     #255,D0
0800078C  0C40 00FF 1188          cmp.w     #255,D0
08000790  6722      1189          beq.s     WriteI2CPage_6
                    1190   WriteI2CPage_7:
08000792  2004      1191          move.l    D4,D0
08000794  5280      1192          addq.l    #1,D0
08000796  2F00      1193          move.l    D0,-(A7)
08000798  4878 0080 1194          pea       128
0800079C  4EB9 0800 1195          jsr       LDIV
080007A0  1072      
080007A2  202F 0004 1196          move.l    4(A7),D0
080007A6  504F      1197          addq.w    #8,A7
080007A8  4A80      1198          tst.l     D0
080007AA  6600 006E 1199          bne       WriteI2CPage_4
080007AE  4A02      1200          tst.b     D2
080007B0  6700 0068 1201          beq       WriteI2CPage_4
                    1202   WriteI2CPage_6:
                    1203   ; TransmitI2C(i,WSTOP);
080007B4  4878 0050 1204          pea       80
080007B8  4882      1205          ext.w     D2
080007BA  48C2      1206          ext.l     D2
080007BC  2F02      1207          move.l    D2,-(A7)
080007BE  4E92      1208          jsr       (A2)
080007C0  504F      1209          addq.w    #8,A7
                    1210   ; printf("\r\n--------------");
080007C2  4879 0800 1211          pea       @lab5_4.L
080007C6  1BB2      
080007C8  4E93      1212          jsr       (A3)
080007CA  584F      1213          addq.w    #4,A7
                    1214   ; printf("\r\nfulladdr: %x", full_addr);
080007CC  2F04      1215          move.l    D4,-(A7)
080007CE  4879 0800 1216          pea       @lab5_5.L
080007D2  1BC4      
080007D4  4E93      1217          jsr       (A3)
080007D6  504F      1218          addq.w    #8,A7
                    1219   ; printf("\r\ndata: %x", i);
080007D8  4882      1220          ext.w     D2
080007DA  48C2      1221          ext.l     D2
080007DC  2F02      1222          move.l    D2,-(A7)
080007DE  4879 0800 1223          pea       @lab5_6.L
080007E2  1BD4      
080007E4  4E93      1224          jsr       (A3)
080007E6  504F      1225          addq.w    #8,A7
                    1226   ; printf("\r\n--------------");
080007E8  4879 0800 1227          pea       @lab5_4.L
080007EC  1BB2      
080007EE  4E93      1228          jsr       (A3)
080007F0  584F      1229          addq.w    #4,A7
                    1230   ; if(i != size)
080007F2  B403      1231          cmp.b     D3,D2
080007F4  671E      1232          beq.s     WriteI2CPage_8
                    1233   ; incrI2C(&slave_addr, &memaddr_hi, &memaddr_lo, 0, 1);
080007F6  4878 0001 1234          pea       1
080007FA  42A7      1235          clr.l     -(A7)
080007FC  486E 0013 1236          pea       19(A6)
08000800  486E 000F 1237          pea       15(A6)
08000804  486E 000B 1238          pea       11(A6)
08000808  4EB9 0800 1239          jsr       _incrI2C
0800080C  053A      
0800080E  DEFC 0014 1240          add.w     #20,A7
08000812  6004      1241          bra.s     WriteI2CPage_9
                    1242   WriteI2CPage_8:
                    1243   ; else return;
08000814  6000 0032 1244          bra       WriteI2CPage_3
                    1245   WriteI2CPage_9:
08000818  6028      1246          bra.s     WriteI2CPage_5
                    1247   WriteI2CPage_4:
                    1248   ; }
                    1249   ; else{
                    1250   ; TransmitI2C(i,WRITE);
0800081A  4878 0010 1251          pea       16
0800081E  4882      1252          ext.w     D2
08000820  48C2      1253          ext.l     D2
08000822  2F02      1254          move.l    D2,-(A7)
08000824  4E92      1255          jsr       (A2)
08000826  504F      1256          addq.w    #8,A7
                    1257   ; // Page crossing, if it happens, is handled inside incrI2C
                    1258   ; incrI2C(&slave_addr, &memaddr_hi, &memaddr_lo, 0, 0);
08000828  42A7      1259          clr.l     -(A7)
0800082A  42A7      1260          clr.l     -(A7)
0800082C  486E 0013 1261          pea       19(A6)
08000830  486E 000F 1262          pea       15(A6)
08000834  486E 000B 1263          pea       11(A6)
08000838  4EB9 0800 1264          jsr       _incrI2C
0800083C  053A      
0800083E  DEFC 0014 1265          add.w     #20,A7
                    1266   WriteI2CPage_5:
08000842  5202      1267          addq.b    #1,D2
08000844  6000 FF1C 1268          bra       WriteI2CPage_1
                    1269   WriteI2CPage_3:
08000848  4CDF 0C1C 1270          movem.l   (A7)+,D2/D3/D4/A2/A3
0800084C  4E5E      1271          unlk      A6
0800084E  4E75      1272          rts
                    1273   ; }
                    1274   ; // printf("%x ", full_addr);
                    1275   ; }
                    1276   ; }
                    1277   ; void ReadI2CPage(char *data, char slave_addr, char memaddr_hi, char memaddr_lo, char size){
                    1278   _ReadI2CPage:
08000850  4E56 FFFC 1279          link      A6,#-4
08000854  48E7 3020 1280          movem.l   D2/D3/A2,-(A7)
08000858  162E 001B 1281          move.b    27(A6),D3
0800085C  4883      1282          ext.w     D3
0800085E  48C3      1283          ext.l     D3
08000860  45F9 0800 1284          lea       _TransmitI2C.L,A2
08000864  042C      
                    1285   ; // Data is array of size "size", max size 128
                    1286   ; char i;
                    1287   ; int temp = 0;
08000866  42AE FFFC 1288          clr.l     -4(A6)
                    1289   ; // Check before doing anything
                    1290   ; WaitForTIPFlagReset();
0800086A  4EB9 0800 1291          jsr       _WaitForTIPFlagReset
0800086E  040C      
                    1292   ; // Set slave to write mode, Generate start command
                    1293   ; TransmitI2C(slave_addr, WSTART);
08000870  4878 0091 1294          pea       145
08000874  122E 000F 1295          move.b    15(A6),D1
08000878  4881      1296          ext.w     D1
0800087A  48C1      1297          ext.l     D1
0800087C  2F01      1298          move.l    D1,-(A7)
0800087E  4E92      1299          jsr       (A2)
08000880  504F      1300          addq.w    #8,A7
                    1301   ; // Write Mem Address and set W bit
                    1302   ; TransmitI2C(memaddr_hi, WRITE);
08000882  4878 0010 1303          pea       16
08000886  122E 0013 1304          move.b    19(A6),D1
0800088A  4881      1305          ext.w     D1
0800088C  48C1      1306          ext.l     D1
0800088E  2F01      1307          move.l    D1,-(A7)
08000890  4E92      1308          jsr       (A2)
08000892  504F      1309          addq.w    #8,A7
                    1310   ; TransmitI2C(memaddr_lo, WRITE);
08000894  4878 0010 1311          pea       16
08000898  122E 0017 1312          move.b    23(A6),D1
0800089C  4881      1313          ext.w     D1
0800089E  48C1      1314          ext.l     D1
080008A0  2F01      1315          move.l    D1,-(A7)
080008A2  4E92      1316          jsr       (A2)
080008A4  504F      1317          addq.w    #8,A7
                    1318   ; // Set slave to read mode and generate start command for reading
                    1319   ; TransmitI2C(slave_addr | 1, WSTART);
080008A6  4878 0091 1320          pea       145
080008AA  122E 000F 1321          move.b    15(A6),D1
080008AE  823C 0001 1322          or.b      #1,D1
080008B2  4881      1323          ext.w     D1
080008B4  48C1      1324          ext.l     D1
080008B6  2F01      1325          move.l    D1,-(A7)
080008B8  4E92      1326          jsr       (A2)
080008BA  504F      1327          addq.w    #8,A7
                    1328   ; for (i = 0; i <= size; i++){
080008BC  4202      1329          clr.b     D2
                    1330   ReadI2CPage_1:
080008BE  B403      1331          cmp.b     D3,D2
080008C0  6E00 00B8 1332          bgt       ReadI2CPage_3
                    1333   ; // Read without NACK unless we're at the end
                    1334   ; if (i == (size) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF)){
080008C4  B403      1335          cmp.b     D3,D2
080008C6  6720      1336          beq.s     ReadI2CPage_6
080008C8  102E 0013 1337          move.b    19(A6),D0
080008CC  4880      1338          ext.w     D0
080008CE  C07C 00FF 1339          and.w     #255,D0
080008D2  0C40 00FF 1340          cmp.w     #255,D0
080008D6  661A      1341          bne.s     ReadI2CPage_4
080008D8  102E 0017 1342          move.b    23(A6),D0
080008DC  4880      1343          ext.w     D0
080008DE  C07C 00FF 1344          and.w     #255,D0
080008E2  0C40 00FF 1345          cmp.w     #255,D0
080008E6  660A      1346          bne.s     ReadI2CPage_4
                    1347   ReadI2CPage_6:
                    1348   ; I2C_CR = READNACK;
080008E8  13FC 0029 1349          move.b    #41,4227080
080008EC  0040 8008 
080008F0  6008      1350          bra.s     ReadI2CPage_5
                    1351   ReadI2CPage_4:
                    1352   ; }
                    1353   ; else
                    1354   ; I2C_CR = READACK;
080008F2  13FC 0021 1355          move.b    #33,4227080
080008F6  0040 8008 
                    1356   ReadI2CPage_5:
                    1357   ; while((I2C_SR & 1) !=1){}
                    1358   ReadI2CPage_7:
080008FA  1039 0040 1359          move.b    4227080,D0
080008FE  8008      
08000900  C03C 0001 1360          and.b     #1,D0
08000904  0C00 0001 1361          cmp.b     #1,D0
08000908  6702      1362          beq.s     ReadI2CPage_9
0800090A  60EE      1363          bra       ReadI2CPage_7
                    1364   ReadI2CPage_9:
                    1365   ; data[i] = I2C_RXR;
0800090C  206E 0008 1366          move.l    8(A6),A0
08000910  4882      1367          ext.w     D2
08000912  48C2      1368          ext.l     D2
08000914  11B9 0040 1369          move.b    4227078,0(A0,D2.L)
08000918  8006 2800 
                    1370   ; if (i == (size) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF))
0800091C  B403      1371          cmp.b     D3,D2
0800091E  6720      1372          beq.s     ReadI2CPage_12
08000920  102E 0013 1373          move.b    19(A6),D0
08000924  4880      1374          ext.w     D0
08000926  C07C 00FF 1375          and.w     #255,D0
0800092A  0C40 00FF 1376          cmp.w     #255,D0
0800092E  661A      1377          bne.s     ReadI2CPage_10
08000930  102E 0017 1378          move.b    23(A6),D0
08000934  4880      1379          ext.w     D0
08000936  C07C 00FF 1380          and.w     #255,D0
0800093A  0C40 00FF 1381          cmp.w     #255,D0
0800093E  660A      1382          bne.s     ReadI2CPage_10
                    1383   ReadI2CPage_12:
                    1384   ; I2C_CR = 0x41;
08000940  13FC 0041 1385          move.b    #65,4227080
08000944  0040 8008 
08000948  6008      1386          bra.s     ReadI2CPage_11
                    1387   ReadI2CPage_10:
                    1388   ; else
                    1389   ; I2C_CR = 0x01;
0800094A  13FC 0001 1390          move.b    #1,4227080
0800094E  0040 8008 
                    1391   ReadI2CPage_11:
                    1392   ; // Page crossing, if it happens, is handled inside incrI2C
                    1393   ; incrI2C(&slave_addr, &memaddr_hi, &memaddr_lo, 1 , 0);
08000952  42A7      1394          clr.l     -(A7)
08000954  4878 0001 1395          pea       1
08000958  486E 0017 1396          pea       23(A6)
0800095C  486E 0013 1397          pea       19(A6)
08000960  486E 000F 1398          pea       15(A6)
08000964  4EB9 0800 1399          jsr       _incrI2C
08000968  053A      
0800096A  DEFC 0014 1400          add.w     #20,A7
                    1401   ; if (i == size) return;
0800096E  B403      1402          cmp.b     D3,D2
08000970  6602      1403          bne.s     ReadI2CPage_13
08000972  6006      1404          bra.s     ReadI2CPage_3
                    1405   ReadI2CPage_13:
08000974  5202      1406          addq.b    #1,D2
08000976  6000 FF46 1407          bra       ReadI2CPage_1
                    1408   ReadI2CPage_3:
0800097A  4CDF 040C 1409          movem.l   (A7)+,D2/D3/A2
0800097E  4E5E      1410          unlk      A6
08000980  4E75      1411          rts
                    1412   ; }
                    1413   ; }
                    1414   ; void GetBank(char *bank){
                    1415   _GetBank:
08000982  4E56 0000 1416          link      A6,#0
08000986  2F02      1417          move.l    D2,-(A7)
                    1418   ; char asdf;
                    1419   ; while(1){
                    1420   GetBank_1:
                    1421   ; printf("\r\nSelect bank:\r\n0 - Bank 0\r\n1 - Bank 1");
08000988  4879 0800 1422          pea       @lab5_7.L
0800098C  1BE0      
0800098E  4EB9 0800 1423          jsr       _printf
08000992  11AA      
08000994  584F      1424          addq.w    #4,A7
                    1425   ; asdf = getchar();
08000996  4EB9 0800 1426          jsr       _getch
0800099A  116E      
0800099C  1400      1427          move.b    D0,D2
                    1428   ; putchar(asdf);
0800099E  4882      1429          ext.w     D2
080009A0  48C2      1430          ext.l     D2
080009A2  2F02      1431          move.l    D2,-(A7)
080009A4  4EB9 0800 1432          jsr       _putch
080009A8  113E      
080009AA  584F      1433          addq.w    #4,A7
                    1434   ; if(asdf == '0'){
080009AC  0C02 0030 1435          cmp.b     #48,D2
080009B0  660A      1436          bne.s     GetBank_4
                    1437   ; *bank = EEPROM_SLAVE_BANK0;
080009B2  206E 0008 1438          move.l    8(A6),A0
080009B6  10BC 00A0 1439          move.b    #160,(A0)
                    1440   ; break;
080009BA  6020      1441          bra.s     GetBank_3
                    1442   GetBank_4:
                    1443   ; }
                    1444   ; else if (asdf == '1'){
080009BC  0C02 0031 1445          cmp.b     #49,D2
080009C0  660A      1446          bne.s     GetBank_6
                    1447   ; *bank = EEPROM_SLAVE_BANK1;
080009C2  206E 0008 1448          move.l    8(A6),A0
080009C6  10BC 00A8 1449          move.b    #168,(A0)
                    1450   ; break;
080009CA  6010      1451          bra.s     GetBank_3
                    1452   GetBank_6:
                    1453   ; }
                    1454   ; else{
                    1455   ; printf("\r\nInvalid selection.");
080009CC  4879 0800 1456          pea       @lab5_8.L
080009D0  1C08      
080009D2  4EB9 0800 1457          jsr       _printf
080009D6  11AA      
080009D8  584F      1458          addq.w    #4,A7
080009DA  60AC      1459          bra       GetBank_1
                    1460   GetBank_3:
080009DC  241F      1461          move.l    (A7)+,D2
080009DE  4E5E      1462          unlk      A6
080009E0  4E75      1463          rts
                    1464   ; }
                    1465   ; }       
                    1466   ; }
                    1467   ; void GetMemAddr(char *hi, char *lo){
                    1468   _GetMemAddr:
080009E2  4E56 0000 1469          link      A6,#0
                    1470   ; printf("\r\nEnter mem address hi:");
080009E6  4879 0800 1471          pea       @lab5_9.L
080009EA  1C1E      
080009EC  4EB9 0800 1472          jsr       _printf
080009F0  11AA      
080009F2  584F      1473          addq.w    #4,A7
                    1474   ; *hi = Get2HexDigits(0);
080009F4  42A7      1475          clr.l     -(A7)
080009F6  4EB9 0800 1476          jsr       _Get2HexDigits
080009FA  0070      
080009FC  584F      1477          addq.w    #4,A7
080009FE  206E 0008 1478          move.l    8(A6),A0
08000A02  1080      1479          move.b    D0,(A0)
                    1480   ; printf("\r\nEnter mem address lo:");
08000A04  4879 0800 1481          pea       @lab5_10.L
08000A08  1C36      
08000A0A  4EB9 0800 1482          jsr       _printf
08000A0E  11AA      
08000A10  584F      1483          addq.w    #4,A7
                    1484   ; *lo = Get2HexDigits(0);
08000A12  42A7      1485          clr.l     -(A7)
08000A14  4EB9 0800 1486          jsr       _Get2HexDigits
08000A18  0070      
08000A1A  584F      1487          addq.w    #4,A7
08000A1C  206E 000C 1488          move.l    12(A6),A0
08000A20  1080      1489          move.b    D0,(A0)
08000A22  4E5E      1490          unlk      A6
08000A24  4E75      1491          rts
                    1492   ; // TODO: Hex digit validation?
                    1493   ; }
                    1494   ; void blinky(){
                    1495   _blinky:
08000A26  48E7 0030 1496          movem.l   A2/A3,-(A7)
08000A2A  45F9 0800 1497          lea       _TransmitI2C.L,A2
08000A2E  042C      
08000A30  47F9 0800 1498          lea       _Wait250ms.L,A3
08000A34  021C      
                    1499   ; // Make sure nothing is going on in the I2C bus 
                    1500   ; WaitForTIPFlagReset();
08000A36  4EB9 0800 1501          jsr       _WaitForTIPFlagReset
08000A3A  040C      
                    1502   ; // Write address
                    1503   ; TransmitI2C(ADCDAC_SLAVE, WSTART);
08000A3C  4878 0091 1504          pea       145
08000A40  4878 0090 1505          pea       144
08000A44  4E92      1506          jsr       (A2)
08000A46  504F      1507          addq.w    #8,A7
                    1508   ; // Set control to OUT: 8'b01xx_0xxx
                    1509   ; TransmitI2C(DAC_OUT_ON, WRITE);
08000A48  4878 0010 1510          pea       16
08000A4C  4878 0040 1511          pea       64
08000A50  4E92      1512          jsr       (A2)
08000A52  504F      1513          addq.w    #8,A7
                    1514   ; // Vout calculation: 5/256 * 8 bit data
                    1515   ; // Blinky until reset is pressed on DE1
                    1516   ; while(1){
                    1517   blinky_1:
                    1518   ; TransmitI2C(0xFF, WRITE);
08000A54  4878 0010 1519          pea       16
08000A58  4878 00FF 1520          pea       255
08000A5C  4E92      1521          jsr       (A2)
08000A5E  504F      1522          addq.w    #8,A7
                    1523   ; Wait250ms();
08000A60  4E93      1524          jsr       (A3)
                    1525   ; TransmitI2C(0x00, WRITE);
08000A62  4878 0010 1526          pea       16
08000A66  42A7      1527          clr.l     -(A7)
08000A68  4E92      1528          jsr       (A2)
08000A6A  504F      1529          addq.w    #8,A7
                    1530   ; Wait250ms();
08000A6C  4E93      1531          jsr       (A3)
                    1532   ; TransmitI2C(0xFF, WRITE);
08000A6E  4878 0010 1533          pea       16
08000A72  4878 00FF 1534          pea       255
08000A76  4E92      1535          jsr       (A2)
08000A78  504F      1536          addq.w    #8,A7
                    1537   ; Wait250ms();
08000A7A  4E93      1538          jsr       (A3)
                    1539   ; TransmitI2C(0x00, WRITE);
08000A7C  4878 0010 1540          pea       16
08000A80  42A7      1541          clr.l     -(A7)
08000A82  4E92      1542          jsr       (A2)
08000A84  504F      1543          addq.w    #8,A7
                    1544   ; Wait250ms();
08000A86  4E93      1545          jsr       (A3)
                    1546   ; TransmitI2C(0xFF, WRITE);
08000A88  4878 0010 1547          pea       16
08000A8C  4878 00FF 1548          pea       255
08000A90  4E92      1549          jsr       (A2)
08000A92  504F      1550          addq.w    #8,A7
                    1551   ; Wait750ms();
08000A94  4EB9 0800 1552          jsr       _Wait750ms
08000A98  0236      
                    1553   ; TransmitI2C(0x00, WRITE);
08000A9A  4878 0010 1554          pea       16
08000A9E  42A7      1555          clr.l     -(A7)
08000AA0  4E92      1556          jsr       (A2)
08000AA2  504F      1557          addq.w    #8,A7
                    1558   ; Wait750ms();
08000AA4  4EB9 0800 1559          jsr       _Wait750ms
08000AA8  0236      
08000AAA  60A8      1560          bra       blinky_1
                    1561   ; }
                    1562   ; }
                    1563   ; // AN0: External analog source (remove jumper)
                    1564   ; // 2. AN1: On board potentiometer to supply a variable voltage.
                    1565   ; // 3. AN2: On board thermistor to measure temperature
                    1566   ; // 4. AN3: On board photo resistor to measure light intensity
                    1567   ; // 5. OUT: A RED LED which can be driven by the D/A output. 
                    1568   ; void readADC(void){
                    1569   _readADC:
08000AAC  4E56 FFFC 1570          link      A6,#-4
08000AB0  48E7 0030 1571          movem.l   A2/A3,-(A7)
08000AB4  45F9 0800 1572          lea       _printf.L,A2
08000AB8  11AA      
08000ABA  47F9 0800 1573          lea       _TransmitI2C.L,A3
08000ABE  042C      
                    1574   ; char Vchannel1, Vchannel2, Vchannel3, Vchannel4;
                    1575   ; while(1){
                    1576   readADC_1:
                    1577   ; // Make sure nothing is going on in the I2C bus 
                    1578   ; WaitForTIPFlagReset();
08000AC0  4EB9 0800 1579          jsr       _WaitForTIPFlagReset
08000AC4  040C      
                    1580   ; // Write address
                    1581   ; TransmitI2C(ADCDAC_SLAVE, WSTART);
08000AC6  4878 0091 1582          pea       145
08000ACA  4878 0090 1583          pea       144
08000ACE  4E93      1584          jsr       (A3)
08000AD0  504F      1585          addq.w    #8,A7
                    1586   ; // Set control to auto increment starting at 1: 8'b0000_0101
                    1587   ; TransmitI2C(ADC_AUTO_INCREMENT_A0, WRITE);
08000AD2  4878 0010 1588          pea       16
08000AD6  4878 0004 1589          pea       4
08000ADA  4E93      1590          jsr       (A3)
08000ADC  504F      1591          addq.w    #8,A7
                    1592   ; // Set slave to Read mode
                    1593   ; TransmitI2C(ADCDAC_SLAVE | 1, WSTART);
08000ADE  4878 0091 1594          pea       145
08000AE2  4878 0091 1595          pea       145
08000AE6  4E93      1596          jsr       (A3)
08000AE8  504F      1597          addq.w    #8,A7
                    1598   ; // Read data transmit register, set R bit, set ACK
                    1599   ; I2C_CR = READACK;
08000AEA  13FC 0021 1600          move.b    #33,4227080
08000AEE  0040 8008 
                    1601   ; // Wait for read data to come in
                    1602   ; while((I2C_SR & 1) !=1){}
                    1603   readADC_4:
08000AF2  1039 0040 1604          move.b    4227080,D0
08000AF6  8008      
08000AF8  C03C 0001 1605          and.b     #1,D0
08000AFC  0C00 0001 1606          cmp.b     #1,D0
08000B00  6702      1607          beq.s     readADC_6
08000B02  60EE      1608          bra       readADC_4
                    1609   readADC_6:
                    1610   ; Vchannel4 = I2C_RXR; // This is always invalid because the jumper isn't connected
08000B04  1D79 0040 1611          move.b    4227078,-1(A6)
08000B08  8006 FFFF 
                    1612   ; I2C_CR = READACK;
08000B0C  13FC 0021 1613          move.b    #33,4227080
08000B10  0040 8008 
                    1614   ; while((I2C_SR & 1) !=1){}
                    1615   readADC_7:
08000B14  1039 0040 1616          move.b    4227080,D0
08000B18  8008      
08000B1A  C03C 0001 1617          and.b     #1,D0
08000B1E  0C00 0001 1618          cmp.b     #1,D0
08000B22  6702      1619          beq.s     readADC_9
08000B24  60EE      1620          bra       readADC_7
                    1621   readADC_9:
                    1622   ; Vchannel1 = I2C_RXR;
08000B26  1D79 0040 1623          move.b    4227078,-4(A6)
08000B2A  8006 FFFC 
                    1624   ; I2C_CR = READACK;
08000B2E  13FC 0021 1625          move.b    #33,4227080
08000B32  0040 8008 
                    1626   ; // Wait for read data to come in
                    1627   ; while((I2C_SR & 1) !=1){}
                    1628   readADC_10:
08000B36  1039 0040 1629          move.b    4227080,D0
08000B3A  8008      
08000B3C  C03C 0001 1630          and.b     #1,D0
08000B40  0C00 0001 1631          cmp.b     #1,D0
08000B44  6702      1632          beq.s     readADC_12
08000B46  60EE      1633          bra       readADC_10
                    1634   readADC_12:
                    1635   ; Vchannel2 = I2C_RXR;
08000B48  1D79 0040 1636          move.b    4227078,-3(A6)
08000B4C  8006 FFFD 
                    1637   ; I2C_CR = READACK;
08000B50  13FC 0021 1638          move.b    #33,4227080
08000B54  0040 8008 
                    1639   ; // Wait for read data to come in
                    1640   ; while((I2C_SR & 1) !=1){}
                    1641   readADC_13:
08000B58  1039 0040 1642          move.b    4227080,D0
08000B5C  8008      
08000B5E  C03C 0001 1643          and.b     #1,D0
08000B62  0C00 0001 1644          cmp.b     #1,D0
08000B66  6702      1645          beq.s     readADC_15
08000B68  60EE      1646          bra       readADC_13
                    1647   readADC_15:
                    1648   ; Vchannel3 = I2C_RXR;
08000B6A  1D79 0040 1649          move.b    4227078,-2(A6)
08000B6E  8006 FFFE 
                    1650   ; I2C_CR = 0x41;
08000B72  13FC 0041 1651          move.b    #65,4227080
08000B76  0040 8008 
                    1652   ; // Vout calculation: 5/256 * 8 bit data, but we can just leave it.
                    1653   ; printf("\r\nThermistor: %d", Vchannel1 );
08000B7A  122E FFFC 1654          move.b    -4(A6),D1
08000B7E  4881      1655          ext.w     D1
08000B80  48C1      1656          ext.l     D1
08000B82  2F01      1657          move.l    D1,-(A7)
08000B84  4879 0800 1658          pea       @lab5_11.L
08000B88  1C4E      
08000B8A  4E92      1659          jsr       (A2)
08000B8C  504F      1660          addq.w    #8,A7
                    1661   ; printf("\r\nPotentiometer: %d", Vchannel2 );
08000B8E  122E FFFD 1662          move.b    -3(A6),D1
08000B92  4881      1663          ext.w     D1
08000B94  48C1      1664          ext.l     D1
08000B96  2F01      1665          move.l    D1,-(A7)
08000B98  4879 0800 1666          pea       @lab5_12.L
08000B9C  1C60      
08000B9E  4E92      1667          jsr       (A2)
08000BA0  504F      1668          addq.w    #8,A7
                    1669   ; printf("\r\nPhotoresistor: %d", Vchannel3);
08000BA2  122E FFFE 1670          move.b    -2(A6),D1
08000BA6  4881      1671          ext.w     D1
08000BA8  48C1      1672          ext.l     D1
08000BAA  2F01      1673          move.l    D1,-(A7)
08000BAC  4879 0800 1674          pea       @lab5_13.L
08000BB0  1C74      
08000BB2  4E92      1675          jsr       (A2)
08000BB4  504F      1676          addq.w    #8,A7
                    1677   ; printf("\r\n--------------");
08000BB6  4879 0800 1678          pea       @lab5_4.L
08000BBA  1BB2      
08000BBC  4E92      1679          jsr       (A2)
08000BBE  584F      1680          addq.w    #4,A7
                    1681   ; Wait1s();
08000BC0  4EB9 0800 1682          jsr       _Wait1s
08000BC4  0250      
08000BC6  6000 FEF8 1683          bra       readADC_1
                    1684   ; }
                    1685   ; }
                    1686   ; /*********************************************************************************************************************************
                    1687   ; **  IMPORTANT FUNCTION
                    1688   ; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
                    1689   ; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
                    1690   ; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
                    1691   ; **  Calling this function allows you to deal with Interrupts for example
                    1692   ; ***********************************************************************************************************************************/
                    1693   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                    1694   ; {
                    1695   _InstallExceptionHandler:
08000BCA  4E56 FFFC 1696          link      A6,#-4
                    1697   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
08000BCE  2D7C 0B00 1698          move.l    #184549376,-4(A6)
08000BD2  0000 FFFC 
                    1699   ; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
08000BD6  206E FFFC 1700          move.l    -4(A6),A0
08000BDA  202E 000C 1701          move.l    12(A6),D0
08000BDE  E588      1702          lsl.l     #2,D0
08000BE0  21AE 0008 1703          move.l    8(A6),0(A0,D0.L)
08000BE4  0800      
08000BE6  4E5E      1704          unlk      A6
08000BE8  4E75      1705          rts
                    1706   ; }
                    1707   ; /******************************************************************************************************************************
                    1708   ; * Start of user program
                    1709   ; ******************************************************************************************************************************/
                    1710   ; void main()
                    1711   ; {
                    1712   _main:
08000BEA  4E56 FCC8 1713          link      A6,#-824
08000BEE  48E7 303C 1714          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
08000BF2  45F9 0800 1715          lea       _printf.L,A2
08000BF6  11AA      
08000BF8  47F9 0800 1716          lea       _InstallExceptionHandler.L,A3
08000BFC  0BCA      
08000BFE  49EE FD72 1717          lea       -654(A6),A4
08000C02  4BF9 0800 1718          lea       _GetMemAddr.L,A5
08000C06  09E2      
                    1719   ; unsigned int row, j=0, count=0, counter1=1;
08000C08  42AE FCCC 1720          clr.l     -820(A6)
08000C0C  42AE FCD0 1721          clr.l     -816(A6)
08000C10  2D7C 0000 1722          move.l    #1,-812(A6)
08000C14  0001 FCD4 
                    1723   ; int i = 0;
08000C18  4282      1724          clr.l     D2
                    1725   ; char c, text[150] ;
                    1726   ; unsigned char asdf, asdf1, asdf2, asdf3, bank;
                    1727   ; unsigned char wBuf[256];
                    1728   ; unsigned char rBuf[256];
                    1729   ; int addr = 2048;
08000C1A  2D7C 0000 1730          move.l    #2048,-138(A6)
08000C1E  0800 FF76 
                    1731   ; char size;
                    1732   ; char data[129];
                    1733   ; int PassFailFlag = 1 ;
08000C22  2D7C 0000 1734          move.l    #1,-4(A6)
08000C26  0001 FFFC 
                    1735   ; i = x = y = z = PortA_Count =0;
08000C2A  42B9 0800 1736          clr.l     _PortA_Count.L
08000C2E  1F96      
08000C30  42B9 0800 1737          clr.l     _z.L
08000C34  1F92      
08000C36  42B9 0800 1738          clr.l     _y.L
08000C3A  1F8E      
08000C3C  42B9 0800 1739          clr.l     _x.L
08000C40  1F8A      
08000C42  4282      1740          clr.l     D2
                    1741   ; Timer1Count = Timer2Count = Timer3Count = Timer4Count = 0;
08000C44  4239 0800 1742          clr.b     _Timer4Count.L
08000C48  1FA0      
08000C4A  4239 0800 1743          clr.b     _Timer3Count.L
08000C4E  1F9E      
08000C50  4239 0800 1744          clr.b     _Timer2Count.L
08000C54  1F9C      
08000C56  4239 0800 1745          clr.b     _Timer1Count.L
08000C5A  1F9A      
                    1746   ; InstallExceptionHandler(PIA_ISR, 25) ;          // install interrupt handler for PIAs 1 and 2 on level 1 IRQ
08000C5C  4878 0019 1747          pea       25
08000C60  4879 0800 1748          pea       _PIA_ISR.L
08000C64  01E8      
08000C66  4E93      1749          jsr       (A3)
08000C68  504F      1750          addq.w    #8,A7
                    1751   ; InstallExceptionHandler(ACIA_ISR, 26) ;		    // install interrupt handler for ACIA on level 2 IRQ
08000C6A  4878 001A 1752          pea       26
08000C6E  4879 0800 1753          pea       _ACIA_ISR.L
08000C72  01E6      
08000C74  4E93      1754          jsr       (A3)
08000C76  504F      1755          addq.w    #8,A7
                    1756   ; InstallExceptionHandler(Timer_ISR, 27) ;		// install interrupt handler for Timers 1-4 on level 3 IRQ
08000C78  4878 001B 1757          pea       27
08000C7C  4879 0800 1758          pea       _Timer_ISR.L
08000C80  014C      
08000C82  4E93      1759          jsr       (A3)
08000C84  504F      1760          addq.w    #8,A7
                    1761   ; InstallExceptionHandler(Key2PressISR, 28) ;	    // install interrupt handler for Key Press 2 on DE1 board for level 4 IRQ
08000C86  4878 001C 1762          pea       28
08000C8A  4879 0800 1763          pea       _Key2PressISR.L
08000C8E  01EA      
08000C90  4E93      1764          jsr       (A3)
08000C92  504F      1765          addq.w    #8,A7
                    1766   ; InstallExceptionHandler(Key1PressISR, 29) ;	    // install interrupt handler for Key Press 1 on DE1 board for level 5 IRQ
08000C94  4878 001D 1767          pea       29
08000C98  4879 0800 1768          pea       _Key1PressISR.L
08000C9C  01EC      
08000C9E  4E93      1769          jsr       (A3)
08000CA0  504F      1770          addq.w    #8,A7
                    1771   ; Timer1Data = 0x10;		// program time delay into timers 1-4
08000CA2  13FC 0010 1772          move.b    #16,4194352
08000CA6  0040 0030 
                    1773   ; Timer2Data = 0x20;
08000CAA  13FC 0020 1774          move.b    #32,4194356
08000CAE  0040 0034 
                    1775   ; Timer3Data = 0x15;
08000CB2  13FC 0015 1776          move.b    #21,4194360
08000CB6  0040 0038 
                    1777   ; Timer4Data = 0x25;
08000CBA  13FC 0025 1778          move.b    #37,4194364
08000CBE  0040 003C 
                    1779   ; Timer1Control = 3;		// write 3 to control register to Bit0 = 1 (enable interrupt from timers) 1 - 4 and allow them to count Bit 1 = 1
08000CC2  13FC 0003 1780          move.b    #3,4194354
08000CC6  0040 0032 
                    1781   ; Timer2Control = 3;
08000CCA  13FC 0003 1782          move.b    #3,4194358
08000CCE  0040 0036 
                    1783   ; Timer3Control = 3;
08000CD2  13FC 0003 1784          move.b    #3,4194362
08000CD6  0040 003A 
                    1785   ; Timer4Control = 3;
08000CDA  13FC 0003 1786          move.b    #3,4194366
08000CDE  0040 003E 
                    1787   ; Init_LCD();             // initialise the LCD display to use a parallel data interface and 2 lines of display
08000CE2  4EB9 0800 1788          jsr       _Init_LCD
08000CE6  026A      
                    1789   ; Init_RS232() ;          // initialise the RS232 port for use with hyper terminal
08000CE8  4EB9 0800 1790          jsr       _Init_RS232
08000CEC  0288      
                    1791   ; /*************************************************************************************************
                    1792   ; **  I2C Program Lab 5
                    1793   ; *************************************************************************************************/
                    1794   ; I2C_Init();
08000CEE  4EB9 0800 1795          jsr       _I2C_Init
08000CF2  03D8      
                    1796   ; // printf("%x\n", I2C_PRERLO);
                    1797   ; // printf("%x\n", I2C_PRERHI);
                    1798   ; // printf("%x\n", I2C_CTR);
                    1799   ; // printf("%x\n", I2C_TXR);
                    1800   ; // printf("%x\n", I2C_RXR);
                    1801   ; // printf("%x\n", I2C_CR);
                    1802   ; // printf("%x\n", I2C_SR);
                    1803   ; printf("\r\nLab 5: I2C");
08000CF4  4879 0800 1804          pea       @lab5_14.L
08000CF8  1C88      
08000CFA  4E92      1805          jsr       (A2)
08000CFC  584F      1806          addq.w    #4,A7
                    1807   ; while(1){
                    1808   main_1:
                    1809   ; printf("\r\nChoose the following:\r\n0 - Write Byte\r\n1 - Read Byte\r\n2 - Page Write\r\n3 - Page Read\r\n4 - DAC Blinky LED\r\n5 - ADC Read");
08000CFE  4879 0800 1810          pea       @lab5_15.L
08000D02  1C96      
08000D04  4E92      1811          jsr       (A2)
08000D06  584F      1812          addq.w    #4,A7
                    1813   ; asdf = getchar();
08000D08  4EB9 0800 1814          jsr       _getch
08000D0C  116E      
08000D0E  1D40 FD71 1815          move.b    D0,-655(A6)
                    1816   ; putchar(asdf);
08000D12  122E FD71 1817          move.b    -655(A6),D1
08000D16  C2BC 0000 1818          and.l     #255,D1
08000D1A  00FF      
08000D1C  2F01      1819          move.l    D1,-(A7)
08000D1E  4EB9 0800 1820          jsr       _putch
08000D22  113E      
08000D24  584F      1821          addq.w    #4,A7
                    1822   ; if(asdf == '0'){
08000D26  102E FD71 1823          move.b    -655(A6),D0
08000D2A  0C00 0030 1824          cmp.b     #48,D0
08000D2E  6600 00AC 1825          bne       main_4
                    1826   ; printf("\r\nEnter byte to write: ");
08000D32  4879 0800 1827          pea       @lab5_16.L
08000D36  1D0E      
08000D38  4E92      1828          jsr       (A2)
08000D3A  584F      1829          addq.w    #4,A7
                    1830   ; asdf = Get2HexDigits(0);
08000D3C  42A7      1831          clr.l     -(A7)
08000D3E  4EB9 0800 1832          jsr       _Get2HexDigits
08000D42  0070      
08000D44  584F      1833          addq.w    #4,A7
08000D46  1D40 FD71 1834          move.b    D0,-655(A6)
                    1835   ; // Bank Selection
                    1836   ; GetBank(&bank);
08000D4A  486E FD75 1837          pea       -651(A6)
08000D4E  4EB9 0800 1838          jsr       _GetBank
08000D52  0982      
08000D54  584F      1839          addq.w    #4,A7
                    1840   ; // Mem Address Selection
                    1841   ; GetMemAddr(&asdf2, &asdf1);
08000D56  2F0C      1842          move.l    A4,-(A7)
08000D58  486E FD73 1843          pea       -653(A6)
08000D5C  4E95      1844          jsr       (A5)
08000D5E  504F      1845          addq.w    #8,A7
                    1846   ; WriteI2CChar(asdf, bank, asdf2, asdf1);
08000D60  1214      1847          move.b    (A4),D1
08000D62  4881      1848          ext.w     D1
08000D64  48C1      1849          ext.l     D1
08000D66  2F01      1850          move.l    D1,-(A7)
08000D68  122E FD73 1851          move.b    -653(A6),D1
08000D6C  4881      1852          ext.w     D1
08000D6E  48C1      1853          ext.l     D1
08000D70  2F01      1854          move.l    D1,-(A7)
08000D72  122E FD75 1855          move.b    -651(A6),D1
08000D76  4881      1856          ext.w     D1
08000D78  48C1      1857          ext.l     D1
08000D7A  2F01      1858          move.l    D1,-(A7)
08000D7C  122E FD71 1859          move.b    -655(A6),D1
08000D80  4881      1860          ext.w     D1
08000D82  48C1      1861          ext.l     D1
08000D84  2F01      1862          move.l    D1,-(A7)
08000D86  4EB9 0800 1863          jsr       _WriteI2CChar
08000D8A  044A      
08000D8C  DEFC 0010 1864          add.w     #16,A7
                    1865   ; printf("\r\nWritten %x to bank %d at memaddr hi: %x mem addr lo: %x", asdf, bank == EEPROM_SLAVE_BANK0 ? 0:1, asdf2, asdf1);
08000D90  1214      1866          move.b    (A4),D1
08000D92  C2BC 0000 1867          and.l     #255,D1
08000D96  00FF      
08000D98  2F01      1868          move.l    D1,-(A7)
08000D9A  122E FD73 1869          move.b    -653(A6),D1
08000D9E  C2BC 0000 1870          and.l     #255,D1
08000DA2  00FF      
08000DA4  2F01      1871          move.l    D1,-(A7)
08000DA6  122E FD75 1872          move.b    -651(A6),D1
08000DAA  C27C 00FF 1873          and.w     #255,D1
08000DAE  0C41 00A0 1874          cmp.w     #160,D1
08000DB2  6604      1875          bne.s     main_6
08000DB4  4201      1876          clr.b     D1
08000DB6  6002      1877          bra.s     main_7
                    1878   main_6:
08000DB8  7201      1879          moveq     #1,D1
                    1880   main_7:
08000DBA  4881      1881          ext.w     D1
08000DBC  48C1      1882          ext.l     D1
08000DBE  2F01      1883          move.l    D1,-(A7)
08000DC0  122E FD71 1884          move.b    -655(A6),D1
08000DC4  C2BC 0000 1885          and.l     #255,D1
08000DC8  00FF      
08000DCA  2F01      1886          move.l    D1,-(A7)
08000DCC  4879 0800 1887          pea       @lab5_17.L
08000DD0  1D26      
08000DD2  4E92      1888          jsr       (A2)
08000DD4  DEFC 0014 1889          add.w     #20,A7
08000DD8  6000 0282 1890          bra       main_29
                    1891   main_4:
                    1892   ; }
                    1893   ; else if(asdf == '1'){
08000DDC  102E FD71 1894          move.b    -655(A6),D0
08000DE0  0C00 0031 1895          cmp.b     #49,D0
08000DE4  6600 008E 1896          bne       main_8
                    1897   ; // Bank Selection
                    1898   ; GetBank(&bank);
08000DE8  486E FD75 1899          pea       -651(A6)
08000DEC  4EB9 0800 1900          jsr       _GetBank
08000DF0  0982      
08000DF2  584F      1901          addq.w    #4,A7
                    1902   ; // Mem Address Selection
                    1903   ; GetMemAddr(&asdf, &asdf1);
08000DF4  2F0C      1904          move.l    A4,-(A7)
08000DF6  486E FD71 1905          pea       -655(A6)
08000DFA  4E95      1906          jsr       (A5)
08000DFC  504F      1907          addq.w    #8,A7
                    1908   ; ReadI2CChar(&asdf3, bank, asdf, asdf1);
08000DFE  1214      1909          move.b    (A4),D1
08000E00  4881      1910          ext.w     D1
08000E02  48C1      1911          ext.l     D1
08000E04  2F01      1912          move.l    D1,-(A7)
08000E06  122E FD71 1913          move.b    -655(A6),D1
08000E0A  4881      1914          ext.w     D1
08000E0C  48C1      1915          ext.l     D1
08000E0E  2F01      1916          move.l    D1,-(A7)
08000E10  122E FD75 1917          move.b    -651(A6),D1
08000E14  4881      1918          ext.w     D1
08000E16  48C1      1919          ext.l     D1
08000E18  2F01      1920          move.l    D1,-(A7)
08000E1A  486E FD74 1921          pea       -652(A6)
08000E1E  4EB9 0800 1922          jsr       _ReadI2CChar
08000E22  04AA      
08000E24  DEFC 0010 1923          add.w     #16,A7
                    1924   ; printf("\r\nRead %x from bank %d at memaddr hi: %x mem addr lo: %x", asdf3, bank == EEPROM_SLAVE_BANK0 ? 0:1, asdf, asdf1);
08000E28  1214      1925          move.b    (A4),D1
08000E2A  C2BC 0000 1926          and.l     #255,D1
08000E2E  00FF      
08000E30  2F01      1927          move.l    D1,-(A7)
08000E32  122E FD71 1928          move.b    -655(A6),D1
08000E36  C2BC 0000 1929          and.l     #255,D1
08000E3A  00FF      
08000E3C  2F01      1930          move.l    D1,-(A7)
08000E3E  122E FD75 1931          move.b    -651(A6),D1
08000E42  C27C 00FF 1932          and.w     #255,D1
08000E46  0C41 00A0 1933          cmp.w     #160,D1
08000E4A  6604      1934          bne.s     main_10
08000E4C  4201      1935          clr.b     D1
08000E4E  6002      1936          bra.s     main_11
                    1937   main_10:
08000E50  7201      1938          moveq     #1,D1
                    1939   main_11:
08000E52  4881      1940          ext.w     D1
08000E54  48C1      1941          ext.l     D1
08000E56  2F01      1942          move.l    D1,-(A7)
08000E58  122E FD74 1943          move.b    -652(A6),D1
08000E5C  C2BC 0000 1944          and.l     #255,D1
08000E60  00FF      
08000E62  2F01      1945          move.l    D1,-(A7)
08000E64  4879 0800 1946          pea       @lab5_18.L
08000E68  1D60      
08000E6A  4E92      1947          jsr       (A2)
08000E6C  DEFC 0014 1948          add.w     #20,A7
08000E70  6000 01EA 1949          bra       main_29
                    1950   main_8:
                    1951   ; }
                    1952   ; else if(asdf == '2'){
08000E74  102E FD71 1953          move.b    -655(A6),D0
08000E78  0C00 0032 1954          cmp.b     #50,D0
08000E7C  6600 00C4 1955          bne       main_12
                    1956   ; printf("\r\nbruh");printf("\r\nEnter size of page to write(max 128 in hex == 0x7F): ");
08000E80  4879 0800 1957          pea       @lab5_19.L
08000E84  1D9A      
08000E86  4E92      1958          jsr       (A2)
08000E88  584F      1959          addq.w    #4,A7
08000E8A  4879 0800 1960          pea       @lab5_20.L
08000E8E  1DA2      
08000E90  4E92      1961          jsr       (A2)
08000E92  584F      1962          addq.w    #4,A7
                    1963   ; size = Get2HexDigits(0);
08000E94  42A7      1964          clr.l     -(A7)
08000E96  4EB9 0800 1965          jsr       _Get2HexDigits
08000E9A  0070      
08000E9C  584F      1966          addq.w    #4,A7
08000E9E  1600      1967          move.b    D0,D3
                    1968   ; // Bank Selection
                    1969   ; GetBank(&bank);
08000EA0  486E FD75 1970          pea       -651(A6)
08000EA4  4EB9 0800 1971          jsr       _GetBank
08000EA8  0982      
08000EAA  584F      1972          addq.w    #4,A7
                    1973   ; // Mem Address Selection
                    1974   ; GetMemAddr(&asdf2, &asdf1);
08000EAC  2F0C      1975          move.l    A4,-(A7)
08000EAE  486E FD73 1976          pea       -653(A6)
08000EB2  4E95      1977          jsr       (A5)
08000EB4  504F      1978          addq.w    #8,A7
                    1979   ; WriteI2CPage(bank, asdf2, asdf1,size);
08000EB6  4883      1980          ext.w     D3
08000EB8  48C3      1981          ext.l     D3
08000EBA  2F03      1982          move.l    D3,-(A7)
08000EBC  1214      1983          move.b    (A4),D1
08000EBE  4881      1984          ext.w     D1
08000EC0  48C1      1985          ext.l     D1
08000EC2  2F01      1986          move.l    D1,-(A7)
08000EC4  122E FD73 1987          move.b    -653(A6),D1
08000EC8  4881      1988          ext.w     D1
08000ECA  48C1      1989          ext.l     D1
08000ECC  2F01      1990          move.l    D1,-(A7)
08000ECE  122E FD75 1991          move.b    -651(A6),D1
08000ED2  4881      1992          ext.w     D1
08000ED4  48C1      1993          ext.l     D1
08000ED6  2F01      1994          move.l    D1,-(A7)
08000ED8  4EB9 0800 1995          jsr       _WriteI2CPage
08000EDC  06F2      
08000EDE  DEFC 0010 1996          add.w     #16,A7
                    1997   ; printf("\r\nWrote values starting at memaddr 0x%x%x and bank %d, total size: %x\r\nData: ", asdf2, asdf1, bank == EEPROM_SLAVE_BANK0 ? 0:1,size);
08000EE2  4883      1998          ext.w     D3
08000EE4  48C3      1999          ext.l     D3
08000EE6  2F03      2000          move.l    D3,-(A7)
08000EE8  122E FD75 2001          move.b    -651(A6),D1
08000EEC  C27C 00FF 2002          and.w     #255,D1
08000EF0  0C41 00A0 2003          cmp.w     #160,D1
08000EF4  6604      2004          bne.s     main_14
08000EF6  4201      2005          clr.b     D1
08000EF8  6002      2006          bra.s     main_15
                    2007   main_14:
08000EFA  7201      2008          moveq     #1,D1
                    2009   main_15:
08000EFC  4881      2010          ext.w     D1
08000EFE  48C1      2011          ext.l     D1
08000F00  2F01      2012          move.l    D1,-(A7)
08000F02  1214      2013          move.b    (A4),D1
08000F04  C2BC 0000 2014          and.l     #255,D1
08000F08  00FF      
08000F0A  2F01      2015          move.l    D1,-(A7)
08000F0C  122E FD73 2016          move.b    -653(A6),D1
08000F10  C2BC 0000 2017          and.l     #255,D1
08000F14  00FF      
08000F16  2F01      2018          move.l    D1,-(A7)
08000F18  4879 0800 2019          pea       @lab5_21.L
08000F1C  1DDA      
08000F1E  4E92      2020          jsr       (A2)
08000F20  DEFC 0014 2021          add.w     #20,A7
                    2022   ; for(i = 0; i <= size; i++){
08000F24  4282      2023          clr.l     D2
                    2024   main_16:
08000F26  4883      2025          ext.w     D3
08000F28  48C3      2026          ext.l     D3
08000F2A  B483      2027          cmp.l     D3,D2
08000F2C  6E10      2028          bgt.s     main_18
                    2029   ; printf("%x ", i);
08000F2E  2F02      2030          move.l    D2,-(A7)
08000F30  4879 0800 2031          pea       @lab5_22.L
08000F34  1E28      
08000F36  4E92      2032          jsr       (A2)
08000F38  504F      2033          addq.w    #8,A7
08000F3A  5282      2034          addq.l    #1,D2
08000F3C  60E8      2035          bra       main_16
                    2036   main_18:
08000F3E  6000 011C 2037          bra       main_29
                    2038   main_12:
                    2039   ; }
                    2040   ; }
                    2041   ; else if(asdf == '3'){
08000F42  102E FD71 2042          move.b    -655(A6),D0
08000F46  0C00 0033 2043          cmp.b     #51,D0
08000F4A  6600 00CA 2044          bne       main_19
                    2045   ; printf("\r\nEnter size of page to read(max 128 in hex == 0x7F): ");
08000F4E  4879 0800 2046          pea       @lab5_23.L
08000F52  1E2C      
08000F54  4E92      2047          jsr       (A2)
08000F56  584F      2048          addq.w    #4,A7
                    2049   ; size = Get2HexDigits(0);
08000F58  42A7      2050          clr.l     -(A7)
08000F5A  4EB9 0800 2051          jsr       _Get2HexDigits
08000F5E  0070      
08000F60  584F      2052          addq.w    #4,A7
08000F62  1600      2053          move.b    D0,D3
                    2054   ; // Bank Selection
                    2055   ; GetBank(&bank);
08000F64  486E FD75 2056          pea       -651(A6)
08000F68  4EB9 0800 2057          jsr       _GetBank
08000F6C  0982      
08000F6E  584F      2058          addq.w    #4,A7
                    2059   ; // Mem Address Selection
                    2060   ; GetMemAddr(&asdf2, &asdf1);
08000F70  2F0C      2061          move.l    A4,-(A7)
08000F72  486E FD73 2062          pea       -653(A6)
08000F76  4E95      2063          jsr       (A5)
08000F78  504F      2064          addq.w    #8,A7
                    2065   ; ReadI2CPage(data, bank, asdf2, asdf1,size);
08000F7A  4883      2066          ext.w     D3
08000F7C  48C3      2067          ext.l     D3
08000F7E  2F03      2068          move.l    D3,-(A7)
08000F80  1214      2069          move.b    (A4),D1
08000F82  4881      2070          ext.w     D1
08000F84  48C1      2071          ext.l     D1
08000F86  2F01      2072          move.l    D1,-(A7)
08000F88  122E FD73 2073          move.b    -653(A6),D1
08000F8C  4881      2074          ext.w     D1
08000F8E  48C1      2075          ext.l     D1
08000F90  2F01      2076          move.l    D1,-(A7)
08000F92  122E FD75 2077          move.b    -651(A6),D1
08000F96  4881      2078          ext.w     D1
08000F98  48C1      2079          ext.l     D1
08000F9A  2F01      2080          move.l    D1,-(A7)
08000F9C  486E FF7A 2081          pea       -134(A6)
08000FA0  4EB9 0800 2082          jsr       _ReadI2CPage
08000FA4  0850      
08000FA6  DEFC 0014 2083          add.w     #20,A7
                    2084   ; printf("\r\nRead values starting at memaddr 0x%x%x and bank %d, total size: %x\r\nData: ", asdf2, asdf1, bank == EEPROM_SLAVE_BANK0 ? 0:1,size);
08000FAA  4883      2085          ext.w     D3
08000FAC  48C3      2086          ext.l     D3
08000FAE  2F03      2087          move.l    D3,-(A7)
08000FB0  122E FD75 2088          move.b    -651(A6),D1
08000FB4  C27C 00FF 2089          and.w     #255,D1
08000FB8  0C41 00A0 2090          cmp.w     #160,D1
08000FBC  6604      2091          bne.s     main_21
08000FBE  4201      2092          clr.b     D1
08000FC0  6002      2093          bra.s     main_22
                    2094   main_21:
08000FC2  7201      2095          moveq     #1,D1
                    2096   main_22:
08000FC4  4881      2097          ext.w     D1
08000FC6  48C1      2098          ext.l     D1
08000FC8  2F01      2099          move.l    D1,-(A7)
08000FCA  1214      2100          move.b    (A4),D1
08000FCC  C2BC 0000 2101          and.l     #255,D1
08000FD0  00FF      
08000FD2  2F01      2102          move.l    D1,-(A7)
08000FD4  122E FD73 2103          move.b    -653(A6),D1
08000FD8  C2BC 0000 2104          and.l     #255,D1
08000FDC  00FF      
08000FDE  2F01      2105          move.l    D1,-(A7)
08000FE0  4879 0800 2106          pea       @lab5_24.L
08000FE4  1E64      
08000FE6  4E92      2107          jsr       (A2)
08000FE8  DEFC 0014 2108          add.w     #20,A7
                    2109   ; for(i = 0; (unsigned)i <= (unsigned)size; i++){
08000FEC  4282      2110          clr.l     D2
                    2111   main_23:
08000FEE  4883      2112          ext.w     D3
08000FF0  48C3      2113          ext.l     D3
08000FF2  B483      2114          cmp.l     D3,D2
08000FF4  621C      2115          bhi.s     main_25
                    2116   ; printf("%x", data[i]);
08000FF6  41EE FF7A 2117          lea       -134(A6),A0
08000FFA  1230 2800 2118          move.b    0(A0,D2.L),D1
08000FFE  4881      2119          ext.w     D1
08001000  48C1      2120          ext.l     D1
08001002  2F01      2121          move.l    D1,-(A7)
08001004  4879 0800 2122          pea       @lab5_25.L
08001008  1EB2      
0800100A  4E92      2123          jsr       (A2)
0800100C  504F      2124          addq.w    #8,A7
0800100E  5282      2125          addq.l    #1,D2
08001010  60DC      2126          bra       main_23
                    2127   main_25:
08001012  6000 0048 2128          bra       main_29
                    2129   main_19:
                    2130   ; }
                    2131   ; }
                    2132   ; else if(asdf == '4'){
08001016  102E FD71 2133          move.b    -655(A6),D0
0800101A  0C00 0034 2134          cmp.b     #52,D0
0800101E  6612      2135          bne.s     main_26
                    2136   ; printf("\r\nDAC Blinky... frequency of blinky is: \r\nON - 250ms - OFF - 250ms\r\n0N - 250ms - OFF - 250ms\r\nON - 750ms - OFF - 750ms\r\nRepeat forever\r\n");
08001020  4879 0800 2137          pea       @lab5_26.L
08001024  1EB6      
08001026  4E92      2138          jsr       (A2)
08001028  584F      2139          addq.w    #4,A7
                    2140   ; blinky();
0800102A  4EB9 0800 2141          jsr       _blinky
0800102E  0A26      
08001030  602A      2142          bra.s     main_29
                    2143   main_26:
                    2144   ; }
                    2145   ; else if(asdf == '5'){
08001032  102E FD71 2146          move.b    -655(A6),D0
08001036  0C00 0035 2147          cmp.b     #53,D0
0800103A  6612      2148          bne.s     main_28
                    2149   ; printf("\r\nADC Channel Output:");
0800103C  4879 0800 2150          pea       @lab5_27.L
08001040  1F40      
08001042  4E92      2151          jsr       (A2)
08001044  584F      2152          addq.w    #4,A7
                    2153   ; readADC();
08001046  4EB9 0800 2154          jsr       _readADC
0800104A  0AAC      
0800104C  600E      2155          bra.s     main_29
                    2156   main_28:
                    2157   ; }
                    2158   ; else{
                    2159   ; printf("\r\nInvalid Selection.\r\n");
0800104E  4879 0800 2160          pea       @lab5_28.L
08001052  1F56      
08001054  4E92      2161          jsr       (A2)
08001056  584F      2162          addq.w    #4,A7
                    2163   ; continue;
08001058  6000 0002 2164          bra       main_29
                    2165   main_29:
0800105C  6000 FCA0 2166          bra       main_1
                    2167   ; }   
                    2168   ; }
                    2169   ; }
                    2170   ULDIV:
08001060  4E56 0000 2171          link    A6,#0
08001064  48E7 C000 2172          movem.l D0/D1,-(A7)
08001068  222E 0008 2173          move.l  8(A6),D1
0800106C  202E 000C 2174          move.l  12(A6),D0
08001070  6036      2175          bra.s   ldiv_3
                    2176   LDIV:
08001072  4E56 0000 2177          link    A6,#0
08001076  48E7 C000 2178          movem.l D0/D1,-(A7)
0800107A  222E 0008 2179          move.l  8(A6),D1
0800107E  202E 000C 2180          move.l  12(A6),D0
08001082  4A80      2181          tst.l   D0
08001084  6A0E      2182          bpl.s   ldiv_1
08001086  4480      2183          neg.l   D0
08001088  4A81      2184          tst.l   D1
0800108A  6A14      2185          bpl.s   ldiv_2
0800108C  4481      2186          neg.l   D1
0800108E  612A      2187          bsr.s   dodiv
08001090  4481      2188          neg.l   D1
08001092  6016      2189          bra.s   ldiv_4
                    2190   ldiv_1:
08001094  4A81      2191          tst.l   D1
08001096  6A10      2192          bpl.s   ldiv_3
08001098  4481      2193          neg.l   D1
0800109A  611E      2194          bsr.s   dodiv
0800109C  4480      2195          neg.l   D0
0800109E  600A      2196          bra.s   ldiv_4
                    2197   ldiv_2:
080010A0  6118      2198          bsr.s   dodiv
080010A2  4480      2199          neg.l   D0
080010A4  4481      2200          neg.l   D1
080010A6  6002      2201          bra.s   ldiv_4
                    2202   ldiv_3:
080010A8  6110      2203          bsr.s   dodiv
                    2204   ldiv_4:
080010AA  2D40 0008 2205          move.l  D0,8(A6)
080010AE  2D41 000C 2206          move.l  D1,12(A6)
080010B2  4CDF 0003 2207          movem.l (A7)+,D0/D1
080010B6  4E5E      2208          unlk    A6
080010B8  4E75      2209          rts
                    2210   dodiv:
080010BA  0C81 0000 2211          cmpi.l  #$FFFF,D1
080010BE  FFFF      
080010C0  6236      2212          bhi.s   dodiv_2
080010C2  0C80 0000 2213          cmpi.l  #$FFFF,D0
080010C6  FFFF      
080010C8  6210      2214          bhi.s   dodiv_1
080010CA  80C1      2215          divu    D1,D0
080010CC  2200      2216          move.l  D0,D1
080010CE  4241      2217          clr.w   D1
080010D0  4841      2218          swap    D1
080010D2  0280 0000 2219          andi.l  #$FFFF,D0
080010D6  FFFF      
080010D8  4E75      2220          rts
                    2221   dodiv_1:
080010DA  48A7 A000 2222          movem.w D0/D2,-(A7)
080010DE  4240      2223          clr.w   D0
080010E0  4840      2224          swap    D0
080010E2  80C1      2225          divu    D1,D0
080010E4  3400      2226          move.w  D0,D2
080010E6  301F      2227          move.w  (A7)+,D0
080010E8  80C1      2228          divu    D1,D0
080010EA  4840      2229          swap    D0
080010EC  4281      2230          clr.l   D1
080010EE  3200      2231          move.w  D0,D1
080010F0  3002      2232          move.w  D2,D0
080010F2  4840      2233          swap    D0
080010F4  341F      2234          move.w  (A7)+,D2
080010F6  4E75      2235          rts
                    2236   dodiv_2:
080010F8  48E7 3800 2237          movem.l D2/D3/D4,-(A7)
080010FC  2401      2238          move.l  D1,D2
080010FE  4242      2239          clr.w   D2
08001100  4842      2240          swap    D2
08001102  5282      2241          addq.l  #1,D2
08001104  2600      2242          move.l  D0,D3
08001106  2801      2243          move.l  D1,D4
08001108  2202      2244          move.l  D2,D1
0800110A  61CE      2245          bsr.s   dodiv_1
0800110C  2204      2246          move.l  D4,D1
0800110E  82C2      2247          divu    D2,D1
08001110  80C1      2248          divu    D1,D0
08001112  0280 0000 2249          andi.l  #$FFFF,D0
08001116  FFFF      
                    2250   dodiv_3:
08001118  2204      2251          move.l  D4,D1
0800111A  2404      2252          move.l  D4,D2
0800111C  4842      2253          swap    D2
0800111E  C2C0      2254          mulu    D0,D1
08001120  C4C0      2255          mulu    D0,D2
08001122  4842      2256          swap    D2
08001124  D282      2257          add.l   D2,D1
08001126  9283      2258          sub.l   D3,D1
08001128  620A      2259          bhi.s   dodiv_4
0800112A  4481      2260          neg.l   D1
0800112C  B881      2261          cmp.l   D1,D4
0800112E  6208      2262          bhi.s   dodiv_5
08001130  5280      2263          addq.l  #1,D0
08001132  60E4      2264          bra.s   dodiv_3
                    2265   dodiv_4:
08001134  5380      2266          subq.l  #1,D0
08001136  60E0      2267          bra.s   dodiv_3
                    2268   dodiv_5:
08001138  4CDF 001C 2269          movem.l (A7)+,D2/D3/D4
0800113C  4E75      2270          rts
                    2271   _putch:
0800113E  4E56 0000 2272          link      A6,#0
08001142  48E7 2000 2273          movem.l   D2,-(A7)
08001146  242E 0008 2274          move.l    8(A6),D2
0800114A  0C82 0000 2275          cmp.l     #10,D2
0800114E  000A      
08001150  660A      2276          bne.s     putch_1
08001152  4878 000D 2277          pea       13
08001156  6100 F142 2278          bsr       __putch
0800115A  584F      2279          addq.w    #4,A7
                    2280   putch_1:
0800115C  2F02      2281          move.l    D2,-(A7)
0800115E  6100 F13A 2282          bsr       __putch
08001162  584F      2283          addq.w    #4,A7
08001164  2002      2284          move.l    D2,D0
08001166  4CDF 0004 2285          movem.l   (A7)+,D2
0800116A  4E5E      2286          unlk      A6
0800116C  4E75      2287          rts
                    2288   _getch:
0800116E  48E7 2000 2289          movem.l   D2,-(A7)
08001172  2439 0800 2290          move.l    __ungetbuf,D2
08001176  1F6E      
08001178  2039 0800 2291          move.l    __ungetbuf,D0
0800117C  1F6E      
0800117E  0C80 FFFF 2292          cmp.l     #-1,D0
08001182  FFFF      
08001184  670C      2293          beq.s     getch_1
08001186  23FC FFFF 2294          move.l    #-1,__ungetbuf
0800118A  FFFF 0800 
0800118E  1F6E      
08001190  6010      2295          bra.s     getch_3
                    2296   getch_1:
08001192  6100 F134 2297          bsr       __getch
08001196  2400      2298          move.l    D0,D2
08001198  0C80 0000 2299          cmp.l     #13,D0
0800119C  000D      
0800119E  6602      2300          bne.s     getch_3
080011A0  740A      2301          moveq     #10,D2
                    2302   getch_3:
080011A2  2002      2303          move.l    D2,D0
080011A4  4CDF 0004 2304          movem.l   (A7)+,D2
080011A8  4E75      2305          rts
                    2306   _printf:
080011AA  4E56 FFFC 2307          link      A6,#-4
080011AE  48E7 2000 2308          movem.l   D2,-(A7)
080011B2  41EE 0008 2309          lea       8(A6),A0
080011B6  5848      2310          addq.w    #4,A0
080011B8  2408      2311          move.l    A0,D2
080011BA  2F02      2312          move.l    D2,-(A7)
080011BC  2F2E 0008 2313          move.l    8(A6),-(A7)
080011C0  42A7      2314          clr.l     -(A7)
080011C2  6100 00CA 2315          bsr       _vsprintf
080011C6  DEFC 000C 2316          add.w     #12,A7
080011CA  2D40 FFFC 2317          move.l    D0,-4(A6)
080011CE  4282      2318          clr.l     D2
080011D0  202E FFFC 2319          move.l    -4(A6),D0
080011D4  4CDF 0004 2320          movem.l   (A7)+,D2
080011D8  4E5E      2321          unlk      A6
080011DA  4E75      2322          rts
                    2323   @vsprintf_copy:
080011DC  4E56 0000 2324          link      A6,#0
080011E0  206E 0008 2325          move.l    8(A6),A0
080011E4  4A90      2326          tst.l     (A0)
080011E6  6710      2327          beq.s     @vsprintf_copy_1
080011E8  202E 000C 2328          move.l    12(A6),D0
080011EC  206E 0008 2329          move.l    8(A6),A0
080011F0  2250      2330          move.l    (A0),A1
080011F2  5290      2331          addq.l    #1,(A0)
080011F4  1280      2332          move.b    D0,(A1)
080011F6  600A      2333          bra.s     @vsprintf_copy_2
                    2334   @vsprintf_copy_1:
080011F8  2F2E 000C 2335          move.l    12(A6),-(A7)
080011FC  6100 FF40 2336          bsr       _putch
08001200  584F      2337          addq.w    #4,A7
                    2338   @vsprintf_copy_2:
08001202  4E5E      2339          unlk      A6
08001204  4E75      2340          rts
                    2341   @vsprintf_getval:
08001206  4E56 0000 2342          link      A6,#0
0800120A  48E7 3000 2343          movem.l   D2/D3,-(A7)
0800120E  242E 0008 2344          move.l    8(A6),D2
08001212  4283      2345          clr.l     D3
08001214  2042      2346          move.l    D2,A0
08001216  2050      2347          move.l    (A0),A0
08001218  1010      2348          move.b    (A0),D0
0800121A  4880      2349          ext.w     D0
0800121C  48C0      2350          ext.l     D0
0800121E  0C80 0000 2351          cmp.l     #42,D0
08001222  002A      
08001224  6612      2352          bne.s     @vsprintf_getval_1
08001226  206E 000C 2353          move.l    12(A6),A0
0800122A  2250      2354          move.l    (A0),A1
0800122C  5890      2355          addq.l    #4,(A0)
0800122E  2611      2356          move.l    (A1),D3
08001230  2042      2357          move.l    D2,A0
08001232  5290      2358          addq.l    #1,(A0)
08001234  6000 004E 2359          bra       @vsprintf_getval_5
                    2360   @vsprintf_getval_1:
08001238  2042      2361          move.l    D2,A0
0800123A  2050      2362          move.l    (A0),A0
0800123C  1010      2363          move.b    (A0),D0
0800123E  4880      2364          ext.w     D0
08001240  48C0      2365          ext.l     D0
08001242  0C80 0000 2366          cmp.l     #48,D0
08001246  0030      
08001248  6D00 003A 2367          blt       @vsprintf_getval_5
0800124C  2042      2368          move.l    D2,A0
0800124E  2050      2369          move.l    (A0),A0
08001250  1010      2370          move.b    (A0),D0
08001252  4880      2371          ext.w     D0
08001254  48C0      2372          ext.l     D0
08001256  0C80 0000 2373          cmp.l     #57,D0
0800125A  0039      
0800125C  6E26      2374          bgt.s     @vsprintf_getval_5
0800125E  2F03      2375          move.l    D3,-(A7)
08001260  4878 000A 2376          pea       10
08001264  6100 07F6 2377          bsr       LMUL
08001268  2017      2378          move.l    (A7),D0
0800126A  504F      2379          addq.w    #8,A7
0800126C  2042      2380          move.l    D2,A0
0800126E  2250      2381          move.l    (A0),A1
08001270  5290      2382          addq.l    #1,(A0)
08001272  1211      2383          move.b    (A1),D1
08001274  4881      2384          ext.w     D1
08001276  48C1      2385          ext.l     D1
08001278  D081      2386          add.l     D1,D0
0800127A  0480 0000 2387          sub.l     #48,D0
0800127E  0030      
08001280  2600      2388          move.l    D0,D3
08001282  60B4      2389          bra       @vsprintf_getval_1
                    2390   @vsprintf_getval_5:
08001284  2003      2391          move.l    D3,D0
08001286  4CDF 000C 2392          movem.l   (A7)+,D2/D3
0800128A  4E5E      2393          unlk      A6
0800128C  4E75      2394          rts
                    2395   _vsprintf:
0800128E  4E56 FFCC 2396          link      A6,#-52
08001292  48E7 3F3C 2397          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
08001296  45EE 0008 2398          lea       8(A6),A2
0800129A  47F9 0800 2399          lea       @vsprintf_copy,A3
0800129E  11DC      
080012A0  49F9 0800 2400          lea       _ultoa,A4
080012A4  19E8      
080012A6  4286      2401          clr.l     D6
                    2402   vsprintf_1:
080012A8  206E 000C 2403          move.l    12(A6),A0
080012AC  4A10      2404          tst.b     (A0)
080012AE  6700 0624 2405          beq       vsprintf_3
080012B2  206E 000C 2406          move.l    12(A6),A0
080012B6  1010      2407          move.b    (A0),D0
080012B8  4880      2408          ext.w     D0
080012BA  48C0      2409          ext.l     D0
080012BC  0C80 0000 2410          cmp.l     #37,D0
080012C0  0025      
080012C2  671C      2411          beq.s     vsprintf_4
080012C4  206E 000C 2412          move.l    12(A6),A0
080012C8  52AE 000C 2413          addq.l    #1,12(A6)
080012CC  1210      2414          move.b    (A0),D1
080012CE  4881      2415          ext.w     D1
080012D0  48C1      2416          ext.l     D1
080012D2  2F01      2417          move.l    D1,-(A7)
080012D4  2F0A      2418          move.l    A2,-(A7)
080012D6  4E93      2419          jsr       (A3)
080012D8  504F      2420          addq.w    #8,A7
080012DA  5286      2421          addq.l    #1,D6
080012DC  6000 05F2 2422          bra       vsprintf_2
                    2423   vsprintf_4:
080012E0  52AE 000C 2424          addq.l    #1,12(A6)
080012E4  422E FFD3 2425          clr.b     -45(A6)
080012E8  422E FFD2 2426          clr.b     -46(A6)
080012EC  422E FFD0 2427          clr.b     -48(A6)
080012F0  422E FFCF 2428          clr.b     -49(A6)
080012F4  422E FFCE 2429          clr.b     -50(A6)
080012F8  422E FFCD 2430          clr.b     -51(A6)
080012FC  42AE FFFC 2431          clr.l     -4(A6)
08001300  7AFF      2432          moveq     #-1,D5
08001302  41EE FFDC 2433          lea       -36(A6),A0
08001306  2608      2434          move.l    A0,D3
08001308  2408      2435          move.l    A0,D2
                    2436   vsprintf_6:
0800130A  206E 000C 2437          move.l    12(A6),A0
0800130E  1010      2438          move.b    (A0),D0
08001310  4880      2439          ext.w     D0
08001312  48C0      2440          ext.l     D0
08001314  0C80 0000 2441          cmp.l     #43,D0
08001318  002B      
0800131A  6730      2442          beq.s     vsprintf_12
0800131C  6E18      2443          bgt.s     vsprintf_15
0800131E  0C80 0000 2444          cmp.l     #35,D0
08001322  0023      
08001324  6700 003E 2445          beq       vsprintf_14
08001328  6E00 0046 2446          bgt       vsprintf_9
0800132C  0C80 0000 2447          cmp.l     #32,D0
08001330  0020      
08001332  6724      2448          beq.s     vsprintf_13
08001334  603A      2449          bra.s     vsprintf_9
                    2450   vsprintf_15:
08001336  0C80 0000 2451          cmp.l     #45,D0
0800133A  002D      
0800133C  6702      2452          beq.s     vsprintf_11
0800133E  6030      2453          bra.s     vsprintf_9
                    2454   vsprintf_11:
08001340  1D7C 0001 2455          move.b    #1,-51(A6)
08001344  FFCD      
08001346  52AE 000C 2456          addq.l    #1,12(A6)
0800134A  6026      2457          bra.s     vsprintf_7
                    2458   vsprintf_12:
0800134C  1D7C 0001 2459          move.b    #1,-50(A6)
08001350  FFCE      
08001352  52AE 000C 2460          addq.l    #1,12(A6)
08001356  601A      2461          bra.s     vsprintf_7
                    2462   vsprintf_13:
08001358  1D7C 0001 2463          move.b    #1,-49(A6)
0800135C  FFCF      
0800135E  52AE 000C 2464          addq.l    #1,12(A6)
08001362  600E      2465          bra.s     vsprintf_7
                    2466   vsprintf_14:
08001364  1D7C 0001 2467          move.b    #1,-48(A6)
08001368  FFD0      
0800136A  52AE 000C 2468          addq.l    #1,12(A6)
0800136E  6002      2469          bra.s     vsprintf_7
                    2470   vsprintf_9:
08001370  6002      2471          bra.s     vsprintf_8
                    2472   vsprintf_7:
08001372  6096      2473          bra       vsprintf_6
                    2474   vsprintf_8:
08001374  206E 000C 2475          move.l    12(A6),A0
08001378  1010      2476          move.b    (A0),D0
0800137A  4880      2477          ext.w     D0
0800137C  48C0      2478          ext.l     D0
0800137E  0C80 0000 2479          cmp.l     #48,D0
08001382  0030      
08001384  660A      2480          bne.s     vsprintf_16
08001386  52AE 000C 2481          addq.l    #1,12(A6)
0800138A  1D7C 0001 2482          move.b    #1,-46(A6)
0800138E  FFD2      
                    2483   vsprintf_16:
08001390  486E 0010 2484          pea       16(A6)
08001394  486E 000C 2485          pea       12(A6)
08001398  6100 FE6C 2486          bsr       @vsprintf_getval
0800139C  504F      2487          addq.w    #8,A7
0800139E  2A40      2488          move.l    D0,A5
080013A0  206E 000C 2489          move.l    12(A6),A0
080013A4  1010      2490          move.b    (A0),D0
080013A6  4880      2491          ext.w     D0
080013A8  48C0      2492          ext.l     D0
080013AA  0C80 0000 2493          cmp.l     #46,D0
080013AE  002E      
080013B0  6614      2494          bne.s     vsprintf_18
080013B2  52AE 000C 2495          addq.l    #1,12(A6)
080013B6  486E 0010 2496          pea       16(A6)
080013BA  486E 000C 2497          pea       12(A6)
080013BE  6100 FE46 2498          bsr       @vsprintf_getval
080013C2  504F      2499          addq.w    #8,A7
080013C4  2A00      2500          move.l    D0,D5
                    2501   vsprintf_18:
080013C6  206E 000C 2502          move.l    12(A6),A0
080013CA  1010      2503          move.b    (A0),D0
080013CC  4880      2504          ext.w     D0
080013CE  48C0      2505          ext.l     D0
080013D0  0C80 0000 2506          cmp.l     #108,D0
080013D4  006C      
080013D6  660A      2507          bne.s     vsprintf_20
080013D8  52AE 000C 2508          addq.l    #1,12(A6)
080013DC  1D7C 0001 2509          move.b    #1,-45(A6)
080013E0  FFD3      
                    2510   vsprintf_20:
080013E2  206E 000C 2511          move.l    12(A6),A0
080013E6  1010      2512          move.b    (A0),D0
080013E8  4880      2513          ext.w     D0
080013EA  48C0      2514          ext.l     D0
080013EC  0C80 0000 2515          cmp.l     #111,D0
080013F0  006F      
080013F2  6700 00D4 2516          beq       vsprintf_27
080013F6  6E34      2517          bgt.s     vsprintf_33
080013F8  0C80 0000 2518          cmp.l     #100,D0
080013FC  0064      
080013FE  6700 0054 2519          beq       vsprintf_24
08001402  6E1C      2520          bgt.s     vsprintf_34
08001404  0C80 0000 2521          cmp.l     #99,D0
08001408  0063      
0800140A  6700 012C 2522          beq       vsprintf_30
0800140E  6E00 016A 2523          bgt       vsprintf_22
08001412  0C80 0000 2524          cmp.l     #88,D0
08001416  0058      
08001418  6700 00E6 2525          beq       vsprintf_28
0800141C  6000 015C 2526          bra       vsprintf_22
                    2527   vsprintf_34:
08001420  0C80 0000 2528          cmp.l     #105,D0
08001424  0069      
08001426  672C      2529          beq.s     vsprintf_24
08001428  6000 0150 2530          bra       vsprintf_22
                    2531   vsprintf_33:
0800142C  0C80 0000 2532          cmp.l     #117,D0
08001430  0075      
08001432  6700 005C 2533          beq       vsprintf_26
08001436  6E0E      2534          bgt.s     vsprintf_35
08001438  0C80 0000 2535          cmp.l     #115,D0
0800143C  0073      
0800143E  6700 011C 2536          beq       vsprintf_31
08001442  6000 0136 2537          bra       vsprintf_22
                    2538   vsprintf_35:
08001446  0C80 0000 2539          cmp.l     #120,D0
0800144A  0078      
0800144C  6700 00B2 2540          beq       vsprintf_28
08001450  6000 0128 2541          bra       vsprintf_22
                    2542   vsprintf_24:
08001454  4A2E FFD3 2543          tst.b     -45(A6)
08001458  671A      2544          beq.s     vsprintf_36
0800145A  4878 000A 2545          pea       10
0800145E  2F03      2546          move.l    D3,-(A7)
08001460  206E 0010 2547          move.l    16(A6),A0
08001464  58AE 0010 2548          addq.l    #4,16(A6)
08001468  2F10      2549          move.l    (A0),-(A7)
0800146A  6100 04F8 2550          bsr       _ltoa
0800146E  DEFC 000C 2551          add.w     #12,A7
08001472  6018      2552          bra.s     vsprintf_37
                    2553   vsprintf_36:
08001474  4878 000A 2554          pea       10
08001478  2F03      2555          move.l    D3,-(A7)
0800147A  206E 0010 2556          move.l    16(A6),A0
0800147E  58AE 0010 2557          addq.l    #4,16(A6)
08001482  2F10      2558          move.l    (A0),-(A7)
08001484  6100 04DE 2559          bsr       _ltoa
08001488  DEFC 000C 2560          add.w     #12,A7
                    2561   vsprintf_37:
0800148C  6000 00FA 2562          bra       vsprintf_23
                    2563   vsprintf_26:
08001490  4A2E FFD3 2564          tst.b     -45(A6)
08001494  6718      2565          beq.s     vsprintf_38
08001496  4878 000A 2566          pea       10
0800149A  2F03      2567          move.l    D3,-(A7)
0800149C  206E 0010 2568          move.l    16(A6),A0
080014A0  58AE 0010 2569          addq.l    #4,16(A6)
080014A4  2F10      2570          move.l    (A0),-(A7)
080014A6  4E94      2571          jsr       (A4)
080014A8  DEFC 000C 2572          add.w     #12,A7
080014AC  6016      2573          bra.s     vsprintf_39
                    2574   vsprintf_38:
080014AE  4878 000A 2575          pea       10
080014B2  2F03      2576          move.l    D3,-(A7)
080014B4  206E 0010 2577          move.l    16(A6),A0
080014B8  58AE 0010 2578          addq.l    #4,16(A6)
080014BC  2F10      2579          move.l    (A0),-(A7)
080014BE  4E94      2580          jsr       (A4)
080014C0  DEFC 000C 2581          add.w     #12,A7
                    2582   vsprintf_39:
080014C4  6000 00C2 2583          bra       vsprintf_23
                    2584   vsprintf_27:
080014C8  4A2E FFD3 2585          tst.b     -45(A6)
080014CC  6718      2586          beq.s     vsprintf_40
080014CE  4878 0008 2587          pea       8
080014D2  2F03      2588          move.l    D3,-(A7)
080014D4  206E 0010 2589          move.l    16(A6),A0
080014D8  58AE 0010 2590          addq.l    #4,16(A6)
080014DC  2F10      2591          move.l    (A0),-(A7)
080014DE  4E94      2592          jsr       (A4)
080014E0  DEFC 000C 2593          add.w     #12,A7
080014E4  6016      2594          bra.s     vsprintf_41
                    2595   vsprintf_40:
080014E6  4878 0008 2596          pea       8
080014EA  2F03      2597          move.l    D3,-(A7)
080014EC  206E 0010 2598          move.l    16(A6),A0
080014F0  58AE 0010 2599          addq.l    #4,16(A6)
080014F4  2F10      2600          move.l    (A0),-(A7)
080014F6  4E94      2601          jsr       (A4)
080014F8  DEFC 000C 2602          add.w     #12,A7
                    2603   vsprintf_41:
080014FC  6000 008A 2604          bra       vsprintf_23
                    2605   vsprintf_28:
08001500  4A2E FFD3 2606          tst.b     -45(A6)
08001504  6718      2607          beq.s     vsprintf_42
08001506  4878 0010 2608          pea       16
0800150A  2F03      2609          move.l    D3,-(A7)
0800150C  206E 0010 2610          move.l    16(A6),A0
08001510  58AE 0010 2611          addq.l    #4,16(A6)
08001514  2F10      2612          move.l    (A0),-(A7)
08001516  4E94      2613          jsr       (A4)
08001518  DEFC 000C 2614          add.w     #12,A7
0800151C  6016      2615          bra.s     vsprintf_43
                    2616   vsprintf_42:
0800151E  4878 0010 2617          pea       16
08001522  2F03      2618          move.l    D3,-(A7)
08001524  206E 0010 2619          move.l    16(A6),A0
08001528  58AE 0010 2620          addq.l    #4,16(A6)
0800152C  2F10      2621          move.l    (A0),-(A7)
0800152E  4E94      2622          jsr       (A4)
08001530  DEFC 000C 2623          add.w     #12,A7
                    2624   vsprintf_43:
08001534  6000 0052 2625          bra       vsprintf_23
                    2626   vsprintf_30:
08001538  206E 0010 2627          move.l    16(A6),A0
0800153C  58AE 0010 2628          addq.l    #4,16(A6)
08001540  2010      2629          move.l    (A0),D0
08001542  2042      2630          move.l    D2,A0
08001544  5282      2631          addq.l    #1,D2
08001546  1080      2632          move.b    D0,(A0)
08001548  2042      2633          move.l    D2,A0
0800154A  4210      2634          clr.b     (A0)
0800154C  200D      2635          move.l    A5,D0
0800154E  6704      2636          beq.s     vsprintf_44
08001550  200D      2637          move.l    A5,D0
08001552  6002      2638          bra.s     vsprintf_45
                    2639   vsprintf_44:
08001554  7001      2640          moveq     #1,D0
                    2641   vsprintf_45:
08001556  2A00      2642          move.l    D0,D5
08001558  6000 002E 2643          bra       vsprintf_23
                    2644   vsprintf_31:
0800155C  206E 0010 2645          move.l    16(A6),A0
08001560  58AE 0010 2646          addq.l    #4,16(A6)
08001564  2610      2647          move.l    (A0),D3
08001566  0C85 FFFF 2648          cmp.l     #-1,D5
0800156A  FFFF      
0800156C  660A      2649          bne.s     vsprintf_46
0800156E  2F03      2650          move.l    D3,-(A7)
08001570  6100 0578 2651          bsr       _strlen
08001574  584F      2652          addq.w    #4,A7
08001576  2A00      2653          move.l    D0,D5
                    2654   vsprintf_46:
08001578  600E      2655          bra.s     vsprintf_23
                    2656   vsprintf_22:
0800157A  206E 000C 2657          move.l    12(A6),A0
0800157E  2242      2658          move.l    D2,A1
08001580  5282      2659          addq.l    #1,D2
08001582  1290      2660          move.b    (A0),(A1)
08001584  2042      2661          move.l    D2,A0
08001586  4210      2662          clr.b     (A0)
                    2663   vsprintf_23:
08001588  2F03      2664          move.l    D3,-(A7)
0800158A  6100 055E 2665          bsr       _strlen
0800158E  584F      2666          addq.w    #4,A7
08001590  1800      2667          move.b    D0,D4
08001592  206E 000C 2668          move.l    12(A6),A0
08001596  1010      2669          move.b    (A0),D0
08001598  4880      2670          ext.w     D0
0800159A  48C0      2671          ext.l     D0
0800159C  0C80 0000 2672          cmp.l     #115,D0
080015A0  0073      
080015A2  6618      2673          bne.s     vsprintf_48
080015A4  0C85 0000 2674          cmp.l     #0,D5
080015A8  0000      
080015AA  6D10      2675          blt.s     vsprintf_48
080015AC  4884      2676          ext.w     D4
080015AE  48C4      2677          ext.l     D4
080015B0  B885      2678          cmp.l     D5,D4
080015B2  6F04      2679          ble.s     vsprintf_50
080015B4  1005      2680          move.b    D5,D0
080015B6  6002      2681          bra.s     vsprintf_51
                    2682   vsprintf_50:
080015B8  1004      2683          move.b    D4,D0
                    2684   vsprintf_51:
080015BA  1800      2685          move.b    D0,D4
                    2686   vsprintf_48:
080015BC  206E 000C 2687          move.l    12(A6),A0
080015C0  1010      2688          move.b    (A0),D0
080015C2  4880      2689          ext.w     D0
080015C4  48C0      2690          ext.l     D0
080015C6  0C80 0000 2691          cmp.l     #88,D0
080015CA  0058      
080015CC  6600 0026 2692          bne       vsprintf_56
080015D0  41EE FFDC 2693          lea       -36(A6),A0
080015D4  2408      2694          move.l    A0,D2
                    2695   vsprintf_54:
080015D6  2042      2696          move.l    D2,A0
080015D8  4A10      2697          tst.b     (A0)
080015DA  6718      2698          beq.s     vsprintf_56
080015DC  2042      2699          move.l    D2,A0
080015DE  1210      2700          move.b    (A0),D1
080015E0  4881      2701          ext.w     D1
080015E2  48C1      2702          ext.l     D1
080015E4  2F01      2703          move.l    D1,-(A7)
080015E6  6100 0514 2704          bsr       _toupper
080015EA  584F      2705          addq.w    #4,A7
080015EC  2042      2706          move.l    D2,A0
080015EE  1080      2707          move.b    D0,(A0)
080015F0  5282      2708          addq.l    #1,D2
080015F2  60E2      2709          bra       vsprintf_54
                    2710   vsprintf_56:
080015F4  7E00      2711          moveq     #0,D7
080015F6  41EE FFD4 2712          lea       -44(A6),A0
080015FA  2408      2713          move.l    A0,D2
080015FC  206E 000C 2714          move.l    12(A6),A0
08001600  1010      2715          move.b    (A0),D0
08001602  4880      2716          ext.w     D0
08001604  48C0      2717          ext.l     D0
08001606  0C80 0000 2718          cmp.l     #100,D0
0800160A  0064      
0800160C  6714      2719          beq.s     vsprintf_59
0800160E  206E 000C 2720          move.l    12(A6),A0
08001612  1010      2721          move.b    (A0),D0
08001614  4880      2722          ext.w     D0
08001616  48C0      2723          ext.l     D0
08001618  0C80 0000 2724          cmp.l     #105,D0
0800161C  0069      
0800161E  6600 0076 2725          bne       vsprintf_65
                    2726   vsprintf_59:
08001622  4A2E FFCE 2727          tst.b     -50(A6)
08001626  6612      2728          bne.s     vsprintf_62
08001628  2043      2729          move.l    D3,A0
0800162A  1010      2730          move.b    (A0),D0
0800162C  4880      2731          ext.w     D0
0800162E  48C0      2732          ext.l     D0
08001630  0C80 0000 2733          cmp.l     #45,D0
08001634  002D      
08001636  6600 002E 2734          bne       vsprintf_60
                    2735   vsprintf_62:
0800163A  2043      2736          move.l    D3,A0
0800163C  1010      2737          move.b    (A0),D0
0800163E  4880      2738          ext.w     D0
08001640  48C0      2739          ext.l     D0
08001642  0C80 0000 2740          cmp.l     #45,D0
08001646  002D      
08001648  660E      2741          bne.s     vsprintf_63
0800164A  2043      2742          move.l    D3,A0
0800164C  5283      2743          addq.l    #1,D3
0800164E  2242      2744          move.l    D2,A1
08001650  5282      2745          addq.l    #1,D2
08001652  1290      2746          move.b    (A0),(A1)
08001654  5304      2747          subq.b    #1,D4
08001656  6008      2748          bra.s     vsprintf_64
                    2749   vsprintf_63:
08001658  2042      2750          move.l    D2,A0
0800165A  5282      2751          addq.l    #1,D2
0800165C  10BC 002B 2752          move.b    #43,(A0)
                    2753   vsprintf_64:
08001660  5287      2754          addq.l    #1,D7
08001662  6000 0032 2755          bra       vsprintf_65
                    2756   vsprintf_60:
08001666  4A2E FFCF 2757          tst.b     -49(A6)
0800166A  6700 002A 2758          beq       vsprintf_65
0800166E  2043      2759          move.l    D3,A0
08001670  1010      2760          move.b    (A0),D0
08001672  4880      2761          ext.w     D0
08001674  48C0      2762          ext.l     D0
08001676  0C80 0000 2763          cmp.l     #45,D0
0800167A  002D      
0800167C  660E      2764          bne.s     vsprintf_67
0800167E  2043      2765          move.l    D3,A0
08001680  5283      2766          addq.l    #1,D3
08001682  2242      2767          move.l    D2,A1
08001684  5282      2768          addq.l    #1,D2
08001686  1290      2769          move.b    (A0),(A1)
08001688  5304      2770          subq.b    #1,D4
0800168A  6008      2771          bra.s     vsprintf_68
                    2772   vsprintf_67:
0800168C  2042      2773          move.l    D2,A0
0800168E  5282      2774          addq.l    #1,D2
08001690  10BC 0020 2775          move.b    #32,(A0)
                    2776   vsprintf_68:
08001694  5287      2777          addq.l    #1,D7
                    2778   vsprintf_65:
08001696  4A2E FFD0 2779          tst.b     -48(A6)
0800169A  6700 0066 2780          beq       vsprintf_77
0800169E  206E 000C 2781          move.l    12(A6),A0
080016A2  1010      2782          move.b    (A0),D0
080016A4  4880      2783          ext.w     D0
080016A6  48C0      2784          ext.l     D0
080016A8  0C80 0000 2785          cmp.l     #111,D0
080016AC  006F      
080016AE  671A      2786          beq.s     vsprintf_73
080016B0  6E0C      2787          bgt.s     vsprintf_76
080016B2  0C80 0000 2788          cmp.l     #88,D0
080016B6  0058      
080016B8  6710      2789          beq.s     vsprintf_73
080016BA  6000 0046 2790          bra       vsprintf_77
                    2791   vsprintf_76:
080016BE  0C80 0000 2792          cmp.l     #120,D0
080016C2  0078      
080016C4  6704      2793          beq.s     vsprintf_73
080016C6  6000 003A 2794          bra       vsprintf_77
                    2795   vsprintf_73:
080016CA  2042      2796          move.l    D2,A0
080016CC  5282      2797          addq.l    #1,D2
080016CE  10BC 0030 2798          move.b    #48,(A0)
080016D2  5287      2799          addq.l    #1,D7
080016D4  206E 000C 2800          move.l    12(A6),A0
080016D8  1010      2801          move.b    (A0),D0
080016DA  4880      2802          ext.w     D0
080016DC  48C0      2803          ext.l     D0
080016DE  0C80 0000 2804          cmp.l     #120,D0
080016E2  0078      
080016E4  6712      2805          beq.s     vsprintf_79
080016E6  206E 000C 2806          move.l    12(A6),A0
080016EA  1010      2807          move.b    (A0),D0
080016EC  4880      2808          ext.w     D0
080016EE  48C0      2809          ext.l     D0
080016F0  0C80 0000 2810          cmp.l     #88,D0
080016F4  0058      
080016F6  660A      2811          bne.s     vsprintf_77
                    2812   vsprintf_79:
080016F8  2042      2813          move.l    D2,A0
080016FA  5282      2814          addq.l    #1,D2
080016FC  10BC 0078 2815          move.b    #120,(A0)
08001700  5287      2816          addq.l    #1,D7
                    2817   vsprintf_77:
08001702  2042      2818          move.l    D2,A0
08001704  4210      2819          clr.b     (A0)
08001706  206E 000C 2820          move.l    12(A6),A0
0800170A  1010      2821          move.b    (A0),D0
0800170C  4880      2822          ext.w     D0
0800170E  48C0      2823          ext.l     D0
08001710  0C80 0000 2824          cmp.l     #105,D0
08001714  0069      
08001716  6700 0076 2825          beq       vsprintf_82
0800171A  6E42      2826          bgt.s     vsprintf_93
0800171C  0C80 0000 2827          cmp.l     #99,D0
08001720  0063      
08001722  6700 0084 2828          beq       vsprintf_96
08001726  6E1C      2829          bgt.s     vsprintf_94
08001728  0C80 0000 2830          cmp.l     #88,D0
0800172C  0058      
0800172E  6700 005E 2831          beq       vsprintf_82
08001732  6E00 0184 2832          bgt       vsprintf_80
08001736  0C80 0000 2833          cmp.l     #69,D0
0800173A  0045      
0800173C  6700 0050 2834          beq       vsprintf_82
08001740  6000 0176 2835          bra       vsprintf_80
                    2836   vsprintf_94:
08001744  0C80 0000 2837          cmp.l     #101,D0
08001748  0065      
0800174A  6700 0042 2838          beq       vsprintf_82
0800174E  6E00 0168 2839          bgt       vsprintf_80
08001752  0C80 0000 2840          cmp.l     #100,D0
08001756  0064      
08001758  6734      2841          beq.s     vsprintf_82
0800175A  6000 015C 2842          bra       vsprintf_80
                    2843   vsprintf_93:
0800175E  0C80 0000 2844          cmp.l     #117,D0
08001762  0075      
08001764  6728      2845          beq.s     vsprintf_82
08001766  6E1A      2846          bgt.s     vsprintf_95
08001768  0C80 0000 2847          cmp.l     #115,D0
0800176C  0073      
0800176E  6700 0038 2848          beq       vsprintf_96
08001772  6E00 0144 2849          bgt       vsprintf_80
08001776  0C80 0000 2850          cmp.l     #111,D0
0800177A  006F      
0800177C  6710      2851          beq.s     vsprintf_82
0800177E  6000 0138 2852          bra       vsprintf_80
                    2853   vsprintf_95:
08001782  0C80 0000 2854          cmp.l     #120,D0
08001786  0078      
08001788  6704      2855          beq.s     vsprintf_82
0800178A  6000 012C 2856          bra       vsprintf_80
                    2857   vsprintf_82:
0800178E  4A2E FFD2 2858          tst.b     -46(A6)
08001792  6714      2859          beq.s     vsprintf_96
08001794  4A2E FFCD 2860          tst.b     -51(A6)
08001798  660E      2861          bne.s     vsprintf_96
0800179A  200D      2862          move.l    A5,D0
0800179C  9087      2863          sub.l     D7,D0
0800179E  4884      2864          ext.w     D4
080017A0  48C4      2865          ext.l     D4
080017A2  9084      2866          sub.l     D4,D0
080017A4  2D40 FFFC 2867          move.l    D0,-4(A6)
                    2868   vsprintf_96:
080017A8  202E FFFC 2869          move.l    -4(A6),D0
080017AC  0C80 0000 2870          cmp.l     #0,D0
080017B0  0000      
080017B2  6C04      2871          bge.s     vsprintf_98
080017B4  42AE FFFC 2872          clr.l     -4(A6)
                    2873   vsprintf_98:
080017B8  4A2E FFCD 2874          tst.b     -51(A6)
080017BC  6600 0030 2875          bne       vsprintf_104
080017C0  4884      2876          ext.w     D4
080017C2  48C4      2877          ext.l     D4
080017C4  2004      2878          move.l    D4,D0
080017C6  D0AE FFFC 2879          add.l     -4(A6),D0
080017CA  D087      2880          add.l     D7,D0
080017CC  1D40 FFD1 2881          move.b    D0,-47(A6)
                    2882   vsprintf_102:
080017D0  102E FFD1 2883          move.b    -47(A6),D0
080017D4  4880      2884          ext.w     D0
080017D6  48C0      2885          ext.l     D0
080017D8  220D      2886          move.l    A5,D1
080017DA  534D      2887          subq.w    #1,A5
080017DC  B081      2888          cmp.l     D1,D0
080017DE  6C0E      2889          bge.s     vsprintf_104
080017E0  4878 0020 2890          pea       32
080017E4  2F0A      2891          move.l    A2,-(A7)
080017E6  4E93      2892          jsr       (A3)
080017E8  504F      2893          addq.w    #8,A7
080017EA  5286      2894          addq.l    #1,D6
080017EC  60E2      2895          bra       vsprintf_102
                    2896   vsprintf_104:
080017EE  41EE FFD4 2897          lea       -44(A6),A0
080017F2  2408      2898          move.l    A0,D2
                    2899   vsprintf_105:
080017F4  2042      2900          move.l    D2,A0
080017F6  4A10      2901          tst.b     (A0)
080017F8  6716      2902          beq.s     vsprintf_107
080017FA  2042      2903          move.l    D2,A0
080017FC  5282      2904          addq.l    #1,D2
080017FE  1210      2905          move.b    (A0),D1
08001800  4881      2906          ext.w     D1
08001802  48C1      2907          ext.l     D1
08001804  2F01      2908          move.l    D1,-(A7)
08001806  2F0A      2909          move.l    A2,-(A7)
08001808  4E93      2910          jsr       (A3)
0800180A  504F      2911          addq.w    #8,A7
0800180C  5286      2912          addq.l    #1,D6
0800180E  60E4      2913          bra       vsprintf_105
                    2914   vsprintf_107:
08001810  202E FFFC 2915          move.l    -4(A6),D0
08001814  1D40 FFD1 2916          move.b    D0,-47(A6)
                    2917   vsprintf_108:
08001818  102E FFD1 2918          move.b    -47(A6),D0
0800181C  532E FFD1 2919          subq.b    #1,-47(A6)
08001820  4A00      2920          tst.b     D0
08001822  670E      2921          beq.s     vsprintf_110
08001824  4878 0030 2922          pea       48
08001828  2F0A      2923          move.l    A2,-(A7)
0800182A  4E93      2924          jsr       (A3)
0800182C  504F      2925          addq.w    #8,A7
0800182E  5286      2926          addq.l    #1,D6
08001830  60E6      2927          bra       vsprintf_108
                    2928   vsprintf_110:
08001832  2043      2929          move.l    D3,A0
08001834  4A10      2930          tst.b     (A0)
08001836  6700 0048 2931          beq       vsprintf_113
0800183A  206E 000C 2932          move.l    12(A6),A0
0800183E  1010      2933          move.b    (A0),D0
08001840  4880      2934          ext.w     D0
08001842  48C0      2935          ext.l     D0
08001844  0C80 0000 2936          cmp.l     #115,D0
08001848  0073      
0800184A  670C      2937          beq.s     vsprintf_116
0800184C  6E18      2938          bgt.s     vsprintf_119
0800184E  0C80 0000 2939          cmp.l     #99,D0
08001852  0063      
08001854  6702      2940          beq.s     vsprintf_116
08001856  600E      2941          bra.s     vsprintf_119
                    2942   vsprintf_116:
08001858  2005      2943          move.l    D5,D0
0800185A  5385      2944          subq.l    #1,D5
0800185C  0C80 0000 2945          cmp.l     #0,D0
08001860  0000      
08001862  6E02      2946          bgt.s     vsprintf_119
08001864  6016      2947          bra.s     vsprintf_115
                    2948   vsprintf_119:
08001866  2043      2949          move.l    D3,A0
08001868  5283      2950          addq.l    #1,D3
0800186A  1210      2951          move.b    (A0),D1
0800186C  4881      2952          ext.w     D1
0800186E  48C1      2953          ext.l     D1
08001870  2F01      2954          move.l    D1,-(A7)
08001872  2F0A      2955          move.l    A2,-(A7)
08001874  4E93      2956          jsr       (A3)
08001876  504F      2957          addq.w    #8,A7
08001878  5286      2958          addq.l    #1,D6
0800187A  6002      2959          bra.s     vsprintf_112
                    2960   vsprintf_115:
0800187C  6002      2961          bra.s     vsprintf_113
                    2962   vsprintf_112:
0800187E  60B2      2963          bra       vsprintf_110
                    2964   vsprintf_113:
08001880  4A2E FFCD 2965          tst.b     -51(A6)
08001884  6700 0030 2966          beq       vsprintf_125
08001888  4884      2967          ext.w     D4
0800188A  48C4      2968          ext.l     D4
0800188C  2004      2969          move.l    D4,D0
0800188E  D0AE FFFC 2970          add.l     -4(A6),D0
08001892  D087      2971          add.l     D7,D0
08001894  1D40 FFD1 2972          move.b    D0,-47(A6)
                    2973   vsprintf_123:
08001898  102E FFD1 2974          move.b    -47(A6),D0
0800189C  4880      2975          ext.w     D0
0800189E  48C0      2976          ext.l     D0
080018A0  220D      2977          move.l    A5,D1
080018A2  534D      2978          subq.w    #1,A5
080018A4  B081      2979          cmp.l     D1,D0
080018A6  6C0E      2980          bge.s     vsprintf_125
080018A8  4878 0020 2981          pea       32
080018AC  2F0A      2982          move.l    A2,-(A7)
080018AE  4E93      2983          jsr       (A3)
080018B0  504F      2984          addq.w    #8,A7
080018B2  5386      2985          subq.l    #1,D6
080018B4  60E2      2986          bra       vsprintf_123
                    2987   vsprintf_125:
080018B6  6014      2988          bra.s     vsprintf_81
                    2989   vsprintf_80:
080018B8  206E 000C 2990          move.l    12(A6),A0
080018BC  1210      2991          move.b    (A0),D1
080018BE  4881      2992          ext.w     D1
080018C0  48C1      2993          ext.l     D1
080018C2  2F01      2994          move.l    D1,-(A7)
080018C4  2F0A      2995          move.l    A2,-(A7)
080018C6  4E93      2996          jsr       (A3)
080018C8  504F      2997          addq.w    #8,A7
080018CA  5286      2998          addq.l    #1,D6
                    2999   vsprintf_81:
080018CC  52AE 000C 3000          addq.l    #1,12(A6)
                    3001   vsprintf_2:
080018D0  6000 F9D6 3002          bra       vsprintf_1
                    3003   vsprintf_3:
080018D4  4A92      3004          tst.l     (A2)
080018D6  6710      3005          beq.s     vsprintf_126
080018D8  4201      3006          clr.b     D1
080018DA  C2BC 0000 3007          and.l     #255,D1
080018DE  00FF      
080018E0  2F01      3008          move.l    D1,-(A7)
080018E2  2F0A      3009          move.l    A2,-(A7)
080018E4  4E93      3010          jsr       (A3)
080018E6  504F      3011          addq.w    #8,A7
                    3012   vsprintf_126:
080018E8  2006      3013          move.l    D6,D0
080018EA  4CDF 3CFC 3014          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
080018EE  4E5E      3015          unlk      A6
080018F0  4E75      3016          rts
                    3017   @itoa_convert:
080018F2  4E56 0000 3018          link      A6,#0
080018F6  48E7 3C00 3019          movem.l   D2/D3/D4/D5,-(A7)
080018FA  242E 0008 3020          move.l    8(A6),D2
080018FE  262E 0010 3021          move.l    16(A6),D3
08001902  2A2E 000C 3022          move.l    12(A6),D5
08001906  2F05      3023          move.l    D5,-(A7)
08001908  2F03      3024          move.l    D3,-(A7)
0800190A  6100 F754 3025          bsr       ULDIV
0800190E  202F 0004 3026          move.l    4(A7),D0
08001912  504F      3027          addq.w    #8,A7
08001914  2800      3028          move.l    D0,D4
08001916  BA83      3029          cmp.l     D3,D5
08001918  651A      3030          blo.s     @itoa_convert_1
0800191A  2F03      3031          move.l    D3,-(A7)
0800191C  2F05      3032          move.l    D5,-(A7)
0800191E  2F03      3033          move.l    D3,-(A7)
08001920  6100 F73E 3034          bsr       ULDIV
08001924  2217      3035          move.l    (A7),D1
08001926  504F      3036          addq.w    #8,A7
08001928  2F01      3037          move.l    D1,-(A7)
0800192A  2F02      3038          move.l    D2,-(A7)
0800192C  61C4      3039          bsr       @itoa_convert
0800192E  DEFC 000C 3040          add.w     #12,A7
08001932  2400      3041          move.l    D0,D2
                    3042   @itoa_convert_1:
08001934  0C84 0000 3043          cmp.l     #9,D4
08001938  0009      
0800193A  6E0A      3044          bgt.s     @itoa_convert_3
0800193C  2004      3045          move.l    D4,D0
0800193E  0680 0000 3046          add.l     #48,D0
08001942  0030      
08001944  600E      3047          bra.s     @itoa_convert_4
                    3048   @itoa_convert_3:
08001946  2004      3049          move.l    D4,D0
08001948  0680 0000 3050          add.l     #97,D0
0800194C  0061      
0800194E  0480 0000 3051          sub.l     #10,D0
08001952  000A      
                    3052   @itoa_convert_4:
08001954  2042      3053          move.l    D2,A0
08001956  1080      3054          move.b    D0,(A0)
08001958  2002      3055          move.l    D2,D0
0800195A  5280      3056          addq.l    #1,D0
0800195C  4CDF 003C 3057          movem.l   (A7)+,D2/D3/D4/D5
08001960  4E5E      3058          unlk      A6
08001962  4E75      3059          rts
                    3060   _ltoa:
08001964  4E56 0000 3061          link      A6,#0
08001968  48E7 3C00 3062          movem.l   D2/D3/D4/D5,-(A7)
0800196C  242E 0008 3063          move.l    8(A6),D2
08001970  262E 000C 3064          move.l    12(A6),D3
08001974  2A2E 0010 3065          move.l    16(A6),D5
08001978  2803      3066          move.l    D3,D4
0800197A  0C85 0000 3067          cmp.l     #2,D5
0800197E  0002      
08001980  6D08      3068          blt.s     ltoa_3
08001982  0C85 0000 3069          cmp.l     #36,D5
08001986  0024      
08001988  6F06      3070          ble.s     ltoa_1
                    3071   ltoa_3:
0800198A  2003      3072          move.l    D3,D0
0800198C  6000 0052 3073          bra       ltoa_4
                    3074   ltoa_1:
08001990  0C85 0000 3075          cmp.l     #10,D5
08001994  000A      
08001996  6600 0032 3076          bne       ltoa_5
0800199A  0C82 0000 3077          cmp.l     #0,D2
0800199E  0000      
080019A0  6C28      3078          bge.s     ltoa_5
080019A2  2002      3079          move.l    D2,D0
080019A4  4480      3080          neg.l     D0
080019A6  2400      3081          move.l    D0,D2
080019A8  0C82 0000 3082          cmp.l     #0,D2
080019AC  0000      
080019AE  6C12      3083          bge.s     ltoa_7
080019B0  4879 0800 3084          pea       @itoa_1
080019B4  1F7A      
080019B6  2F03      3085          move.l    D3,-(A7)
080019B8  6100 016E 3086          bsr       _strcpy
080019BC  504F      3087          addq.w    #8,A7
080019BE  2003      3088          move.l    D3,D0
080019C0  601E      3089          bra.s     ltoa_4
                    3090   ltoa_7:
080019C2  2044      3091          move.l    D4,A0
080019C4  5284      3092          addq.l    #1,D4
080019C6  10BC 002D 3093          move.b    #45,(A0)
                    3094   ltoa_5:
080019CA  2F05      3095          move.l    D5,-(A7)
080019CC  2F02      3096          move.l    D2,-(A7)
080019CE  2F04      3097          move.l    D4,-(A7)
080019D0  6100 FF20 3098          bsr       @itoa_convert
080019D4  DEFC 000C 3099          add.w     #12,A7
080019D8  2800      3100          move.l    D0,D4
080019DA  2044      3101          move.l    D4,A0
080019DC  4210      3102          clr.b     (A0)
080019DE  2003      3103          move.l    D3,D0
                    3104   ltoa_4:
080019E0  4CDF 003C 3105          movem.l   (A7)+,D2/D3/D4/D5
080019E4  4E5E      3106          unlk      A6
080019E6  4E75      3107          rts
                    3108   _ultoa:
080019E8  4E56 0000 3109          link      A6,#0
080019EC  48E7 3800 3110          movem.l   D2/D3/D4,-(A7)
080019F0  262E 0010 3111          move.l    16(A6),D3
080019F4  282E 000C 3112          move.l    12(A6),D4
080019F8  2404      3113          move.l    D4,D2
080019FA  0C83 0000 3114          cmp.l     #2,D3
080019FE  0002      
08001A00  6D08      3115          blt.s     ultoa_3
08001A02  0C83 0000 3116          cmp.l     #36,D3
08001A06  0024      
08001A08  6F04      3117          ble.s     ultoa_1
                    3118   ultoa_3:
08001A0A  2004      3119          move.l    D4,D0
08001A0C  6018      3120          bra.s     ultoa_4
                    3121   ultoa_1:
08001A0E  2F03      3122          move.l    D3,-(A7)
08001A10  2F2E 0008 3123          move.l    8(A6),-(A7)
08001A14  2F02      3124          move.l    D2,-(A7)
08001A16  6100 FEDA 3125          bsr       @itoa_convert
08001A1A  DEFC 000C 3126          add.w     #12,A7
08001A1E  2400      3127          move.l    D0,D2
08001A20  2042      3128          move.l    D2,A0
08001A22  4210      3129          clr.b     (A0)
08001A24  2004      3130          move.l    D4,D0
                    3131   ultoa_4:
08001A26  4CDF 001C 3132          movem.l   (A7)+,D2/D3/D4
08001A2A  4E5E      3133          unlk      A6
08001A2C  4E75      3134          rts
                    3135   _itoa:
08001A2E  4E56 0000 3136          link      A6,#0
08001A32  2F2E 0010 3137          move.l    16(A6),-(A7)
08001A36  2F2E 000C 3138          move.l    12(A6),-(A7)
08001A3A  2F2E 0008 3139          move.l    8(A6),-(A7)
08001A3E  6100 FF24 3140          bsr       _ltoa
08001A42  DEFC 000C 3141          add.w     #12,A7
08001A46  4E5E      3142          unlk      A6
08001A48  4E75      3143          rts
                    3144   ULMUL:
08001A4A  4E56 0000 3145          link    A6,#0
08001A4E  48E7 C000 3146          movem.l D0/D1,-(A7)
08001A52  222E 0008 3147          move.l  8(A6),D1
08001A56  202E 000C 3148          move.l  12(A6),D0
08001A5A  602C      3149          bra.s   lmul_3
                    3150   LMUL:
08001A5C  4E56 0000 3151          link    A6,#0
08001A60  48E7 C000 3152          movem.l D0/D1,-(A7)
08001A64  222E 0008 3153          move.l  8(A6),D1
08001A68  202E 000C 3154          move.l  12(A6),D0
08001A6C  4A80      3155          tst.l   D0
08001A6E  6A0A      3156          bpl.s   lmul_1
08001A70  4480      3157          neg.l   D0
08001A72  4A81      3158          tst.l   D1
08001A74  6A0A      3159          bpl.s   lmul_2
08001A76  4481      3160          neg.l   D1
08001A78  600E      3161          bra.s   lmul_3
                    3162   lmul_1:
08001A7A  4A81      3163          tst.l   D1
08001A7C  6A0A      3164          bpl.s   lmul_3
08001A7E  4481      3165          neg.l   D1
                    3166   lmul_2:
08001A80  6114      3167          bsr.s   domul
08001A82  4481      3168          neg.l   D1
08001A84  4080      3169          negx.l  D0
08001A86  6002      3170          bra.s   lmul_4
                    3171   lmul_3:
08001A88  610C      3172          bsr.s   domul
                    3173   lmul_4:
08001A8A  2D41 0008 3174          move.l  D1,8(A6)
08001A8E  4CDF 0003 3175          movem.l (A7)+,D0/D1
08001A92  4E5E      3176          unlk    A6
08001A94  4E75      3177          rts
                    3178   domul:
08001A96  0C81 0000 3179          cmpi.l  #$FFFF,D1
08001A9A  FFFF      
08001A9C  620C      3180          bhi.s   domul_1
08001A9E  0C80 0000 3181          cmpi.l  #$FFFF,D0
08001AA2  FFFF      
08001AA4  620E      3182          bhi.s   domul_2
08001AA6  C2C0      3183          mulu    D0,D1
08001AA8  4E75      3184          rts
                    3185   domul_1:
08001AAA  0C80 0000 3186          cmpi.l  #$FFFF,D0
08001AAE  FFFF      
08001AB0  6218      3187          bhi.s   domul_4
08001AB2  6002      3188          bra.s   domul_3
                    3189   domul_2
08001AB4  C141      3190          exg     D0,D1
                    3191   domul_3:
08001AB6  2F02      3192          move.l  D2,-(A7)
08001AB8  2401      3193          move.l  D1,D2
08001ABA  4842      3194          swap    D2
08001ABC  C2C0      3195          mulu    D0,D1
08001ABE  C4C0      3196          mulu    D0,D2
08001AC0  4842      3197          swap    D2
08001AC2  4242      3198          clr.w   D2
08001AC4  D282      3199          add.l   D2,D1
08001AC6  241F      3200          move.l  (A7)+,D2
08001AC8  4E75      3201          rts
                    3202   domul_4:
08001ACA  48E7 3000 3203          movem.l D2/D3,-(A7)
08001ACE  2401      3204          move.l  D1,D2
08001AD0  2601      3205          move.l  D1,D3
08001AD2  C2C0      3206          mulu    D0,D1
08001AD4  4842      3207          swap    D2
08001AD6  C4C0      3208          mulu    D0,D2
08001AD8  4840      3209          swap    D0
08001ADA  C6C0      3210          mulu    D0,D3
08001ADC  D483      3211          add.l   D3,D2
08001ADE  4842      3212          swap    D2
08001AE0  4242      3213          clr.w   D2
08001AE2  D282      3214          add.l   D2,D1
08001AE4  4CDF 000C 3215          movem.l (A7)+,D2/D3
08001AE8  4E75      3216          rts
                    3217   _strlen:
08001AEA  206F 0004 3218          move.l    (4,A7),A0
08001AEE  2248      3219          move.l    A0,A1
                    3220   strlen_1:
08001AF0  4A19      3221          tst.b     (A1)+
08001AF2  66FC      3222          bne       strlen_1
08001AF4  2009      3223          move.l    A1,D0
08001AF6  9088      3224          sub.l     A0,D0
08001AF8  5380      3225          subq.l    #1,D0
08001AFA  4E75      3226          rts
                    3227   _toupper:
08001AFC  4E56 0000 3228          link      A6,#0
08001B00  48E7 2000 3229          movem.l   D2,-(A7)
08001B04  242E 0008 3230          move.l    8(A6),D2
08001B08  0C82 0000 3231          cmp.l     #97,D2
08001B0C  0061      
08001B0E  6D0E      3232          blt.s     toupper_1
08001B10  0C82 0000 3233          cmp.l     #122,D2
08001B14  007A      
08001B16  6E06      3234          bgt.s     toupper_1
08001B18  C4BC 0000 3235          and.l     #95,D2
08001B1C  005F      
                    3236   toupper_1:
08001B1E  2002      3237          move.l    D2,D0
08001B20  4CDF 0004 3238          movem.l   (A7)+,D2
08001B24  4E5E      3239          unlk      A6
08001B26  4E75      3240          rts
                    3241   _strcpy:
08001B28  206F 0004 3242          move.l    (4,A7),A0
08001B2C  226F 0008 3243          move.l    (8,A7),A1
08001B30  2008      3244          move.l    A0,D0
                    3245   strcpy_1:
08001B32  10D9      3246          move.b    (A1)+,(A0)+
08001B34  66FC      3247          bne       strcpy_1
08001B36  4E75      3248          rts
                    3249          section   const
08001B38            3250                   align
                    3251   
                    3252   
                    3253   @lab5_1:
08001B38  0D0A 2043 3254          dc.b      13,10,32,67,104,97,110,103,105,110,103,32,115
08001B3C  6861 6E67 
08001B40  696E 6720 
08001B44  73        
08001B45  6C61 7665 3255          dc.b      108,97,118,101,32,97,110,100,32,114,101,115
08001B49  2061 6E64 
08001B4D  2072 6573 
08001B51  7461 7274 3256          dc.b      116,97,114,116,32,37,120,0
08001B55  2025 7800 
                    3257   @lab5_2:
08001B5A  0D0A 2048 3258          dc.b      13,10,32,72,73,84,32,69,68,71,69,32,67,65,83
08001B5E  4954 2045 
08001B62  4447 4520 
08001B66  4341 53   
08001B69  4520 2578 3259          dc.b      69,32,37,120,32,37,120,37,120,0
08001B6D  2025 7825 
08001B71  7800      
                    3260   @lab5_3:
08001B74  0D0A 2057 3261          dc.b      13,10,32,87,114,105,116,101,32,97,100,100,114
08001B78  7269 7465 
08001B7C  2061 6464 
08001B80  72        
08001B81  6573 7320 3262          dc.b      101,115,115,32,98,111,117,110,100,97,114,121
08001B85  626F 756E 
08001B89  6461 7279 
08001B8D  2C20 7265 3263          dc.b      44,32,114,101,115,116,97,114,116,105,110,103
08001B91  7374 6172 
08001B95  7469 6E67 
08001B99  2077 6974 3264          dc.b      32,119,105,116,104,111,117,116,32,99,104,97
08001B9D  686F 7574 
08001BA1  2063 6861 
08001BA5  6E67 696E 3265          dc.b      110,103,105,110,103,32,115,108,97,118,101,0
08001BA9  6720 736C 
08001BAD  6176 6500 
                    3266   @lab5_4:
08001BB2  0D0A 2D2D 3267          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
08001BB6  2D2D 2D2D 
08001BBA  2D2D 2D2D 
08001BBE  2D2D 2D   
08001BC1  2D00      3268          dc.b      45,0
                    3269   @lab5_5:
08001BC4  0D0A 6675 3270          dc.b      13,10,102,117,108,108,97,100,100,114,58,32,37
08001BC8  6C6C 6164 
08001BCC  6472 3A20 
08001BD0  25        
08001BD1  7800      3271          dc.b      120,0
                    3272   @lab5_6:
08001BD4  0D0A 6461 3273          dc.b      13,10,100,97,116,97,58,32,37,120,0
08001BD8  7461 3A20 
08001BDC  2578 00   
                    3274   @lab5_7:
08001BE0  0D0A 5365 3275          dc.b      13,10,83,101,108,101,99,116,32,98,97,110,107
08001BE4  6C65 6374 
08001BE8  2062 616E 
08001BEC  6B        
08001BED  3A0D 0A30 3276          dc.b      58,13,10,48,32,45,32,66,97,110,107,32,48,13
08001BF1  202D 2042 
08001BF5  616E 6B20 
08001BF9  300D      
08001BFB  0A31 202D 3277          dc.b      10,49,32,45,32,66,97,110,107,32,49,0
08001BFF  2042 616E 
08001C03  6B20 3100 
                    3278   @lab5_8:
08001C08  0D0A 496E 3279          dc.b      13,10,73,110,118,97,108,105,100,32,115,101,108
08001C0C  7661 6C69 
08001C10  6420 7365 
08001C14  6C        
08001C15  6563 7469 3280          dc.b      101,99,116,105,111,110,46,0
08001C19  6F6E 2E00 
                    3281   @lab5_9:
08001C1E  0D0A 456E 3282          dc.b      13,10,69,110,116,101,114,32,109,101,109,32,97
08001C22  7465 7220 
08001C26  6D65 6D20 
08001C2A  61        
08001C2B  6464 7265 3283          dc.b      100,100,114,101,115,115,32,104,105,58,0
08001C2F  7373 2068 
08001C33  693A 00   
                    3284   @lab5_10:
08001C36  0D0A 456E 3285          dc.b      13,10,69,110,116,101,114,32,109,101,109,32,97
08001C3A  7465 7220 
08001C3E  6D65 6D20 
08001C42  61        
08001C43  6464 7265 3286          dc.b      100,100,114,101,115,115,32,108,111,58,0
08001C47  7373 206C 
08001C4B  6F3A 00   
                    3287   @lab5_11:
08001C4E  0D0A 5468 3288          dc.b      13,10,84,104,101,114,109,105,115,116,111,114
08001C52  6572 6D69 
08001C56  7374 6F72 
08001C5A  3A20 2564 3289          dc.b      58,32,37,100,0
08001C5E  00        
                    3290   @lab5_12:
08001C60  0D0A 506F 3291          dc.b      13,10,80,111,116,101,110,116,105,111,109,101
08001C64  7465 6E74 
08001C68  696F 6D65 
08001C6C  7465 723A 3292          dc.b      116,101,114,58,32,37,100,0
08001C70  2025 6400 
                    3293   @lab5_13:
08001C74  0D0A 5068 3294          dc.b      13,10,80,104,111,116,111,114,101,115,105,115
08001C78  6F74 6F72 
08001C7C  6573 6973 
08001C80  746F 723A 3295          dc.b      116,111,114,58,32,37,100,0
08001C84  2025 6400 
                    3296   @lab5_14:
08001C88  0D0A 4C61 3297          dc.b      13,10,76,97,98,32,53,58,32,73,50,67,0
08001C8C  6220 353A 
08001C90  2049 3243 
08001C94  00        
                    3298   @lab5_15:
08001C96  0D0A 4368 3299          dc.b      13,10,67,104,111,111,115,101,32,116,104,101
08001C9A  6F6F 7365 
08001C9E  2074 6865 
08001CA2  2066 6F6C 3300          dc.b      32,102,111,108,108,111,119,105,110,103,58,13
08001CA6  6C6F 7769 
08001CAA  6E67 3A0D 
08001CAE  0A30 202D 3301          dc.b      10,48,32,45,32,87,114,105,116,101,32,66,121
08001CB2  2057 7269 
08001CB6  7465 2042 
08001CBA  79        
08001CBB  7465 0D0A 3302          dc.b      116,101,13,10,49,32,45,32,82,101,97,100,32,66
08001CBF  3120 2D20 
08001CC3  5265 6164 
08001CC7  2042      
08001CC9  7974 650D 3303          dc.b      121,116,101,13,10,50,32,45,32,80,97,103,101
08001CCD  0A32 202D 
08001CD1  2050 6167 
08001CD5  65        
08001CD6  2057 7269 3304          dc.b      32,87,114,105,116,101,13,10,51,32,45,32,80,97
08001CDA  7465 0D0A 
08001CDE  3320 2D20 
08001CE2  5061      
08001CE4  6765 2052 3305          dc.b      103,101,32,82,101,97,100,13,10,52,32,45,32,68
08001CE8  6561 640D 
08001CEC  0A34 202D 
08001CF0  2044      
08001CF2  4143 2042 3306          dc.b      65,67,32,66,108,105,110,107,121,32,76,69,68
08001CF6  6C69 6E6B 
08001CFA  7920 4C45 
08001CFE  44        
08001CFF  0D0A 3520 3307          dc.b      13,10,53,32,45,32,65,68,67,32,82,101,97,100
08001D03  2D20 4144 
08001D07  4320 5265 
08001D0B  6164      
08001D0D  00        3308          dc.b      0
                    3309   @lab5_16:
08001D0E  0D0A 456E 3310          dc.b      13,10,69,110,116,101,114,32,98,121,116,101,32
08001D12  7465 7220 
08001D16  6279 7465 
08001D1A  20        
08001D1B  746F 2077 3311          dc.b      116,111,32,119,114,105,116,101,58,32,0
08001D1F  7269 7465 
08001D23  3A20 00   
                    3312   @lab5_17:
08001D26  0D0A 5772 3313          dc.b      13,10,87,114,105,116,116,101,110,32,37,120,32
08001D2A  6974 7465 
08001D2E  6E20 2578 
08001D32  20        
08001D33  746F 2062 3314          dc.b      116,111,32,98,97,110,107,32,37,100,32,97,116
08001D37  616E 6B20 
08001D3B  2564 2061 
08001D3F  74        
08001D40  206D 656D 3315          dc.b      32,109,101,109,97,100,100,114,32,104,105,58
08001D44  6164 6472 
08001D48  2068 693A 
08001D4C  2025 7820 3316          dc.b      32,37,120,32,109,101,109,32,97,100,100,114,32
08001D50  6D65 6D20 
08001D54  6164 6472 
08001D58  20        
08001D59  6C6F 3A20 3317          dc.b      108,111,58,32,37,120,0
08001D5D  2578 00   
                    3318   @lab5_18:
08001D60  0D0A 5265 3319          dc.b      13,10,82,101,97,100,32,37,120,32,102,114,111
08001D64  6164 2025 
08001D68  7820 6672 
08001D6C  6F        
08001D6D  6D20 6261 3320          dc.b      109,32,98,97,110,107,32,37,100,32,97,116,32
08001D71  6E6B 2025 
08001D75  6420 6174 
08001D79  20        
08001D7A  6D65 6D61 3321          dc.b      109,101,109,97,100,100,114,32,104,105,58,32
08001D7E  6464 7220 
08001D82  6869 3A20 
08001D86  2578 206D 3322          dc.b      37,120,32,109,101,109,32,97,100,100,114,32,108
08001D8A  656D 2061 
08001D8E  6464 7220 
08001D92  6C        
08001D93  6F3A 2025 3323          dc.b      111,58,32,37,120,0
08001D97  7800      
                    3324   @lab5_19:
08001D9A  0D0A 6272 3325          dc.b      13,10,98,114,117,104,0
08001D9E  7568 00   
                    3326   @lab5_20:
08001DA2  0D0A 456E 3327          dc.b      13,10,69,110,116,101,114,32,115,105,122,101
08001DA6  7465 7220 
08001DAA  7369 7A65 
08001DAE  206F 6620 3328          dc.b      32,111,102,32,112,97,103,101,32,116,111,32,119
08001DB2  7061 6765 
08001DB6  2074 6F20 
08001DBA  77        
08001DBB  7269 7465 3329          dc.b      114,105,116,101,40,109,97,120,32,49,50,56,32
08001DBF  286D 6178 
08001DC3  2031 3238 
08001DC7  20        
08001DC8  696E 2068 3330          dc.b      105,110,32,104,101,120,32,61,61,32,48,120,55
08001DCC  6578 203D 
08001DD0  3D20 3078 
08001DD4  37        
08001DD5  4629 3A20 3331          dc.b      70,41,58,32,0
08001DD9  00        
                    3332   @lab5_21:
08001DDA  0D0A 5772 3333          dc.b      13,10,87,114,111,116,101,32,118,97,108,117,101
08001DDE  6F74 6520 
08001DE2  7661 6C75 
08001DE6  65        
08001DE7  7320 7374 3334          dc.b      115,32,115,116,97,114,116,105,110,103,32,97
08001DEB  6172 7469 
08001DEF  6E67 2061 
08001DF3  7420 6D65 3335          dc.b      116,32,109,101,109,97,100,100,114,32,48,120
08001DF7  6D61 6464 
08001DFB  7220 3078 
08001DFF  2578 2578 3336          dc.b      37,120,37,120,32,97,110,100,32,98,97,110,107
08001E03  2061 6E64 
08001E07  2062 616E 
08001E0B  6B        
08001E0C  2025 642C 3337          dc.b      32,37,100,44,32,116,111,116,97,108,32,115,105
08001E10  2074 6F74 
08001E14  616C 2073 
08001E18  69        
08001E19  7A65 3A20 3338          dc.b      122,101,58,32,37,120,13,10,68,97,116,97,58,32
08001E1D  2578 0D0A 
08001E21  4461 7461 
08001E25  3A20      
08001E27  00        3339          dc.b      0
                    3340   @lab5_22:
08001E28  2578 2000 3341          dc.b      37,120,32,0
                    3342   @lab5_23:
08001E2C  0D0A 456E 3343          dc.b      13,10,69,110,116,101,114,32,115,105,122,101
08001E30  7465 7220 
08001E34  7369 7A65 
08001E38  206F 6620 3344          dc.b      32,111,102,32,112,97,103,101,32,116,111,32,114
08001E3C  7061 6765 
08001E40  2074 6F20 
08001E44  72        
08001E45  6561 6428 3345          dc.b      101,97,100,40,109,97,120,32,49,50,56,32,105
08001E49  6D61 7820 
08001E4D  3132 3820 
08001E51  69        
08001E52  6E20 6865 3346          dc.b      110,32,104,101,120,32,61,61,32,48,120,55,70
08001E56  7820 3D3D 
08001E5A  2030 7837 
08001E5E  46        
08001E5F  293A 2000 3347          dc.b      41,58,32,0
                    3348   @lab5_24:
08001E64  0D0A 5265 3349          dc.b      13,10,82,101,97,100,32,118,97,108,117,101,115
08001E68  6164 2076 
08001E6C  616C 7565 
08001E70  73        
08001E71  2073 7461 3350          dc.b      32,115,116,97,114,116,105,110,103,32,97,116
08001E75  7274 696E 
08001E79  6720 6174 
08001E7D  206D 656D 3351          dc.b      32,109,101,109,97,100,100,114,32,48,120,37,120
08001E81  6164 6472 
08001E85  2030 7825 
08001E89  78        
08001E8A  2578 2061 3352          dc.b      37,120,32,97,110,100,32,98,97,110,107,32,37
08001E8E  6E64 2062 
08001E92  616E 6B20 
08001E96  25        
08001E97  642C 2074 3353          dc.b      100,44,32,116,111,116,97,108,32,115,105,122
08001E9B  6F74 616C 
08001E9F  2073 697A 
08001EA3  653A 2025 3354          dc.b      101,58,32,37,120,13,10,68,97,116,97,58,32,0
08001EA7  780D 0A44 
08001EAB  6174 613A 
08001EAF  2000      
                    3355   @lab5_25:
08001EB2  2578 00   3356          dc.b      37,120,0
                    3357   @lab5_26:
08001EB6  0D0A 4441 3358          dc.b      13,10,68,65,67,32,66,108,105,110,107,121,46
08001EBA  4320 426C 
08001EBE  696E 6B79 
08001EC2  2E        
08001EC3  2E2E 2066 3359          dc.b      46,46,32,102,114,101,113,117,101,110,99,121
08001EC7  7265 7175 
08001ECB  656E 6379 
08001ECF  206F 6620 3360          dc.b      32,111,102,32,98,108,105,110,107,121,32,105
08001ED3  626C 696E 
08001ED7  6B79 2069 
08001EDB  733A 200D 3361          dc.b      115,58,32,13,10,79,78,32,45,32,50,53,48,109
08001EDF  0A4F 4E20 
08001EE3  2D20 3235 
08001EE7  306D      
08001EE9  7320 2D20 3362          dc.b      115,32,45,32,79,70,70,32,45,32,50,53,48,109
08001EED  4F46 4620 
08001EF1  2D20 3235 
08001EF5  306D      
08001EF7  730D 0A30 3363          dc.b      115,13,10,48,78,32,45,32,50,53,48,109,115,32
08001EFB  4E20 2D20 
08001EFF  3235 306D 
08001F03  7320      
08001F05  2D20 4F46 3364          dc.b      45,32,79,70,70,32,45,32,50,53,48,109,115,13
08001F09  4620 2D20 
08001F0D  3235 306D 
08001F11  730D      
08001F13  0A4F 4E20 3365          dc.b      10,79,78,32,45,32,55,53,48,109,115,32,45,32
08001F17  2D20 3735 
08001F1B  306D 7320 
08001F1F  2D20      
08001F21  4F46 4620 3366          dc.b      79,70,70,32,45,32,55,53,48,109,115,13,10,82
08001F25  2D20 3735 
08001F29  306D 730D 
08001F2D  0A52      
08001F2F  6570 6561 3367          dc.b      101,112,101,97,116,32,102,111,114,101,118,101
08001F33  7420 666F 
08001F37  7265 7665 
08001F3B  720D 0A00 3368          dc.b      114,13,10,0
                    3369   @lab5_27:
08001F40  0D0A 4144 3370          dc.b      13,10,65,68,67,32,67,104,97,110,110,101,108
08001F44  4320 4368 
08001F48  616E 6E65 
08001F4C  6C        
08001F4D  204F 7574 3371          dc.b      32,79,117,116,112,117,116,58,0
08001F51  7075 743A 
08001F55  00        
                    3372   @lab5_28:
08001F56  0D0A 496E 3373          dc.b      13,10,73,110,118,97,108,105,100,32,83,101,108
08001F5A  7661 6C69 
08001F5E  6420 5365 
08001F62  6C        
08001F63  6563 7469 3374          dc.b      101,99,116,105,111,110,46,13,10,0
08001F67  6F6E 2E0D 
08001F6B  0A00      
                    3375          section   data
08001F6E            3376                   align
                    3377   
                    3378   *********************************************************************************************************************************************************
                    3379   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    3380   ********************************************************************************************************************************************************
                    3381   
          0800 1F6E 3382   DataStart       equ       *
08001F6E            3383   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
08001F72            3384   __allocp:       ds.l      1                    start of free memory block list
08001F76            3385   __heap:         ds.l      1                    begin of free memory
                    3386   
                    3387   
                    3388   @itoa_1:
08001F7A  2D32 3134 3389          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
08001F7E  3734 3833 
08001F82  3634 3800 
                    3390          section   bss
08001F86            3391                   align
                    3392   
          0800 1F86 3393   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 0018 3394   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    3395   
                    3396   *********************************************************************************************************
                    3397   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    3398   *********************************************************************************************************
          0800 1F86 3399   BssStart       equ       *
                    3400   
                    3401   _i:
08001F86            3402          ds.b      4
                    3403   _x:
08001F8A            3404          ds.b      4
                    3405   _y:
08001F8E            3406          ds.b      4
                    3407   _z:
08001F92            3408          ds.b      4
                    3409   _PortA_Count:
08001F96            3410          ds.b      4
                    3411   _Timer1Count:
08001F9A            3412          ds.b      1
                    3413   _Timer2Count:
08001F9C            3414          ds.b      1
                    3415   _Timer3Count:
08001F9E            3416          ds.b      1
                    3417   _Timer4Count:
08001FA0            3418          ds.b      1
                    3419          section   heap
08001FA2            3420                  align
                    3421   
          0800 1FA2 3422   BssEnd         equ       *
          0000 001C 3423   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    3424   
                    3425   *********************************************************************************************************
                    3426   * Section for Heap
                    3427   *********************************************************************************************************
                    3428   
          0800 1FA2 3429   heap           equ       *
08001FA2            3430                  align
          0800 0000

Assembly errors: 0
