680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 23 Mar 2022      Time: 21:09:16          Source: C:\USERS\MARTINCHUA\DESKTOP\CPEN412\CPEN412\LAB5\M68KUSERPROGRAM.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  1C02      
0800000A  203C 0000   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  001C      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  1BEA      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  1BEE      
0800002C  23FC 0800   40                   move.l    #heap,__heap           pointer to free memory
08000030  1C1E 0800 
08000034  1BF2      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  097C      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; C:\USERS\MARTINCHUA\DESKTOP\CPEN412\CPEN412\LAB5\M68KUSERPROGRAM (DE1).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdio.h>
                      46   ; #include <string.h>
                      47   ; #include <ctype.h>
                      48   ; //IMPORTANT
                      49   ; //
                      50   ; // Uncomment one of the two #defines below
                      51   ; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
                      52   ; // 0B000000 for running programs from dram
                      53   ; //
                      54   ; // In your labs, you will initially start by designing a system with SRam and later move to
                      55   ; // Dram, so these constants will need to be changed based on the version of the system you have
                      56   ; // building
                      57   ; //
                      58   ; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
                      59   ; // is based around Dram so #define accordingly before building
                      60   ; // #define StartOfExceptionVectorTable 0x08030000
                      61   ; #define StartOfExceptionVectorTable 0x0B000000
                      62   ; /**********************************************************************************************
                      63   ; **	Parallel port addresses
                      64   ; **********************************************************************************************/
                      65   ; #define PortA   *(volatile unsigned char *)(0x00400000)
                      66   ; #define PortB   *(volatile unsigned char *)(0x00400002)
                      67   ; #define PortC   *(volatile unsigned char *)(0x00400004)
                      68   ; #define PortD   *(volatile unsigned char *)(0x00400006)
                      69   ; #define PortE   *(volatile unsigned char *)(0x00400008)
                      70   ; /*********************************************************************************************
                      71   ; **	Hex 7 seg displays port addresses
                      72   ; *********************************************************************************************/
                      73   ; #define HEX_A        *(volatile unsigned char *)(0x00400010)
                      74   ; #define HEX_B        *(volatile unsigned char *)(0x00400012)
                      75   ; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
                      76   ; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
                      77   ; /**********************************************************************************************
                      78   ; **	LCD display port addresses
                      79   ; **********************************************************************************************/
                      80   ; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
                      81   ; #define LCDdata      *(volatile unsigned char *)(0x00400022)
                      82   ; /********************************************************************************************
                      83   ; **	Timer Port addresses
                      84   ; *********************************************************************************************/
                      85   ; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
                      86   ; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
                      87   ; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
                      88   ; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
                      89   ; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
                      90   ; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
                      91   ; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
                      92   ; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
                      93   ; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
                      94   ; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
                      95   ; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
                      96   ; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
                      97   ; /*********************************************************************************************
                      98   ; **	RS232 port addresses
                      99   ; *********************************************************************************************/
                     100   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                     101   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                     102   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                     103   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                     104   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                     105   ; /*********************************************************************************************
                     106   ; **	PIA 1 and 2 port addresses
                     107   ; *********************************************************************************************/
                     108   ; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
                     109   ; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
                     110   ; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
                     111   ; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
                     112   ; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
                     113   ; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
                     114   ; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
                     115   ; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
                     116   ; /*************************************************************
                     117   ; ** I2C Controller registers
                     118   ; **************************************************************/
                     119   ; // I2C Registers
                     120   ; #define I2C_PRERLO     (*(volatile unsigned char *)(0x00408000))
                     121   ; #define I2C_PRERHI     (*(volatile unsigned char *)(0x00408002))
                     122   ; #define I2C_CTR        (*(volatile unsigned char *)(0x00408004))
                     123   ; #define I2C_TXR        (*(volatile unsigned char *)(0x00408006))
                     124   ; #define I2C_RXR        (*(volatile unsigned char *)(0x00408006))
                     125   ; #define I2C_CR         (*(volatile unsigned char *)(0x00408008))
                     126   ; #define I2C_SR         (*(volatile unsigned char *)(0x00408008))
                     127   ; // STA bit == cmd[7], W bit == cmd[4], IACK bit == cmd[0] -> 8'b1001_0001
                     128   ; #define WSTART 0x91
                     129   ; // STO bit == cmd[6], W bit == cmd[4] -> 8'b0101_0000
                     130   ; #define WSTOP 0x50
                     131   ; // W bit = cmd[4] -> 8'b0001_0000
                     132   ; #define WRITE 0x10
                     133   ; // R bit == cmd[5], NACK bit == cmd[3], IACK bit == cmd[0] -> 8'b0010_1001
                     134   ; #define READNACK 0x29
                     135   ; // R bit == cmd[5], NACK bit == cmd[3], IACK bit == cmd[0] -> 8'b0010_0001
                     136   ; #define READACK 0x21
                     137   ; /*********************************************************************************************************************************
                     138   ; (( DO NOT initialise global variables here, do it main even if you want 0
                     139   ; (( it's a limitation of the compiler
                     140   ; (( YOU HAVE BEEN WARNED
                     141   ; *********************************************************************************************************************************/
                     142   ; unsigned int i, x, y, z, PortA_Count;
                     143   ; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count ;
                     144   ; /*******************************************************************************************
                     145   ; ** Function Prototypes
                     146   ; *******************************************************************************************/
                     147   ; void Wait1ms(void);
                     148   ; void Wait3ms(void);
                     149   ; void Init_LCD(void) ;
                     150   ; void LCDOutchar(int c);
                     151   ; void LCDOutMess(char *theMessage);
                     152   ; void LCDClearln(void);
                     153   ; void LCDline1Message(char *theMessage);
                     154   ; void LCDline2Message(char *theMessage);
                     155   ; int sprintf(char *out, const char *format, ...) ;
                     156   ; // I2C
                     157   ; void I2C_Init(void);
                     158   ; void I2C_Start(void);
                     159   ; void I2C_Stop(void);
                     160   ; void WaitForTIPFlagReset(void);
                     161   ; void WaitForRxACK(void);
                     162   ; void WriteI2CChar(char data, char slave_addr, char memaddr_hi, char memaddr_lo);
                     163   ; void ReadI2CChar(char *data, char slave_addr, char memaddr_hi, char memaddr_lo);
                     164   ; void WriteI2CPage(char slave_addr, char memaddr_hi, char memaddr_lo, char size);
                     165   ; void ReadI2CPage(char *data, char slave_addr, char memaddr_hi, char memaddr_lo, char size);
                     166   ; void GetMemAddr(char *hi, char *lo);
                     167   ; void GetBank(char *bank);
                     168   ; void Wait(void);
                     169   ; /*****************************************************************************************
                     170   ; **	Interrupt service routine for Timers
                     171   ; **
                     172   ; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
                     173   ; **  out which timer is producing the interrupt
                     174   ; **
                     175   ; *****************************************************************************************/
                     176   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     177   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     178   ; char xtod(int c)
                     179   ; {
                     180   _xtod:
0800003E  4E56 0000  181          link      A6,#0
08000042  2F02       182          move.l    D2,-(A7)
08000044  242E 0008  183          move.l    8(A6),D2
                     184   ; if ((char)(c) <= (char)('9'))
08000048  0C02 0039  185          cmp.b     #57,D2
0800004C  6E08       186          bgt.s     xtod_1
                     187   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
0800004E  1002       188          move.b    D2,D0
08000050  0400 0030  189          sub.b     #48,D0
08000054  6014       190          bra.s     xtod_3
                     191   xtod_1:
                     192   ; else if((char)(c) > (char)('F'))    // assume lower case
08000056  0C02 0046  193          cmp.b     #70,D2
0800005A  6F08       194          ble.s     xtod_4
                     195   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
0800005C  1002       196          move.b    D2,D0
0800005E  0400 0057  197          sub.b     #87,D0
08000062  6006       198          bra.s     xtod_3
                     199   xtod_4:
                     200   ; else
                     201   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
08000064  1002       202          move.b    D2,D0
08000066  0400 0037  203          sub.b     #55,D0
                     204   xtod_3:
0800006A  241F       205          move.l    (A7)+,D2
0800006C  4E5E       206          unlk      A6
0800006E  4E75       207          rts
                     208   ; }
                     209   ; int Get2HexDigits(char *CheckSumPtr)
                     210   ; {
                     211   _Get2HexDigits:
08000070  4E56 0000  212          link      A6,#0
08000074  2F02       213          move.l    D2,-(A7)
                     214   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
08000076  2F00       215          move.l    D0,-(A7)
08000078  4EB9 0800  216          jsr       __getch
0800007C  027A      
0800007E  2200       217          move.l    D0,D1
08000080  201F       218          move.l    (A7)+,D0
08000082  2F01       219          move.l    D1,-(A7)
08000084  4EB9 0800  220          jsr       _xtod
08000088  003E      
0800008A  584F       221          addq.w    #4,A7
0800008C  C0BC 0000  222          and.l     #255,D0
08000090  00FF      
08000092  E980       223          asl.l     #4,D0
08000094  2F00       224          move.l    D0,-(A7)
08000096  2F01       225          move.l    D1,-(A7)
08000098  4EB9 0800  226          jsr       __getch
0800009C  027A      
0800009E  221F       227          move.l    (A7)+,D1
080000A0  2F00       228          move.l    D0,-(A7)
080000A2  4EB9 0800  229          jsr       _xtod
080000A6  003E      
080000A8  584F       230          addq.w    #4,A7
080000AA  2200       231          move.l    D0,D1
080000AC  201F       232          move.l    (A7)+,D0
080000AE  C2BC 0000  233          and.l     #255,D1
080000B2  00FF      
080000B4  8081       234          or.l      D1,D0
080000B6  2400       235          move.l    D0,D2
                     236   ; if(CheckSumPtr)
080000B8  4AAE 0008  237          tst.l     8(A6)
080000BC  6706       238          beq.s     Get2HexDigits_1
                     239   ; *CheckSumPtr += i ;
080000BE  206E 0008  240          move.l    8(A6),A0
080000C2  D510       241          add.b     D2,(A0)
                     242   Get2HexDigits_1:
                     243   ; return i ;
080000C4  2002       244          move.l    D2,D0
080000C6  241F       245          move.l    (A7)+,D2
080000C8  4E5E       246          unlk      A6
080000CA  4E75       247          rts
                     248   ; }
                     249   ; int Get4HexDigits(char *CheckSumPtr)
                     250   ; {
                     251   _Get4HexDigits:
080000CC  4E56 0000  252          link      A6,#0
                     253   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000D0  2F2E 0008  254          move.l    8(A6),-(A7)
080000D4  4EB9 0800  255          jsr       _Get2HexDigits
080000D8  0070      
080000DA  584F       256          addq.w    #4,A7
080000DC  E180       257          asl.l     #8,D0
080000DE  2F00       258          move.l    D0,-(A7)
080000E0  2F2E 0008  259          move.l    8(A6),-(A7)
080000E4  4EB9 0800  260          jsr       _Get2HexDigits
080000E8  0070      
080000EA  584F       261          addq.w    #4,A7
080000EC  2200       262          move.l    D0,D1
080000EE  201F       263          move.l    (A7)+,D0
080000F0  8081       264          or.l      D1,D0
080000F2  4E5E       265          unlk      A6
080000F4  4E75       266          rts
                     267   ; }
                     268   ; int Get6HexDigits(char *CheckSumPtr)
                     269   ; {
                     270   _Get6HexDigits:
080000F6  4E56 0000  271          link      A6,#0
                     272   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000FA  2F2E 0008  273          move.l    8(A6),-(A7)
080000FE  4EB9 0800  274          jsr       _Get4HexDigits
08000102  00CC      
08000104  584F       275          addq.w    #4,A7
08000106  E180       276          asl.l     #8,D0
08000108  2F00       277          move.l    D0,-(A7)
0800010A  2F2E 0008  278          move.l    8(A6),-(A7)
0800010E  4EB9 0800  279          jsr       _Get2HexDigits
08000112  0070      
08000114  584F       280          addq.w    #4,A7
08000116  2200       281          move.l    D0,D1
08000118  201F       282          move.l    (A7)+,D0
0800011A  8081       283          or.l      D1,D0
0800011C  4E5E       284          unlk      A6
0800011E  4E75       285          rts
                     286   ; }
                     287   ; int Get8HexDigits(char *CheckSumPtr)
                     288   ; {
                     289   _Get8HexDigits:
08000120  4E56 0000  290          link      A6,#0
                     291   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
08000124  2F2E 0008  292          move.l    8(A6),-(A7)
08000128  4EB9 0800  293          jsr       _Get4HexDigits
0800012C  00CC      
0800012E  584F       294          addq.w    #4,A7
08000130  E180       295          asl.l     #8,D0
08000132  E180       296          asl.l     #8,D0
08000134  2F00       297          move.l    D0,-(A7)
08000136  2F2E 0008  298          move.l    8(A6),-(A7)
0800013A  4EB9 0800  299          jsr       _Get4HexDigits
0800013E  00CC      
08000140  584F       300          addq.w    #4,A7
08000142  2200       301          move.l    D0,D1
08000144  201F       302          move.l    (A7)+,D0
08000146  8081       303          or.l      D1,D0
08000148  4E5E       304          unlk      A6
0800014A  4E75       305          rts
                     306   ; }
                     307   ; void Timer_ISR()
                     308   ; {
                     309   _Timer_ISR:
                     310   ; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
0800014C  1039 0040  311          move.b    4194354,D0
08000150  0032      
08000152  0C00 0001  312          cmp.b     #1,D0
08000156  661A       313          bne.s     Timer_ISR_1
                     314   ; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
08000158  13FC 0003  315          move.b    #3,4194354
0800015C  0040 0032 
                     316   ; PortA = Timer1Count++ ;     // increment an LED count on PortA with each tick of Timer 1
08000160  1039 0800  317          move.b    _Timer1Count.L,D0
08000164  1C16      
08000166  5239 0800  318          addq.b    #1,_Timer1Count.L
0800016A  1C16      
0800016C  13C0 0040  319          move.b    D0,4194304
08000170  0000      
                     320   Timer_ISR_1:
                     321   ; }
                     322   ; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
08000172  1039 0040  323          move.b    4194358,D0
08000176  0036      
08000178  0C00 0001  324          cmp.b     #1,D0
0800017C  661A       325          bne.s     Timer_ISR_3
                     326   ; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0800017E  13FC 0003  327          move.b    #3,4194358
08000182  0040 0036 
                     328   ; PortC = Timer2Count++ ;     // increment an LED count on PortC with each tick of Timer 2
08000186  1039 0800  329          move.b    _Timer2Count.L,D0
0800018A  1C18      
0800018C  5239 0800  330          addq.b    #1,_Timer2Count.L
08000190  1C18      
08000192  13C0 0040  331          move.b    D0,4194308
08000196  0004      
                     332   Timer_ISR_3:
                     333   ; }
                     334   ; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
08000198  1039 0040  335          move.b    4194362,D0
0800019C  003A      
0800019E  0C00 0001  336          cmp.b     #1,D0
080001A2  661A       337          bne.s     Timer_ISR_5
                     338   ; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080001A4  13FC 0003  339          move.b    #3,4194362
080001A8  0040 003A 
                     340   ; HEX_A = Timer3Count++ ;     // increment a HEX count on Port HEX_A with each tick of Timer 3
080001AC  1039 0800  341          move.b    _Timer3Count.L,D0
080001B0  1C1A      
080001B2  5239 0800  342          addq.b    #1,_Timer3Count.L
080001B6  1C1A      
080001B8  13C0 0040  343          move.b    D0,4194320
080001BC  0010      
                     344   Timer_ISR_5:
                     345   ; }
                     346   ; if(Timer4Status == 1) {         // Did Timer 4 produce the Interrupt?
080001BE  1039 0040  347          move.b    4194366,D0
080001C2  003E      
080001C4  0C00 0001  348          cmp.b     #1,D0
080001C8  661A       349          bne.s     Timer_ISR_7
                     350   ; Timer4Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080001CA  13FC 0003  351          move.b    #3,4194366
080001CE  0040 003E 
                     352   ; HEX_B = Timer4Count++ ;     // increment a HEX count on HEX_B with each tick of Timer 4
080001D2  1039 0800  353          move.b    _Timer4Count.L,D0
080001D6  1C1C      
080001D8  5239 0800  354          addq.b    #1,_Timer4Count.L
080001DC  1C1C      
080001DE  13C0 0040  355          move.b    D0,4194322
080001E2  0012      
                     356   Timer_ISR_7:
080001E4  4E75       357          rts
                     358   ; }
                     359   ; }
                     360   ; /*****************************************************************************************
                     361   ; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
                     362   ; **  Add your code here to poll Status register and clear interrupt
                     363   ; *****************************************************************************************/
                     364   ; void ACIA_ISR()
                     365   ; {}
                     366   _ACIA_ISR:
080001E6  4E75       367          rts
                     368   ; /***************************************************************************************
                     369   ; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
                     370   ; **  Add your code here to poll Status register and clear interrupt
                     371   ; *****************************************************************************************/
                     372   ; void PIA_ISR()
                     373   ; {}
                     374   _PIA_ISR:
080001E8  4E75       375          rts
                     376   ; /***********************************************************************************
                     377   ; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
                     378   ; ************************************************************************************/
                     379   ; void Key2PressISR()
                     380   ; {}
                     381   _Key2PressISR:
080001EA  4E75       382          rts
                     383   ; /***********************************************************************************
                     384   ; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
                     385   ; ************************************************************************************/
                     386   ; void Key1PressISR()
                     387   ; {}
                     388   _Key1PressISR:
080001EC  4E75       389          rts
                     390   ; /************************************************************************************
                     391   ; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
                     392   ; ************************************************************************************/
                     393   ; void Wait1ms(void)
                     394   ; {
                     395   _Wait1ms:
080001EE  2F02       396          move.l    D2,-(A7)
                     397   ; int  i ;
                     398   ; for(i = 0; i < 1000; i ++)
080001F0  4282       399          clr.l     D2
                     400   Wait1ms_1:
080001F2  0C82 0000  401          cmp.l     #1000,D2
080001F6  03E8      
080001F8  6C04       402          bge.s     Wait1ms_3
080001FA  5282       403          addq.l    #1,D2
080001FC  60F4       404          bra       Wait1ms_1
                     405   Wait1ms_3:
080001FE  241F       406          move.l    (A7)+,D2
08000200  4E75       407          rts
                     408   ; ;
                     409   ; }
                     410   ; /************************************************************************************
                     411   ; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
                     412   ; **************************************************************************************/
                     413   ; void Wait3ms(void)
                     414   ; {
                     415   _Wait3ms:
08000202  2F02       416          move.l    D2,-(A7)
                     417   ; int i ;
                     418   ; for(i = 0; i < 3; i++)
08000204  4282       419          clr.l     D2
                     420   Wait3ms_1:
08000206  0C82 0000  421          cmp.l     #3,D2
0800020A  0003      
0800020C  6C0A       422          bge.s     Wait3ms_3
                     423   ; Wait1ms() ;
0800020E  4EB9 0800  424          jsr       _Wait1ms
08000212  01EE      
08000214  5282       425          addq.l    #1,D2
08000216  60EE       426          bra       Wait3ms_1
                     427   Wait3ms_3:
08000218  241F       428          move.l    (A7)+,D2
0800021A  4E75       429          rts
                     430   ; }
                     431   ; /*********************************************************************************************
                     432   ; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
                     433   ; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
                     434   ; *********************************************************************************************/
                     435   ; void Init_LCD(void)
                     436   ; {
                     437   _Init_LCD:
                     438   ; LCDcommand = 0x0c ;
0800021C  13FC 000C  439          move.b    #12,4194336
08000220  0040 0020 
                     440   ; Wait3ms() ;
08000224  4EB9 0800  441          jsr       _Wait3ms
08000228  0202      
                     442   ; LCDcommand = 0x38 ;
0800022A  13FC 0038  443          move.b    #56,4194336
0800022E  0040 0020 
                     444   ; Wait3ms() ;
08000232  4EB9 0800  445          jsr       _Wait3ms
08000236  0202      
08000238  4E75       446          rts
                     447   ; }
                     448   ; /*********************************************************************************************
                     449   ; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     450   ; *********************************************************************************************/
                     451   ; void Init_RS232(void)
                     452   ; {
                     453   _Init_RS232:
                     454   ; RS232_Control = 0x15 ; //  %00010101 set up 6850 uses divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
0800023A  13FC 0015  455          move.b    #21,4194368
0800023E  0040 0040 
                     456   ; RS232_Baud = 0x1 ;      // program baud rate generator 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
08000242  13FC 0001  457          move.b    #1,4194372
08000246  0040 0044 
0800024A  4E75       458          rts
                     459   ; }
                     460   ; /*********************************************************************************************************
                     461   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     462   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     463   ; **  to allow the board to communicate with HyperTerminal Program
                     464   ; **
                     465   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     466   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     467   ; **  call _putch() also
                     468   ; *********************************************************************************************************/
                     469   ; int _putch( int c)
                     470   ; {
                     471   __putch:
0800024C  4E56 0000  472          link      A6,#0
                     473   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     474   _putch_1:
08000250  1039 0040  475          move.b    4194368,D0
08000254  0040      
08000256  C03C 0002  476          and.b     #2,D0
0800025A  0C00 0002  477          cmp.b     #2,D0
0800025E  6702       478          beq.s     _putch_3
08000260  60EE       479          bra       _putch_1
                     480   _putch_3:
                     481   ; ;
                     482   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
08000262  202E 0008  483          move.l    8(A6),D0
08000266  C0BC 0000  484          and.l     #127,D0
0800026A  007F      
0800026C  13C0 0040  485          move.b    D0,4194370
08000270  0042      
                     486   ; return c ;                                              // putchar() expects the character to be returned
08000272  202E 0008  487          move.l    8(A6),D0
08000276  4E5E       488          unlk      A6
08000278  4E75       489          rts
                     490   ; }
                     491   ; /*********************************************************************************************************
                     492   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     493   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     494   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     495   ; **
                     496   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     497   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
                     498   ; **  call _getch() also
                     499   ; *********************************************************************************************************/
                     500   ; int _getch( void )
                     501   ; {
                     502   __getch:
0800027A  4E56 FFFC  503          link      A6,#-4
                     504   ; char c ;
                     505   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     506   _getch_1:
0800027E  1039 0040  507          move.b    4194368,D0
08000282  0040      
08000284  C03C 0001  508          and.b     #1,D0
08000288  0C00 0001  509          cmp.b     #1,D0
0800028C  6702       510          beq.s     _getch_3
0800028E  60EE       511          bra       _getch_1
                     512   _getch_3:
                     513   ; ;
                     514   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
08000290  1039 0040  515          move.b    4194370,D0
08000294  0042      
08000296  C0BC 0000  516          and.l     #255,D0
0800029A  00FF      
0800029C  C0BC 0000  517          and.l     #127,D0
080002A0  007F      
080002A2  4E5E       518          unlk      A6
080002A4  4E75       519          rts
                     520   ; }
                     521   ; /******************************************************************************
                     522   ; **  Subroutine to output a single character to the 2 row LCD display
                     523   ; **  It is assumed the character is an ASCII code and it will be displayed at the
                     524   ; **  current cursor position
                     525   ; *******************************************************************************/
                     526   ; void LCDOutchar(int c)
                     527   ; {
                     528   _LCDOutchar:
080002A6  4E56 0000  529          link      A6,#0
                     530   ; LCDdata = (char)(c);
080002AA  202E 0008  531          move.l    8(A6),D0
080002AE  13C0 0040  532          move.b    D0,4194338
080002B2  0022      
                     533   ; Wait1ms() ;
080002B4  4EB9 0800  534          jsr       _Wait1ms
080002B8  01EE      
080002BA  4E5E       535          unlk      A6
080002BC  4E75       536          rts
                     537   ; }
                     538   ; /**********************************************************************************
                     539   ; *subroutine to output a message at the current cursor position of the LCD display
                     540   ; ************************************************************************************/
                     541   ; void LCDOutMessage(char *theMessage)
                     542   ; {
                     543   _LCDOutMessage:
080002BE  4E56 FFFC  544          link      A6,#-4
                     545   ; char c ;
                     546   ; while((c = *theMessage++) != 0)     // output characters from the string until NULL
                     547   LCDOutMessage_1:
080002C2  206E 0008  548          move.l    8(A6),A0
080002C6  52AE 0008  549          addq.l    #1,8(A6)
080002CA  1D50 FFFF  550          move.b    (A0),-1(A6)
080002CE  1010       551          move.b    (A0),D0
080002D0  6714       552          beq.s     LCDOutMessage_3
                     553   ; LCDOutchar(c) ;
080002D2  122E FFFF  554          move.b    -1(A6),D1
080002D6  4881       555          ext.w     D1
080002D8  48C1       556          ext.l     D1
080002DA  2F01       557          move.l    D1,-(A7)
080002DC  4EB9 0800  558          jsr       _LCDOutchar
080002E0  02A6      
080002E2  584F       559          addq.w    #4,A7
080002E4  60DC       560          bra       LCDOutMessage_1
                     561   LCDOutMessage_3:
080002E6  4E5E       562          unlk      A6
080002E8  4E75       563          rts
                     564   ; }
                     565   ; /******************************************************************************
                     566   ; *subroutine to clear the line by issuing 24 space characters
                     567   ; *******************************************************************************/
                     568   ; void LCDClearln(void)
                     569   ; {
                     570   _LCDClearln:
080002EA  2F02       571          move.l    D2,-(A7)
                     572   ; int i ;
                     573   ; for(i = 0; i < 24; i ++)
080002EC  4282       574          clr.l     D2
                     575   LCDClearln_1:
080002EE  0C82 0000  576          cmp.l     #24,D2
080002F2  0018      
080002F4  6C10       577          bge.s     LCDClearln_3
                     578   ; LCDOutchar(' ') ;       // write a space char to the LCD display
080002F6  4878 0020  579          pea       32
080002FA  4EB9 0800  580          jsr       _LCDOutchar
080002FE  02A6      
08000300  584F       581          addq.w    #4,A7
08000302  5282       582          addq.l    #1,D2
08000304  60E8       583          bra       LCDClearln_1
                     584   LCDClearln_3:
08000306  241F       585          move.l    (A7)+,D2
08000308  4E75       586          rts
                     587   ; }
                     588   ; /******************************************************************************
                     589   ; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
                     590   ; *******************************************************************************/
                     591   ; void LCDLine1Message(char *theMessage)
                     592   ; {
                     593   _LCDLine1Message:
0800030A  4E56 0000  594          link      A6,#0
                     595   ; LCDcommand = 0x80 ;
0800030E  13FC 0080  596          move.b    #128,4194336
08000312  0040 0020 
                     597   ; Wait3ms();
08000316  4EB9 0800  598          jsr       _Wait3ms
0800031A  0202      
                     599   ; LCDClearln() ;
0800031C  4EB9 0800  600          jsr       _LCDClearln
08000320  02EA      
                     601   ; LCDcommand = 0x80 ;
08000322  13FC 0080  602          move.b    #128,4194336
08000326  0040 0020 
                     603   ; Wait3ms() ;
0800032A  4EB9 0800  604          jsr       _Wait3ms
0800032E  0202      
                     605   ; LCDOutMessage(theMessage) ;
08000330  2F2E 0008  606          move.l    8(A6),-(A7)
08000334  4EB9 0800  607          jsr       _LCDOutMessage
08000338  02BE      
0800033A  584F       608          addq.w    #4,A7
0800033C  4E5E       609          unlk      A6
0800033E  4E75       610          rts
                     611   ; }
                     612   ; /******************************************************************************
                     613   ; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
                     614   ; *******************************************************************************/
                     615   ; void LCDLine2Message(char *theMessage)
                     616   ; {
                     617   _LCDLine2Message:
08000340  4E56 0000  618          link      A6,#0
                     619   ; LCDcommand = 0xC0 ;
08000344  13FC 00C0  620          move.b    #192,4194336
08000348  0040 0020 
                     621   ; Wait3ms();
0800034C  4EB9 0800  622          jsr       _Wait3ms
08000350  0202      
                     623   ; LCDClearln() ;
08000352  4EB9 0800  624          jsr       _LCDClearln
08000356  02EA      
                     625   ; LCDcommand = 0xC0 ;
08000358  13FC 00C0  626          move.b    #192,4194336
0800035C  0040 0020 
                     627   ; Wait3ms() ;
08000360  4EB9 0800  628          jsr       _Wait3ms
08000364  0202      
                     629   ; LCDOutMessage(theMessage) ;
08000366  2F2E 0008  630          move.l    8(A6),-(A7)
0800036A  4EB9 0800  631          jsr       _LCDOutMessage
0800036E  02BE      
08000370  584F       632          addq.w    #4,A7
08000372  4E5E       633          unlk      A6
08000374  4E75       634          rts
                     635   ; }
                     636   ; void I2C_Start(void){
                     637   _I2C_Start:
                     638   ; // Start condition is 8'b1000_0000
                     639   ; I2C_CR = 0x80;
08000376  13FC 0080  640          move.b    #128,4227080
0800037A  0040 8008 
0800037E  4E75       641          rts
                     642   ; }
                     643   ; void I2C_Stop(void){
                     644   _I2C_Stop:
                     645   ; // Stop condition is 8'b0100_0000
                     646   ; I2C_CR = 0x40;
08000380  13FC 0040  647          move.b    #64,4227080
08000384  0040 8008 
08000388  4E75       648          rts
                     649   ; }
                     650   ; void I2C_Init(void){
                     651   _I2C_Init:
                     652   ; // Make sure I2C core is off
                     653   ; I2C_CTR = (char)0x00;
0800038A  4239 0040  654          clr.b     4227076
0800038E  8004      
                     655   ; // Prescale register clock, 25Mhz / (5 * 100KHz) - 1  -> 0x0031
                     656   ; I2C_PRERLO = (char)0x31;
08000390  13FC 0031  657          move.b    #49,4227072
08000394  0040 8000 
                     658   ; I2C_PRERHI = (char)0x00;
08000398  4239 0040  659          clr.b     4227074
0800039C  8002      
                     660   ; // Enable I2C Core, no interrupt enabled
                     661   ; // 8'b10xx_xxxx
                     662   ; I2C_CTR = (char)0x80;
0800039E  13FC 0080  663          move.b    #128,4227076
080003A2  0040 8004 
080003A6  4E75       664          rts
                     665   ; }
                     666   ; void WaitForRxACK(void){
                     667   _WaitForRxACK:
                     668   ; // Read RxACK bit from Status Register, should be '0'
                     669   ; // Status Register [7] == 0
                     670   ; while(((I2C_SR >> 7) & 1) == 1){
                     671   WaitForRxACK_1:
080003A8  1039 0040  672          move.b    4227080,D0
080003AC  8008      
080003AE  EE08       673          lsr.b     #7,D0
080003B0  C03C 0001  674          and.b     #1,D0
080003B4  0C00 0001  675          cmp.b     #1,D0
080003B8  6602       676          bne.s     WaitForRxACK_3
                     677   ; }
080003BA  60EC       678          bra       WaitForRxACK_1
                     679   WaitForRxACK_3:
080003BC  4E75       680          rts
                     681   ; }
                     682   ; void WaitForTIPFlagReset(void){
                     683   _WaitForTIPFlagReset:
                     684   ; // Status Register [1] == 0
                     685   ; while((I2C_SR >> 1) & 1){
                     686   WaitForTIPFlagReset_1:
080003BE  1039 0040  687          move.b    4227080,D0
080003C2  8008      
080003C4  E208       688          lsr.b     #1,D0
080003C6  C03C 0001  689          and.b     #1,D0
080003CA  6702       690          beq.s     WaitForTIPFlagReset_3
                     691   ; }
080003CC  60F0       692          bra       WaitForTIPFlagReset_1
                     693   WaitForTIPFlagReset_3:
080003CE  4E75       694          rts
                     695   ; }
                     696   ; void Wait(void){
                     697   _Wait:
                     698   ; WaitForTIPFlagReset();
080003D0  4EB9 0800  699          jsr       _WaitForTIPFlagReset
080003D4  03BE      
                     700   ; WaitForRxACK();
080003D6  4EB9 0800  701          jsr       _WaitForRxACK
080003DA  03A8      
080003DC  4E75       702          rts
                     703   ; }
                     704   ; void TransmitI2C(char data, char cr){
                     705   _TransmitI2C:
080003DE  4E56 0000  706          link      A6,#0
                     707   ; I2C_TXR = data;
080003E2  13EE 000B  708          move.b    11(A6),4227078
080003E6  0040 8006 
                     709   ; I2C_CR = cr;
080003EA  13EE 000F  710          move.b    15(A6),4227080
080003EE  0040 8008 
                     711   ; Wait();
080003F2  4EB9 0800  712          jsr       _Wait
080003F6  03D0      
080003F8  4E5E       713          unlk      A6
080003FA  4E75       714          rts
                     715   ; }
                     716   ; // Assumptions: addr is at most 7 bits wide
                     717   ; void WriteI2CChar(char data, char slave_addr, char memaddr_hi, char memaddr_lo){
                     718   _WriteI2CChar:
080003FC  4E56 0000  719          link      A6,#0
08000400  48E7 0030  720          movem.l   A2/A3,-(A7)
08000404  45F9 0800  721          lea       _TransmitI2C.L,A2
08000408  03DE      
0800040A  47F9 0800  722          lea       _printf.L,A3
0800040E  0E44      
                     723   ; printf("\r\n data is %d\r\n", data);
08000410  122E 000B  724          move.b    11(A6),D1
08000414  4881       725          ext.w     D1
08000416  48C1       726          ext.l     D1
08000418  2F01       727          move.l    D1,-(A7)
0800041A  4879 0800  728          pea       @m68kus~1_1.L
0800041E  18B0      
08000420  4E93       729          jsr       (A3)
08000422  504F       730          addq.w    #8,A7
                     731   ; printf("\r\n slaveaddr %x\r\n", slave_addr);
08000424  122E 000F  732          move.b    15(A6),D1
08000428  4881       733          ext.w     D1
0800042A  48C1       734          ext.l     D1
0800042C  2F01       735          move.l    D1,-(A7)
0800042E  4879 0800  736          pea       @m68kus~1_2.L
08000432  18C0      
08000434  4E93       737          jsr       (A3)
08000436  504F       738          addq.w    #8,A7
                     739   ; printf("\r\n memaddrhi is %d\r\n", memaddr_hi);
08000438  122E 0013  740          move.b    19(A6),D1
0800043C  4881       741          ext.w     D1
0800043E  48C1       742          ext.l     D1
08000440  2F01       743          move.l    D1,-(A7)
08000442  4879 0800  744          pea       @m68kus~1_3.L
08000446  18D2      
08000448  4E93       745          jsr       (A3)
0800044A  504F       746          addq.w    #8,A7
                     747   ; printf("\r\n memaddrlo is %d\r\n", memaddr_lo);
0800044C  122E 0017  748          move.b    23(A6),D1
08000450  4881       749          ext.w     D1
08000452  48C1       750          ext.l     D1
08000454  2F01       751          move.l    D1,-(A7)
08000456  4879 0800  752          pea       @m68kus~1_4.L
0800045A  18E8      
0800045C  4E93       753          jsr       (A3)
0800045E  504F       754          addq.w    #8,A7
                     755   ; // Check before doing anything
                     756   ; WaitForTIPFlagReset();
08000460  4EB9 0800  757          jsr       _WaitForTIPFlagReset
08000464  03BE      
                     758   ; // Set slave to write mode, Generate start command
                     759   ; TransmitI2C(slave_addr, WSTART);
08000466  4878 0091  760          pea       145
0800046A  122E 000F  761          move.b    15(A6),D1
0800046E  4881       762          ext.w     D1
08000470  48C1       763          ext.l     D1
08000472  2F01       764          move.l    D1,-(A7)
08000474  4E92       765          jsr       (A2)
08000476  504F       766          addq.w    #8,A7
                     767   ; // Write Mem Address and set W bit
                     768   ; TransmitI2C(memaddr_hi, WRITE);
08000478  4878 0010  769          pea       16
0800047C  122E 0013  770          move.b    19(A6),D1
08000480  4881       771          ext.w     D1
08000482  48C1       772          ext.l     D1
08000484  2F01       773          move.l    D1,-(A7)
08000486  4E92       774          jsr       (A2)
08000488  504F       775          addq.w    #8,A7
                     776   ; TransmitI2C(memaddr_lo, WRITE);
0800048A  4878 0010  777          pea       16
0800048E  122E 0017  778          move.b    23(A6),D1
08000492  4881       779          ext.w     D1
08000494  48C1       780          ext.l     D1
08000496  2F01       781          move.l    D1,-(A7)
08000498  4E92       782          jsr       (A2)
0800049A  504F       783          addq.w    #8,A7
                     784   ; // Write data transmit register, set STO bit, set W bit. 
                     785   ; TransmitI2C(data, WSTOP);
0800049C  4878 0050  786          pea       80
080004A0  122E 000B  787          move.b    11(A6),D1
080004A4  4881       788          ext.w     D1
080004A6  48C1       789          ext.l     D1
080004A8  2F01       790          move.l    D1,-(A7)
080004AA  4E92       791          jsr       (A2)
080004AC  504F       792          addq.w    #8,A7
080004AE  4CDF 0C00  793          movem.l   (A7)+,A2/A3
080004B2  4E5E       794          unlk      A6
080004B4  4E75       795          rts
                     796   ; }
                     797   ; // Assumptions: slave_addr is in write mode
                     798   ; void ReadI2CChar(char *data, char slave_addr, char memaddr_hi, char memaddr_lo){
                     799   _ReadI2CChar:
080004B6  4E56 0000  800          link      A6,#0
080004BA  2F0A       801          move.l    A2,-(A7)
080004BC  45F9 0800  802          lea       _TransmitI2C.L,A2
080004C0  03DE      
                     803   ; // Check before doing anything
                     804   ; WaitForTIPFlagReset();
080004C2  4EB9 0800  805          jsr       _WaitForTIPFlagReset
080004C6  03BE      
                     806   ; // Set slave to write mode, Generate start command
                     807   ; TransmitI2C(slave_addr, WSTART);
080004C8  4878 0091  808          pea       145
080004CC  122E 000F  809          move.b    15(A6),D1
080004D0  4881       810          ext.w     D1
080004D2  48C1       811          ext.l     D1
080004D4  2F01       812          move.l    D1,-(A7)
080004D6  4E92       813          jsr       (A2)
080004D8  504F       814          addq.w    #8,A7
                     815   ; // Write Mem Address and set W bit
                     816   ; TransmitI2C(memaddr_hi, WRITE);
080004DA  4878 0010  817          pea       16
080004DE  122E 0013  818          move.b    19(A6),D1
080004E2  4881       819          ext.w     D1
080004E4  48C1       820          ext.l     D1
080004E6  2F01       821          move.l    D1,-(A7)
080004E8  4E92       822          jsr       (A2)
080004EA  504F       823          addq.w    #8,A7
                     824   ; TransmitI2C(memaddr_lo, WRITE);
080004EC  4878 0010  825          pea       16
080004F0  122E 0017  826          move.b    23(A6),D1
080004F4  4881       827          ext.w     D1
080004F6  48C1       828          ext.l     D1
080004F8  2F01       829          move.l    D1,-(A7)
080004FA  4E92       830          jsr       (A2)
080004FC  504F       831          addq.w    #8,A7
                     832   ; // Set slave to read mode and generate start command for reading
                     833   ; TransmitI2C(slave_addr | 1, WSTART);
080004FE  4878 0091  834          pea       145
08000502  122E 000F  835          move.b    15(A6),D1
08000506  823C 0001  836          or.b      #1,D1
0800050A  4881       837          ext.w     D1
0800050C  48C1       838          ext.l     D1
0800050E  2F01       839          move.l    D1,-(A7)
08000510  4E92       840          jsr       (A2)
08000512  504F       841          addq.w    #8,A7
                     842   ; // Read data transmit register, set R bit, set NACK and IACK
                     843   ; I2C_CR = READNACK;
08000514  13FC 0029  844          move.b    #41,4227080
08000518  0040 8008 
                     845   ; // Wait for read data to come in
                     846   ; while((I2C_SR & 1) !=1){}
                     847   ReadI2CChar_1:
0800051C  1039 0040  848          move.b    4227080,D0
08000520  8008      
08000522  C03C 0001  849          and.b     #1,D0
08000526  0C00 0001  850          cmp.b     #1,D0
0800052A  6702       851          beq.s     ReadI2CChar_3
0800052C  60EE       852          bra       ReadI2CChar_1
                     853   ReadI2CChar_3:
                     854   ; *data = I2C_RXR;
0800052E  206E 0008  855          move.l    8(A6),A0
08000532  10B9 0040  856          move.b    4227078,(A0)
08000536  8006      
                     857   ; I2C_CR = 0x41;
08000538  13FC 0041  858          move.b    #65,4227080
0800053C  0040 8008 
08000540  245F       859          move.l    (A7)+,A2
08000542  4E5E       860          unlk      A6
08000544  4E75       861          rts
                     862   ; }
                     863   ; // Increment logic, handles bank overflows
                     864   ; void incrI2C(char *slave_addr, char *memaddr_hi, char *memaddr_lo, int read){
                     865   _incrI2C:
08000546  4E56 0000  866          link      A6,#0
0800054A  48E7 3E30  867          movem.l   D2/D3/D4/D5/D6/A2/A3,-(A7)
0800054E  242E 0008  868          move.l    8(A6),D2
08000552  262E 0010  869          move.l    16(A6),D3
08000556  45F9 0800  870          lea       _TransmitI2C.L,A2
0800055A  03DE      
0800055C  282E 000C  871          move.l    12(A6),D4
08000560  47F9 0800  872          lea       _printf.L,A3
08000564  0E44      
                     873   ; char zeewo = 0x00;
08000566  4205       874          clr.b     D5
                     875   ; char one = 0x01;
08000568  7C01       876          moveq     #1,D6
                     877   ; printf("\r\n %x %x%x", *slave_addr, *memaddr_hi, *memaddr_lo);
0800056A  2043       878          move.l    D3,A0
0800056C  1210       879          move.b    (A0),D1
0800056E  4881       880          ext.w     D1
08000570  48C1       881          ext.l     D1
08000572  2F01       882          move.l    D1,-(A7)
08000574  2044       883          move.l    D4,A0
08000576  1210       884          move.b    (A0),D1
08000578  4881       885          ext.w     D1
0800057A  48C1       886          ext.l     D1
0800057C  2F01       887          move.l    D1,-(A7)
0800057E  2042       888          move.l    D2,A0
08000580  1210       889          move.b    (A0),D1
08000582  4881       890          ext.w     D1
08000584  48C1       891          ext.l     D1
08000586  2F01       892          move.l    D1,-(A7)
08000588  4879 0800  893          pea       @m68kus~1_5.L
0800058C  18FE      
0800058E  4E93       894          jsr       (A3)
08000590  DEFC 0010  895          add.w     #16,A7
                     896   ; if ((*memaddr_lo & 0xFF) == 0xFF){
08000594  2043       897          move.l    D3,A0
08000596  1010       898          move.b    (A0),D0
08000598  4880       899          ext.w     D0
0800059A  C07C 00FF  900          and.w     #255,D0
0800059E  0C40 00FF  901          cmp.w     #255,D0
080005A2  6600 0116  902          bne       incrI2C_1
                     903   ; if ((*memaddr_hi & 0xFF) == 0xFF){ // Change bank
080005A6  2044       904          move.l    D4,A0
080005A8  1010       905          move.b    (A0),D0
080005AA  4880       906          ext.w     D0
080005AC  C07C 00FF  907          and.w     #255,D0
080005B0  0C40 00FF  908          cmp.w     #255,D0
080005B4  6600 00FA  909          bne       incrI2C_3
                     910   ; *slave_addr = ((*slave_addr & 0x8) == 0x8) ? 0xA0 : 0xA8;
080005B8  2042       911          move.l    D2,A0
080005BA  1010       912          move.b    (A0),D0
080005BC  C03C 0008  913          and.b     #8,D0
080005C0  0C00 0008  914          cmp.b     #8,D0
080005C4  6606       915          bne.s     incrI2C_5
080005C6  303C 00A0  916          move.w    #160,D0
080005CA  6004       917          bra.s     incrI2C_6
                     918   incrI2C_5:
080005CC  303C 00A8  919          move.w    #168,D0
                     920   incrI2C_6:
080005D0  2042       921          move.l    D2,A0
080005D2  1080       922          move.b    D0,(A0)
                     923   ; *memaddr_lo = zeewo;
080005D4  2043       924          move.l    D3,A0
080005D6  1085       925          move.b    D5,(A0)
                     926   ; *memaddr_hi = zeewo;
080005D8  2044       927          move.l    D4,A0
080005DA  1085       928          move.b    D5,(A0)
                     929   ; if(read & 1){
080005DC  202E 0014  930          move.l    20(A6),D0
080005E0  C0BC 0000  931          and.l     #1,D0
080005E4  0001      
080005E6  6700 0066  932          beq       incrI2C_7
                     933   ; printf("\r\n Changing slave and restart %x", *slave_addr);
080005EA  2042       934          move.l    D2,A0
080005EC  1210       935          move.b    (A0),D1
080005EE  4881       936          ext.w     D1
080005F0  48C1       937          ext.l     D1
080005F2  2F01       938          move.l    D1,-(A7)
080005F4  4879 0800  939          pea       @m68kus~1_6.L
080005F8  190A      
080005FA  4E93       940          jsr       (A3)
080005FC  504F       941          addq.w    #8,A7
                     942   ; TransmitI2C(*slave_addr, WSTART);
080005FE  4878 0091  943          pea       145
08000602  2042       944          move.l    D2,A0
08000604  1210       945          move.b    (A0),D1
08000606  4881       946          ext.w     D1
08000608  48C1       947          ext.l     D1
0800060A  2F01       948          move.l    D1,-(A7)
0800060C  4E92       949          jsr       (A2)
0800060E  504F       950          addq.w    #8,A7
                     951   ; TransmitI2C(*memaddr_hi, WRITE);
08000610  4878 0010  952          pea       16
08000614  2044       953          move.l    D4,A0
08000616  1210       954          move.b    (A0),D1
08000618  4881       955          ext.w     D1
0800061A  48C1       956          ext.l     D1
0800061C  2F01       957          move.l    D1,-(A7)
0800061E  4E92       958          jsr       (A2)
08000620  504F       959          addq.w    #8,A7
                     960   ; TransmitI2C(*memaddr_lo, WRITE);
08000622  4878 0010  961          pea       16
08000626  2043       962          move.l    D3,A0
08000628  1210       963          move.b    (A0),D1
0800062A  4881       964          ext.w     D1
0800062C  48C1       965          ext.l     D1
0800062E  2F01       966          move.l    D1,-(A7)
08000630  4E92       967          jsr       (A2)
08000632  504F       968          addq.w    #8,A7
                     969   ; TransmitI2C(*slave_addr | 1, WSTART);
08000634  4878 0091  970          pea       145
08000638  2042       971          move.l    D2,A0
0800063A  1210       972          move.b    (A0),D1
0800063C  823C 0001  973          or.b      #1,D1
08000640  4881       974          ext.w     D1
08000642  48C1       975          ext.l     D1
08000644  2F01       976          move.l    D1,-(A7)
08000646  4E92       977          jsr       (A2)
08000648  504F       978          addq.w    #8,A7
0800064A  6000 0038  979          bra       incrI2C_8
                     980   incrI2C_7:
                     981   ; }
                     982   ; else{
                     983   ; TransmitI2C(*slave_addr, WSTART);
0800064E  4878 0091  984          pea       145
08000652  2042       985          move.l    D2,A0
08000654  1210       986          move.b    (A0),D1
08000656  4881       987          ext.w     D1
08000658  48C1       988          ext.l     D1
0800065A  2F01       989          move.l    D1,-(A7)
0800065C  4E92       990          jsr       (A2)
0800065E  504F       991          addq.w    #8,A7
                     992   ; TransmitI2C(*memaddr_hi, WRITE);
08000660  4878 0010  993          pea       16
08000664  2044       994          move.l    D4,A0
08000666  1210       995          move.b    (A0),D1
08000668  4881       996          ext.w     D1
0800066A  48C1       997          ext.l     D1
0800066C  2F01       998          move.l    D1,-(A7)
0800066E  4E92       999          jsr       (A2)
08000670  504F      1000          addq.w    #8,A7
                    1001   ; TransmitI2C(*memaddr_lo, WRITE);
08000672  4878 0010 1002          pea       16
08000676  2043      1003          move.l    D3,A0
08000678  1210      1004          move.b    (A0),D1
0800067A  4881      1005          ext.w     D1
0800067C  48C1      1006          ext.l     D1
0800067E  2F01      1007          move.l    D1,-(A7)
08000680  4E92      1008          jsr       (A2)
08000682  504F      1009          addq.w    #8,A7
                    1010   incrI2C_8:
                    1011   ; }
                    1012   ; printf("\r\n HIT EDGE CASE %x %x%x", *slave_addr, *memaddr_hi, *memaddr_lo);
08000684  2043      1013          move.l    D3,A0
08000686  1210      1014          move.b    (A0),D1
08000688  4881      1015          ext.w     D1
0800068A  48C1      1016          ext.l     D1
0800068C  2F01      1017          move.l    D1,-(A7)
0800068E  2044      1018          move.l    D4,A0
08000690  1210      1019          move.b    (A0),D1
08000692  4881      1020          ext.w     D1
08000694  48C1      1021          ext.l     D1
08000696  2F01      1022          move.l    D1,-(A7)
08000698  2042      1023          move.l    D2,A0
0800069A  1210      1024          move.b    (A0),D1
0800069C  4881      1025          ext.w     D1
0800069E  48C1      1026          ext.l     D1
080006A0  2F01      1027          move.l    D1,-(A7)
080006A2  4879 0800 1028          pea       @m68kus~1_7.L
080006A6  192C      
080006A8  4E93      1029          jsr       (A3)
080006AA  DEFC 0010 1030          add.w     #16,A7
080006AE  6008      1031          bra.s     incrI2C_4
                    1032   incrI2C_3:
                    1033   ; }
                    1034   ; else{
                    1035   ; *memaddr_hi += one;
080006B0  2044      1036          move.l    D4,A0
080006B2  DD10      1037          add.b     D6,(A0)
                    1038   ; *memaddr_lo = zeewo;
080006B4  2043      1039          move.l    D3,A0
080006B6  1085      1040          move.b    D5,(A0)
                    1041   incrI2C_4:
080006B8  6004      1042          bra.s     incrI2C_2
                    1043   incrI2C_1:
                    1044   ; }
                    1045   ; }
                    1046   ; else{
                    1047   ; *memaddr_lo += one;
080006BA  2043      1048          move.l    D3,A0
080006BC  DD10      1049          add.b     D6,(A0)
                    1050   incrI2C_2:
080006BE  4CDF 0C7C 1051          movem.l   (A7)+,D2/D3/D4/D5/D6/A2/A3
080006C2  4E5E      1052          unlk      A6
080006C4  4E75      1053          rts
                    1054   ; }
                    1055   ; }
                    1056   ; void WriteI2CPage(char slave_addr, char memaddr_hi, char memaddr_lo, char size){
                    1057   _WriteI2CPage:
080006C6  4E56 0000 1058          link      A6,#0
080006CA  48E7 2020 1059          movem.l   D2/A2,-(A7)
080006CE  45F9 0800 1060          lea       _TransmitI2C.L,A2
080006D2  03DE      
                    1061   ; // Data is array of size "size", max size 128
                    1062   ; // WriteI2CChar();
                    1063   ; char i;
                    1064   ; // Check before doing anything
                    1065   ; WaitForTIPFlagReset();
080006D4  4EB9 0800 1066          jsr       _WaitForTIPFlagReset
080006D8  03BE      
                    1067   ; // Set slave to write mode, Generate start command
                    1068   ; TransmitI2C(slave_addr, WSTART);
080006DA  4878 0091 1069          pea       145
080006DE  122E 000B 1070          move.b    11(A6),D1
080006E2  4881      1071          ext.w     D1
080006E4  48C1      1072          ext.l     D1
080006E6  2F01      1073          move.l    D1,-(A7)
080006E8  4E92      1074          jsr       (A2)
080006EA  504F      1075          addq.w    #8,A7
                    1076   ; // Write Mem Address and set W bit
                    1077   ; TransmitI2C(memaddr_hi, WRITE);
080006EC  4878 0010 1078          pea       16
080006F0  122E 000F 1079          move.b    15(A6),D1
080006F4  4881      1080          ext.w     D1
080006F6  48C1      1081          ext.l     D1
080006F8  2F01      1082          move.l    D1,-(A7)
080006FA  4E92      1083          jsr       (A2)
080006FC  504F      1084          addq.w    #8,A7
                    1085   ; TransmitI2C(memaddr_lo, WRITE);
080006FE  4878 0010 1086          pea       16
08000702  122E 0013 1087          move.b    19(A6),D1
08000706  4881      1088          ext.w     D1
08000708  48C1      1089          ext.l     D1
0800070A  2F01      1090          move.l    D1,-(A7)
0800070C  4E92      1091          jsr       (A2)
0800070E  504F      1092          addq.w    #8,A7
                    1093   ; for (i = 0; i < size; i++){
08000710  4202      1094          clr.b     D2
                    1095   WriteI2CPage_1:
08000712  B42E 0017 1096          cmp.b     23(A6),D2
08000716  6C00 0066 1097          bge       WriteI2CPage_3
                    1098   ; // Write without stop unless we're at the end
                    1099   ; if (i == (size-1) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF)){
0800071A  102E 0017 1100          move.b    23(A6),D0
0800071E  5300      1101          subq.b    #1,D0
08000720  B400      1102          cmp.b     D0,D2
08000722  6720      1103          beq.s     WriteI2CPage_6
08000724  102E 000F 1104          move.b    15(A6),D0
08000728  4880      1105          ext.w     D0
0800072A  C07C 00FF 1106          and.w     #255,D0
0800072E  0C40 00FF 1107          cmp.w     #255,D0
08000732  6620      1108          bne.s     WriteI2CPage_4
08000734  102E 0013 1109          move.b    19(A6),D0
08000738  4880      1110          ext.w     D0
0800073A  C07C 00FF 1111          and.w     #255,D0
0800073E  0C40 00FF 1112          cmp.w     #255,D0
08000742  6610      1113          bne.s     WriteI2CPage_4
                    1114   WriteI2CPage_6:
                    1115   ; TransmitI2C(i,WSTOP);
08000744  4878 0050 1116          pea       80
08000748  4882      1117          ext.w     D2
0800074A  48C2      1118          ext.l     D2
0800074C  2F02      1119          move.l    D2,-(A7)
0800074E  4E92      1120          jsr       (A2)
08000750  504F      1121          addq.w    #8,A7
08000752  600E      1122          bra.s     WriteI2CPage_5
                    1123   WriteI2CPage_4:
                    1124   ; }
                    1125   ; else{
                    1126   ; TransmitI2C(i,WRITE);
08000754  4878 0010 1127          pea       16
08000758  4882      1128          ext.w     D2
0800075A  48C2      1129          ext.l     D2
0800075C  2F02      1130          move.l    D2,-(A7)
0800075E  4E92      1131          jsr       (A2)
08000760  504F      1132          addq.w    #8,A7
                    1133   WriteI2CPage_5:
                    1134   ; }
                    1135   ; // Page crossing, if it happens, is handled inside incrI2C
                    1136   ; incrI2C(&slave_addr, &memaddr_hi, &memaddr_lo, 0);
08000762  42A7      1137          clr.l     -(A7)
08000764  486E 0013 1138          pea       19(A6)
08000768  486E 000F 1139          pea       15(A6)
0800076C  486E 000B 1140          pea       11(A6)
08000770  4EB9 0800 1141          jsr       _incrI2C
08000774  0546      
08000776  DEFC 0010 1142          add.w     #16,A7
0800077A  5202      1143          addq.b    #1,D2
0800077C  6094      1144          bra       WriteI2CPage_1
                    1145   WriteI2CPage_3:
0800077E  4CDF 0404 1146          movem.l   (A7)+,D2/A2
08000782  4E5E      1147          unlk      A6
08000784  4E75      1148          rts
                    1149   ; }
                    1150   ; }
                    1151   ; void ReadI2CPage(char *data, char slave_addr, char memaddr_hi, char memaddr_lo, char size){
                    1152   _ReadI2CPage:
08000786  4E56 FFFC 1153          link      A6,#-4
0800078A  48E7 3020 1154          movem.l   D2/D3/A2,-(A7)
0800078E  45F9 0800 1155          lea       _TransmitI2C.L,A2
08000792  03DE      
08000794  162E 001B 1156          move.b    27(A6),D3
08000798  4883      1157          ext.w     D3
0800079A  48C3      1158          ext.l     D3
                    1159   ; // Data is array of size "size", max size 128
                    1160   ; char i;
                    1161   ; char temp = 0;
0800079C  422E FFFF 1162          clr.b     -1(A6)
                    1163   ; // Check before doing anything
                    1164   ; WaitForTIPFlagReset();
080007A0  4EB9 0800 1165          jsr       _WaitForTIPFlagReset
080007A4  03BE      
                    1166   ; // Set slave to write mode, Generate start command
                    1167   ; TransmitI2C(slave_addr, WSTART);
080007A6  4878 0091 1168          pea       145
080007AA  122E 000F 1169          move.b    15(A6),D1
080007AE  4881      1170          ext.w     D1
080007B0  48C1      1171          ext.l     D1
080007B2  2F01      1172          move.l    D1,-(A7)
080007B4  4E92      1173          jsr       (A2)
080007B6  504F      1174          addq.w    #8,A7
                    1175   ; // Write Mem Address and set W bit
                    1176   ; TransmitI2C(memaddr_hi, WRITE);
080007B8  4878 0010 1177          pea       16
080007BC  122E 0013 1178          move.b    19(A6),D1
080007C0  4881      1179          ext.w     D1
080007C2  48C1      1180          ext.l     D1
080007C4  2F01      1181          move.l    D1,-(A7)
080007C6  4E92      1182          jsr       (A2)
080007C8  504F      1183          addq.w    #8,A7
                    1184   ; TransmitI2C(memaddr_lo, WRITE);
080007CA  4878 0010 1185          pea       16
080007CE  122E 0017 1186          move.b    23(A6),D1
080007D2  4881      1187          ext.w     D1
080007D4  48C1      1188          ext.l     D1
080007D6  2F01      1189          move.l    D1,-(A7)
080007D8  4E92      1190          jsr       (A2)
080007DA  504F      1191          addq.w    #8,A7
                    1192   ; // Set slave to read mode and generate start command for reading
                    1193   ; TransmitI2C(slave_addr | 1, WSTART);
080007DC  4878 0091 1194          pea       145
080007E0  122E 000F 1195          move.b    15(A6),D1
080007E4  823C 0001 1196          or.b      #1,D1
080007E8  4881      1197          ext.w     D1
080007EA  48C1      1198          ext.l     D1
080007EC  2F01      1199          move.l    D1,-(A7)
080007EE  4E92      1200          jsr       (A2)
080007F0  504F      1201          addq.w    #8,A7
                    1202   ; for (i = 0; i < size; i++){
080007F2  4202      1203          clr.b     D2
                    1204   ReadI2CPage_1:
080007F4  B403      1205          cmp.b     D3,D2
080007F6  6C00 00B8 1206          bge       ReadI2CPage_3
                    1207   ; // Read without NACK unless we're at the end
                    1208   ; if (i == (size-1) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF)){
080007FA  1003      1209          move.b    D3,D0
080007FC  5300      1210          subq.b    #1,D0
080007FE  B400      1211          cmp.b     D0,D2
08000800  6720      1212          beq.s     ReadI2CPage_6
08000802  102E 0013 1213          move.b    19(A6),D0
08000806  4880      1214          ext.w     D0
08000808  C07C 00FF 1215          and.w     #255,D0
0800080C  0C40 00FF 1216          cmp.w     #255,D0
08000810  661A      1217          bne.s     ReadI2CPage_4
08000812  102E 0017 1218          move.b    23(A6),D0
08000816  4880      1219          ext.w     D0
08000818  C07C 00FF 1220          and.w     #255,D0
0800081C  0C40 00FF 1221          cmp.w     #255,D0
08000820  660A      1222          bne.s     ReadI2CPage_4
                    1223   ReadI2CPage_6:
                    1224   ; I2C_CR = READNACK;
08000822  13FC 0029 1225          move.b    #41,4227080
08000826  0040 8008 
0800082A  6008      1226          bra.s     ReadI2CPage_5
                    1227   ReadI2CPage_4:
                    1228   ; }
                    1229   ; else
                    1230   ; I2C_CR = READACK;
0800082C  13FC 0021 1231          move.b    #33,4227080
08000830  0040 8008 
                    1232   ReadI2CPage_5:
                    1233   ; while((I2C_SR & 1) !=1){}
                    1234   ReadI2CPage_7:
08000834  1039 0040 1235          move.b    4227080,D0
08000838  8008      
0800083A  C03C 0001 1236          and.b     #1,D0
0800083E  0C00 0001 1237          cmp.b     #1,D0
08000842  6702      1238          beq.s     ReadI2CPage_9
08000844  60EE      1239          bra       ReadI2CPage_7
                    1240   ReadI2CPage_9:
                    1241   ; data[i] = I2C_RXR;
08000846  206E 0008 1242          move.l    8(A6),A0
0800084A  4882      1243          ext.w     D2
0800084C  48C2      1244          ext.l     D2
0800084E  11B9 0040 1245          move.b    4227078,0(A0,D2.L)
08000852  8006 2800 
                    1246   ; if (i == (size-1) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF))
08000856  1003      1247          move.b    D3,D0
08000858  5300      1248          subq.b    #1,D0
0800085A  B400      1249          cmp.b     D0,D2
0800085C  6720      1250          beq.s     ReadI2CPage_12
0800085E  102E 0013 1251          move.b    19(A6),D0
08000862  4880      1252          ext.w     D0
08000864  C07C 00FF 1253          and.w     #255,D0
08000868  0C40 00FF 1254          cmp.w     #255,D0
0800086C  661A      1255          bne.s     ReadI2CPage_10
0800086E  102E 0017 1256          move.b    23(A6),D0
08000872  4880      1257          ext.w     D0
08000874  C07C 00FF 1258          and.w     #255,D0
08000878  0C40 00FF 1259          cmp.w     #255,D0
0800087C  660A      1260          bne.s     ReadI2CPage_10
                    1261   ReadI2CPage_12:
                    1262   ; I2C_CR = 0x41;
0800087E  13FC 0041 1263          move.b    #65,4227080
08000882  0040 8008 
08000886  6008      1264          bra.s     ReadI2CPage_11
                    1265   ReadI2CPage_10:
                    1266   ; else
                    1267   ; I2C_CR = 0x01;
08000888  13FC 0001 1268          move.b    #1,4227080
0800088C  0040 8008 
                    1269   ReadI2CPage_11:
                    1270   ; // Page crossing, if it happens, is handled inside incrI2C
                    1271   ; incrI2C(&slave_addr, &memaddr_hi, &memaddr_lo, 1);
08000890  4878 0001 1272          pea       1
08000894  486E 0017 1273          pea       23(A6)
08000898  486E 0013 1274          pea       19(A6)
0800089C  486E 000F 1275          pea       15(A6)
080008A0  4EB9 0800 1276          jsr       _incrI2C
080008A4  0546      
080008A6  DEFC 0010 1277          add.w     #16,A7
080008AA  5202      1278          addq.b    #1,D2
080008AC  6000 FF46 1279          bra       ReadI2CPage_1
                    1280   ReadI2CPage_3:
080008B0  4CDF 040C 1281          movem.l   (A7)+,D2/D3/A2
080008B4  4E5E      1282          unlk      A6
080008B6  4E75      1283          rts
                    1284   ; }
                    1285   ; }
                    1286   ; void GetBank(char *bank){
                    1287   _GetBank:
080008B8  4E56 0000 1288          link      A6,#0
080008BC  2F02      1289          move.l    D2,-(A7)
                    1290   ; char asdf;
                    1291   ; while(1){
                    1292   GetBank_1:
                    1293   ; printf("\r\nSelect bank:\r\n0 - Bank 0\r\n1 - Bank 1");
080008BE  4879 0800 1294          pea       @m68kus~1_8.L
080008C2  1946      
080008C4  4EB9 0800 1295          jsr       _printf
080008C8  0E44      
080008CA  584F      1296          addq.w    #4,A7
                    1297   ; asdf = getchar();
080008CC  4EB9 0800 1298          jsr       _getch
080008D0  0E08      
080008D2  1400      1299          move.b    D0,D2
                    1300   ; putchar(asdf);
080008D4  4882      1301          ext.w     D2
080008D6  48C2      1302          ext.l     D2
080008D8  2F02      1303          move.l    D2,-(A7)
080008DA  4EB9 0800 1304          jsr       _putch
080008DE  0DD8      
080008E0  584F      1305          addq.w    #4,A7
                    1306   ; if(asdf == '0'){
080008E2  0C02 0030 1307          cmp.b     #48,D2
080008E6  660A      1308          bne.s     GetBank_4
                    1309   ; *bank = 0xA0;
080008E8  206E 0008 1310          move.l    8(A6),A0
080008EC  10BC 00A0 1311          move.b    #160,(A0)
                    1312   ; break;
080008F0  6020      1313          bra.s     GetBank_3
                    1314   GetBank_4:
                    1315   ; }
                    1316   ; else if (asdf == '1'){
080008F2  0C02 0031 1317          cmp.b     #49,D2
080008F6  660A      1318          bne.s     GetBank_6
                    1319   ; *bank = 0xA8;
080008F8  206E 0008 1320          move.l    8(A6),A0
080008FC  10BC 00A8 1321          move.b    #168,(A0)
                    1322   ; break;
08000900  6010      1323          bra.s     GetBank_3
                    1324   GetBank_6:
                    1325   ; }
                    1326   ; else{
                    1327   ; printf("\r\nInvalid selection.");
08000902  4879 0800 1328          pea       @m68kus~1_9.L
08000906  196E      
08000908  4EB9 0800 1329          jsr       _printf
0800090C  0E44      
0800090E  584F      1330          addq.w    #4,A7
08000910  60AC      1331          bra       GetBank_1
                    1332   GetBank_3:
08000912  241F      1333          move.l    (A7)+,D2
08000914  4E5E      1334          unlk      A6
08000916  4E75      1335          rts
                    1336   ; }
                    1337   ; }       
                    1338   ; }
                    1339   ; void GetMemAddr(char *hi, char *lo){
                    1340   _GetMemAddr:
08000918  4E56 0000 1341          link      A6,#0
                    1342   ; printf("\r\nEnter mem address hi:");
0800091C  4879 0800 1343          pea       @m68kus~1_10.L
08000920  1984      
08000922  4EB9 0800 1344          jsr       _printf
08000926  0E44      
08000928  584F      1345          addq.w    #4,A7
                    1346   ; *hi = Get2HexDigits(0);
0800092A  42A7      1347          clr.l     -(A7)
0800092C  4EB9 0800 1348          jsr       _Get2HexDigits
08000930  0070      
08000932  584F      1349          addq.w    #4,A7
08000934  206E 0008 1350          move.l    8(A6),A0
08000938  1080      1351          move.b    D0,(A0)
                    1352   ; printf("\r\nEnter mem address lo:");
0800093A  4879 0800 1353          pea       @m68kus~1_11.L
0800093E  199C      
08000940  4EB9 0800 1354          jsr       _printf
08000944  0E44      
08000946  584F      1355          addq.w    #4,A7
                    1356   ; *lo = Get2HexDigits(0);
08000948  42A7      1357          clr.l     -(A7)
0800094A  4EB9 0800 1358          jsr       _Get2HexDigits
0800094E  0070      
08000950  584F      1359          addq.w    #4,A7
08000952  206E 000C 1360          move.l    12(A6),A0
08000956  1080      1361          move.b    D0,(A0)
08000958  4E5E      1362          unlk      A6
0800095A  4E75      1363          rts
                    1364   ; // TODO: Hex digit validation?
                    1365   ; }
                    1366   ; /*********************************************************************************************************************************
                    1367   ; **  IMPORTANT FUNCTION
                    1368   ; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
                    1369   ; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
                    1370   ; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
                    1371   ; **  Calling this function allows you to deal with Interrupts for example
                    1372   ; ***********************************************************************************************************************************/
                    1373   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                    1374   ; {
                    1375   _InstallExceptionHandler:
0800095C  4E56 FFFC 1376          link      A6,#-4
                    1377   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
08000960  2D7C 0B00 1378          move.l    #184549376,-4(A6)
08000964  0000 FFFC 
                    1379   ; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
08000968  206E FFFC 1380          move.l    -4(A6),A0
0800096C  202E 000C 1381          move.l    12(A6),D0
08000970  E588      1382          lsl.l     #2,D0
08000972  21AE 0008 1383          move.l    8(A6),0(A0,D0.L)
08000976  0800      
08000978  4E5E      1384          unlk      A6
0800097A  4E75      1385          rts
                    1386   ; }
                    1387   ; /******************************************************************************************************************************
                    1388   ; * Start of user program
                    1389   ; ******************************************************************************************************************************/
                    1390   ; void main()
                    1391   ; {
                    1392   _main:
0800097C  4E56 FCC8 1393          link      A6,#-824
08000980  48E7 303C 1394          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
08000984  45F9 0800 1395          lea       _printf.L,A2
08000988  0E44      
0800098A  47F9 0800 1396          lea       _InstallExceptionHandler.L,A3
0800098E  095C      
08000990  49EE FD74 1397          lea       -652(A6),A4
08000994  4BF9 0800 1398          lea       _GetMemAddr.L,A5
08000998  0918      
                    1399   ; unsigned int row, j=0, count=0, counter1=1;
0800099A  42AE FCCE 1400          clr.l     -818(A6)
0800099E  42AE FCD2 1401          clr.l     -814(A6)
080009A2  2D7C 0000 1402          move.l    #1,-810(A6)
080009A6  0001 FCD6 
                    1403   ; char i = 0;
080009AA  4202      1404          clr.b     D2
                    1405   ; char c, text[150] ;
                    1406   ; unsigned char asdf, asdf1, asdf2, asdf3, bank;
                    1407   ; unsigned char wBuf[256];
                    1408   ; unsigned char rBuf[256];
                    1409   ; int addr = 2048;
080009AC  2D7C 0000 1410          move.l    #2048,-136(A6)
080009B0  0800 FF78 
                    1411   ; char size;
                    1412   ; char data[128];
                    1413   ; int PassFailFlag = 1 ;
080009B4  2D7C 0000 1414          move.l    #1,-4(A6)
080009B8  0001 FFFC 
                    1415   ; i = x = y = z = PortA_Count =0;
080009BC  42B9 0800 1416          clr.l     _PortA_Count.L
080009C0  1C12      
080009C2  42B9 0800 1417          clr.l     _z.L
080009C6  1C0E      
080009C8  42B9 0800 1418          clr.l     _y.L
080009CC  1C0A      
080009CE  42B9 0800 1419          clr.l     _x.L
080009D2  1C06      
080009D4  4202      1420          clr.b     D2
                    1421   ; Timer1Count = Timer2Count = Timer3Count = Timer4Count = 0;
080009D6  4239 0800 1422          clr.b     _Timer4Count.L
080009DA  1C1C      
080009DC  4239 0800 1423          clr.b     _Timer3Count.L
080009E0  1C1A      
080009E2  4239 0800 1424          clr.b     _Timer2Count.L
080009E6  1C18      
080009E8  4239 0800 1425          clr.b     _Timer1Count.L
080009EC  1C16      
                    1426   ; InstallExceptionHandler(PIA_ISR, 25) ;          // install interrupt handler for PIAs 1 and 2 on level 1 IRQ
080009EE  4878 0019 1427          pea       25
080009F2  4879 0800 1428          pea       _PIA_ISR.L
080009F6  01E8      
080009F8  4E93      1429          jsr       (A3)
080009FA  504F      1430          addq.w    #8,A7
                    1431   ; InstallExceptionHandler(ACIA_ISR, 26) ;		    // install interrupt handler for ACIA on level 2 IRQ
080009FC  4878 001A 1432          pea       26
08000A00  4879 0800 1433          pea       _ACIA_ISR.L
08000A04  01E6      
08000A06  4E93      1434          jsr       (A3)
08000A08  504F      1435          addq.w    #8,A7
                    1436   ; InstallExceptionHandler(Timer_ISR, 27) ;		// install interrupt handler for Timers 1-4 on level 3 IRQ
08000A0A  4878 001B 1437          pea       27
08000A0E  4879 0800 1438          pea       _Timer_ISR.L
08000A12  014C      
08000A14  4E93      1439          jsr       (A3)
08000A16  504F      1440          addq.w    #8,A7
                    1441   ; InstallExceptionHandler(Key2PressISR, 28) ;	    // install interrupt handler for Key Press 2 on DE1 board for level 4 IRQ
08000A18  4878 001C 1442          pea       28
08000A1C  4879 0800 1443          pea       _Key2PressISR.L
08000A20  01EA      
08000A22  4E93      1444          jsr       (A3)
08000A24  504F      1445          addq.w    #8,A7
                    1446   ; InstallExceptionHandler(Key1PressISR, 29) ;	    // install interrupt handler for Key Press 1 on DE1 board for level 5 IRQ
08000A26  4878 001D 1447          pea       29
08000A2A  4879 0800 1448          pea       _Key1PressISR.L
08000A2E  01EC      
08000A30  4E93      1449          jsr       (A3)
08000A32  504F      1450          addq.w    #8,A7
                    1451   ; Timer1Data = 0x10;		// program time delay into timers 1-4
08000A34  13FC 0010 1452          move.b    #16,4194352
08000A38  0040 0030 
                    1453   ; Timer2Data = 0x20;
08000A3C  13FC 0020 1454          move.b    #32,4194356
08000A40  0040 0034 
                    1455   ; Timer3Data = 0x15;
08000A44  13FC 0015 1456          move.b    #21,4194360
08000A48  0040 0038 
                    1457   ; Timer4Data = 0x25;
08000A4C  13FC 0025 1458          move.b    #37,4194364
08000A50  0040 003C 
                    1459   ; Timer1Control = 3;		// write 3 to control register to Bit0 = 1 (enable interrupt from timers) 1 - 4 and allow them to count Bit 1 = 1
08000A54  13FC 0003 1460          move.b    #3,4194354
08000A58  0040 0032 
                    1461   ; Timer2Control = 3;
08000A5C  13FC 0003 1462          move.b    #3,4194358
08000A60  0040 0036 
                    1463   ; Timer3Control = 3;
08000A64  13FC 0003 1464          move.b    #3,4194362
08000A68  0040 003A 
                    1465   ; Timer4Control = 3;
08000A6C  13FC 0003 1466          move.b    #3,4194366
08000A70  0040 003E 
                    1467   ; Init_LCD();             // initialise the LCD display to use a parallel data interface and 2 lines of display
08000A74  4EB9 0800 1468          jsr       _Init_LCD
08000A78  021C      
                    1469   ; Init_RS232() ;          // initialise the RS232 port for use with hyper terminal
08000A7A  4EB9 0800 1470          jsr       _Init_RS232
08000A7E  023A      
                    1471   ; /*************************************************************************************************
                    1472   ; **  I2C Program Lab 5
                    1473   ; *************************************************************************************************/
                    1474   ; I2C_Init();
08000A80  4EB9 0800 1475          jsr       _I2C_Init
08000A84  038A      
                    1476   ; // printf("%x\n", I2C_PRERLO);
                    1477   ; // printf("%x\n", I2C_PRERHI);
                    1478   ; // printf("%x\n", I2C_CTR);
                    1479   ; // printf("%x\n", I2C_TXR);
                    1480   ; // printf("%x\n", I2C_RXR);
                    1481   ; // printf("%x\n", I2C_CR);
                    1482   ; // printf("%x\n", I2C_SR);
                    1483   ; printf("\r\nLab 5: I2C");
08000A86  4879 0800 1484          pea       @m68kus~1_12.L
08000A8A  19B4      
08000A8C  4E92      1485          jsr       (A2)
08000A8E  584F      1486          addq.w    #4,A7
                    1487   ; while(1){
                    1488   main_1:
                    1489   ; printf("\r\nChoose the following:\r\n0 - Write Byte\r\n1 - Read Byte\r\n2 - Page Write\r\n3 - Page Read\r\n4 - ADC stuff todo\r\n");
08000A90  4879 0800 1490          pea       @m68kus~1_13.L
08000A94  19C2      
08000A96  4E92      1491          jsr       (A2)
08000A98  584F      1492          addq.w    #4,A7
                    1493   ; asdf = getchar();
08000A9A  4EB9 0800 1494          jsr       _getch
08000A9E  0E08      
08000AA0  1D40 FD73 1495          move.b    D0,-653(A6)
                    1496   ; putchar(asdf);
08000AA4  122E FD73 1497          move.b    -653(A6),D1
08000AA8  C2BC 0000 1498          and.l     #255,D1
08000AAC  00FF      
08000AAE  2F01      1499          move.l    D1,-(A7)
08000AB0  4EB9 0800 1500          jsr       _putch
08000AB4  0DD8      
08000AB6  584F      1501          addq.w    #4,A7
                    1502   ; if(asdf == '0'){
08000AB8  102E FD73 1503          move.b    -653(A6),D0
08000ABC  0C00 0030 1504          cmp.b     #48,D0
08000AC0  6600 00AC 1505          bne       main_4
                    1506   ; printf("\r\nEnter byte to write: ");
08000AC4  4879 0800 1507          pea       @m68kus~1_14.L
08000AC8  1A2E      
08000ACA  4E92      1508          jsr       (A2)
08000ACC  584F      1509          addq.w    #4,A7
                    1510   ; asdf = Get2HexDigits(0);
08000ACE  42A7      1511          clr.l     -(A7)
08000AD0  4EB9 0800 1512          jsr       _Get2HexDigits
08000AD4  0070      
08000AD6  584F      1513          addq.w    #4,A7
08000AD8  1D40 FD73 1514          move.b    D0,-653(A6)
                    1515   ; // Bank Selection
                    1516   ; GetBank(&bank);
08000ADC  486E FD77 1517          pea       -649(A6)
08000AE0  4EB9 0800 1518          jsr       _GetBank
08000AE4  08B8      
08000AE6  584F      1519          addq.w    #4,A7
                    1520   ; // Mem Address Selection
                    1521   ; GetMemAddr(&asdf2, &asdf1);
08000AE8  2F0C      1522          move.l    A4,-(A7)
08000AEA  486E FD75 1523          pea       -651(A6)
08000AEE  4E95      1524          jsr       (A5)
08000AF0  504F      1525          addq.w    #8,A7
                    1526   ; WriteI2CChar(asdf, bank, asdf2, asdf1);
08000AF2  1214      1527          move.b    (A4),D1
08000AF4  4881      1528          ext.w     D1
08000AF6  48C1      1529          ext.l     D1
08000AF8  2F01      1530          move.l    D1,-(A7)
08000AFA  122E FD75 1531          move.b    -651(A6),D1
08000AFE  4881      1532          ext.w     D1
08000B00  48C1      1533          ext.l     D1
08000B02  2F01      1534          move.l    D1,-(A7)
08000B04  122E FD77 1535          move.b    -649(A6),D1
08000B08  4881      1536          ext.w     D1
08000B0A  48C1      1537          ext.l     D1
08000B0C  2F01      1538          move.l    D1,-(A7)
08000B0E  122E FD73 1539          move.b    -653(A6),D1
08000B12  4881      1540          ext.w     D1
08000B14  48C1      1541          ext.l     D1
08000B16  2F01      1542          move.l    D1,-(A7)
08000B18  4EB9 0800 1543          jsr       _WriteI2CChar
08000B1C  03FC      
08000B1E  DEFC 0010 1544          add.w     #16,A7
                    1545   ; printf("\r\nWritten %x to bank %d at memaddr hi: %x mem addr lo: %x", asdf, bank == 0xA0 ? 0:1, asdf2, asdf1);
08000B22  1214      1546          move.b    (A4),D1
08000B24  C2BC 0000 1547          and.l     #255,D1
08000B28  00FF      
08000B2A  2F01      1548          move.l    D1,-(A7)
08000B2C  122E FD75 1549          move.b    -651(A6),D1
08000B30  C2BC 0000 1550          and.l     #255,D1
08000B34  00FF      
08000B36  2F01      1551          move.l    D1,-(A7)
08000B38  122E FD77 1552          move.b    -649(A6),D1
08000B3C  C27C 00FF 1553          and.w     #255,D1
08000B40  0C41 00A0 1554          cmp.w     #160,D1
08000B44  6604      1555          bne.s     main_6
08000B46  4201      1556          clr.b     D1
08000B48  6002      1557          bra.s     main_7
                    1558   main_6:
08000B4A  7201      1559          moveq     #1,D1
                    1560   main_7:
08000B4C  4881      1561          ext.w     D1
08000B4E  48C1      1562          ext.l     D1
08000B50  2F01      1563          move.l    D1,-(A7)
08000B52  122E FD73 1564          move.b    -653(A6),D1
08000B56  C2BC 0000 1565          and.l     #255,D1
08000B5A  00FF      
08000B5C  2F01      1566          move.l    D1,-(A7)
08000B5E  4879 0800 1567          pea       @m68kus~1_15.L
08000B62  1A46      
08000B64  4E92      1568          jsr       (A2)
08000B66  DEFC 0014 1569          add.w     #20,A7
08000B6A  6000 0268 1570          bra       main_27
                    1571   main_4:
                    1572   ; }
                    1573   ; else if(asdf == '1'){
08000B6E  102E FD73 1574          move.b    -653(A6),D0
08000B72  0C00 0031 1575          cmp.b     #49,D0
08000B76  6600 008E 1576          bne       main_8
                    1577   ; // Bank Selection
                    1578   ; GetBank(&bank);
08000B7A  486E FD77 1579          pea       -649(A6)
08000B7E  4EB9 0800 1580          jsr       _GetBank
08000B82  08B8      
08000B84  584F      1581          addq.w    #4,A7
                    1582   ; // Mem Address Selection
                    1583   ; GetMemAddr(&asdf, &asdf1);
08000B86  2F0C      1584          move.l    A4,-(A7)
08000B88  486E FD73 1585          pea       -653(A6)
08000B8C  4E95      1586          jsr       (A5)
08000B8E  504F      1587          addq.w    #8,A7
                    1588   ; ReadI2CChar(&asdf3, bank, asdf, asdf1);
08000B90  1214      1589          move.b    (A4),D1
08000B92  4881      1590          ext.w     D1
08000B94  48C1      1591          ext.l     D1
08000B96  2F01      1592          move.l    D1,-(A7)
08000B98  122E FD73 1593          move.b    -653(A6),D1
08000B9C  4881      1594          ext.w     D1
08000B9E  48C1      1595          ext.l     D1
08000BA0  2F01      1596          move.l    D1,-(A7)
08000BA2  122E FD77 1597          move.b    -649(A6),D1
08000BA6  4881      1598          ext.w     D1
08000BA8  48C1      1599          ext.l     D1
08000BAA  2F01      1600          move.l    D1,-(A7)
08000BAC  486E FD76 1601          pea       -650(A6)
08000BB0  4EB9 0800 1602          jsr       _ReadI2CChar
08000BB4  04B6      
08000BB6  DEFC 0010 1603          add.w     #16,A7
                    1604   ; printf("\r\nRead %x from bank %d at memaddr hi: %x mem addr lo: %x", asdf3, bank == 0xA0 ? 0:1, asdf, asdf1);
08000BBA  1214      1605          move.b    (A4),D1
08000BBC  C2BC 0000 1606          and.l     #255,D1
08000BC0  00FF      
08000BC2  2F01      1607          move.l    D1,-(A7)
08000BC4  122E FD73 1608          move.b    -653(A6),D1
08000BC8  C2BC 0000 1609          and.l     #255,D1
08000BCC  00FF      
08000BCE  2F01      1610          move.l    D1,-(A7)
08000BD0  122E FD77 1611          move.b    -649(A6),D1
08000BD4  C27C 00FF 1612          and.w     #255,D1
08000BD8  0C41 00A0 1613          cmp.w     #160,D1
08000BDC  6604      1614          bne.s     main_10
08000BDE  4201      1615          clr.b     D1
08000BE0  6002      1616          bra.s     main_11
                    1617   main_10:
08000BE2  7201      1618          moveq     #1,D1
                    1619   main_11:
08000BE4  4881      1620          ext.w     D1
08000BE6  48C1      1621          ext.l     D1
08000BE8  2F01      1622          move.l    D1,-(A7)
08000BEA  122E FD76 1623          move.b    -650(A6),D1
08000BEE  C2BC 0000 1624          and.l     #255,D1
08000BF2  00FF      
08000BF4  2F01      1625          move.l    D1,-(A7)
08000BF6  4879 0800 1626          pea       @m68kus~1_16.L
08000BFA  1A80      
08000BFC  4E92      1627          jsr       (A2)
08000BFE  DEFC 0014 1628          add.w     #20,A7
08000C02  6000 01D0 1629          bra       main_27
                    1630   main_8:
                    1631   ; }
                    1632   ; else if(asdf == '2'){
08000C06  102E FD73 1633          move.b    -653(A6),D0
08000C0A  0C00 0032 1634          cmp.b     #50,D0
08000C0E  6600 00C4 1635          bne       main_12
                    1636   ; printf("\r\nbruh");printf("\r\nEnter size of page to write(max 128 in hex == 0x7F): ");
08000C12  4879 0800 1637          pea       @m68kus~1_17.L
08000C16  1ABA      
08000C18  4E92      1638          jsr       (A2)
08000C1A  584F      1639          addq.w    #4,A7
08000C1C  4879 0800 1640          pea       @m68kus~1_18.L
08000C20  1AC2      
08000C22  4E92      1641          jsr       (A2)
08000C24  584F      1642          addq.w    #4,A7
                    1643   ; size = Get2HexDigits(0);
08000C26  42A7      1644          clr.l     -(A7)
08000C28  4EB9 0800 1645          jsr       _Get2HexDigits
08000C2C  0070      
08000C2E  584F      1646          addq.w    #4,A7
08000C30  1600      1647          move.b    D0,D3
                    1648   ; // Bank Selection
                    1649   ; GetBank(&bank);
08000C32  486E FD77 1650          pea       -649(A6)
08000C36  4EB9 0800 1651          jsr       _GetBank
08000C3A  08B8      
08000C3C  584F      1652          addq.w    #4,A7
                    1653   ; // Mem Address Selection
                    1654   ; GetMemAddr(&asdf2, &asdf1);
08000C3E  2F0C      1655          move.l    A4,-(A7)
08000C40  486E FD75 1656          pea       -651(A6)
08000C44  4E95      1657          jsr       (A5)
08000C46  504F      1658          addq.w    #8,A7
                    1659   ; WriteI2CPage(bank, asdf2, asdf1,size);
08000C48  4883      1660          ext.w     D3
08000C4A  48C3      1661          ext.l     D3
08000C4C  2F03      1662          move.l    D3,-(A7)
08000C4E  1214      1663          move.b    (A4),D1
08000C50  4881      1664          ext.w     D1
08000C52  48C1      1665          ext.l     D1
08000C54  2F01      1666          move.l    D1,-(A7)
08000C56  122E FD75 1667          move.b    -651(A6),D1
08000C5A  4881      1668          ext.w     D1
08000C5C  48C1      1669          ext.l     D1
08000C5E  2F01      1670          move.l    D1,-(A7)
08000C60  122E FD77 1671          move.b    -649(A6),D1
08000C64  4881      1672          ext.w     D1
08000C66  48C1      1673          ext.l     D1
08000C68  2F01      1674          move.l    D1,-(A7)
08000C6A  4EB9 0800 1675          jsr       _WriteI2CPage
08000C6E  06C6      
08000C70  DEFC 0010 1676          add.w     #16,A7
                    1677   ; printf("\r\nWrote values starting at memaddr 0x%x%x and bank %d, total size: %x\r\nData: ", asdf2, asdf1, bank == 0xA0 ? 0:1,size);
08000C74  4883      1678          ext.w     D3
08000C76  48C3      1679          ext.l     D3
08000C78  2F03      1680          move.l    D3,-(A7)
08000C7A  122E FD77 1681          move.b    -649(A6),D1
08000C7E  C27C 00FF 1682          and.w     #255,D1
08000C82  0C41 00A0 1683          cmp.w     #160,D1
08000C86  6604      1684          bne.s     main_14
08000C88  4201      1685          clr.b     D1
08000C8A  6002      1686          bra.s     main_15
                    1687   main_14:
08000C8C  7201      1688          moveq     #1,D1
                    1689   main_15:
08000C8E  4881      1690          ext.w     D1
08000C90  48C1      1691          ext.l     D1
08000C92  2F01      1692          move.l    D1,-(A7)
08000C94  1214      1693          move.b    (A4),D1
08000C96  C2BC 0000 1694          and.l     #255,D1
08000C9A  00FF      
08000C9C  2F01      1695          move.l    D1,-(A7)
08000C9E  122E FD75 1696          move.b    -651(A6),D1
08000CA2  C2BC 0000 1697          and.l     #255,D1
08000CA6  00FF      
08000CA8  2F01      1698          move.l    D1,-(A7)
08000CAA  4879 0800 1699          pea       @m68kus~1_19.L
08000CAE  1AFA      
08000CB0  4E92      1700          jsr       (A2)
08000CB2  DEFC 0014 1701          add.w     #20,A7
                    1702   ; for(i = 0; i < size; i++){
08000CB6  4202      1703          clr.b     D2
                    1704   main_16:
08000CB8  B403      1705          cmp.b     D3,D2
08000CBA  6C14      1706          bge.s     main_18
                    1707   ; printf("%x", i);
08000CBC  4882      1708          ext.w     D2
08000CBE  48C2      1709          ext.l     D2
08000CC0  2F02      1710          move.l    D2,-(A7)
08000CC2  4879 0800 1711          pea       @m68kus~1_20.L
08000CC6  1B48      
08000CC8  4E92      1712          jsr       (A2)
08000CCA  504F      1713          addq.w    #8,A7
08000CCC  5202      1714          addq.b    #1,D2
08000CCE  60E8      1715          bra       main_16
                    1716   main_18:
08000CD0  6000 0102 1717          bra       main_27
                    1718   main_12:
                    1719   ; }
                    1720   ; }
                    1721   ; else if(asdf == '3'){
08000CD4  102E FD73 1722          move.b    -653(A6),D0
08000CD8  0C00 0033 1723          cmp.b     #51,D0
08000CDC  6600 00D2 1724          bne       main_19
                    1725   ; printf("\r\nbruh");printf("\r\nEnter size of page to read(max 128 in hex == 0x7F): ");
08000CE0  4879 0800 1726          pea       @m68kus~1_17.L
08000CE4  1ABA      
08000CE6  4E92      1727          jsr       (A2)
08000CE8  584F      1728          addq.w    #4,A7
08000CEA  4879 0800 1729          pea       @m68kus~1_21.L
08000CEE  1B4C      
08000CF0  4E92      1730          jsr       (A2)
08000CF2  584F      1731          addq.w    #4,A7
                    1732   ; size = Get2HexDigits(0);
08000CF4  42A7      1733          clr.l     -(A7)
08000CF6  4EB9 0800 1734          jsr       _Get2HexDigits
08000CFA  0070      
08000CFC  584F      1735          addq.w    #4,A7
08000CFE  1600      1736          move.b    D0,D3
                    1737   ; // Bank Selection
                    1738   ; GetBank(&bank);
08000D00  486E FD77 1739          pea       -649(A6)
08000D04  4EB9 0800 1740          jsr       _GetBank
08000D08  08B8      
08000D0A  584F      1741          addq.w    #4,A7
                    1742   ; // Mem Address Selection
                    1743   ; GetMemAddr(&asdf2, &asdf1);
08000D0C  2F0C      1744          move.l    A4,-(A7)
08000D0E  486E FD75 1745          pea       -651(A6)
08000D12  4E95      1746          jsr       (A5)
08000D14  504F      1747          addq.w    #8,A7
                    1748   ; ReadI2CPage(data, bank, asdf2, asdf1,size);
08000D16  4883      1749          ext.w     D3
08000D18  48C3      1750          ext.l     D3
08000D1A  2F03      1751          move.l    D3,-(A7)
08000D1C  1214      1752          move.b    (A4),D1
08000D1E  4881      1753          ext.w     D1
08000D20  48C1      1754          ext.l     D1
08000D22  2F01      1755          move.l    D1,-(A7)
08000D24  122E FD75 1756          move.b    -651(A6),D1
08000D28  4881      1757          ext.w     D1
08000D2A  48C1      1758          ext.l     D1
08000D2C  2F01      1759          move.l    D1,-(A7)
08000D2E  122E FD77 1760          move.b    -649(A6),D1
08000D32  4881      1761          ext.w     D1
08000D34  48C1      1762          ext.l     D1
08000D36  2F01      1763          move.l    D1,-(A7)
08000D38  486E FF7C 1764          pea       -132(A6)
08000D3C  4EB9 0800 1765          jsr       _ReadI2CPage
08000D40  0786      
08000D42  DEFC 0014 1766          add.w     #20,A7
                    1767   ; printf("\r\nRead values starting at memaddr 0x%x%x and bank %d, total size: %x\r\nData: ", asdf2, asdf1, bank == 0xA0 ? 0:1,size);
08000D46  4883      1768          ext.w     D3
08000D48  48C3      1769          ext.l     D3
08000D4A  2F03      1770          move.l    D3,-(A7)
08000D4C  122E FD77 1771          move.b    -649(A6),D1
08000D50  C27C 00FF 1772          and.w     #255,D1
08000D54  0C41 00A0 1773          cmp.w     #160,D1
08000D58  6604      1774          bne.s     main_21
08000D5A  4201      1775          clr.b     D1
08000D5C  6002      1776          bra.s     main_22
                    1777   main_21:
08000D5E  7201      1778          moveq     #1,D1
                    1779   main_22:
08000D60  4881      1780          ext.w     D1
08000D62  48C1      1781          ext.l     D1
08000D64  2F01      1782          move.l    D1,-(A7)
08000D66  1214      1783          move.b    (A4),D1
08000D68  C2BC 0000 1784          and.l     #255,D1
08000D6C  00FF      
08000D6E  2F01      1785          move.l    D1,-(A7)
08000D70  122E FD75 1786          move.b    -651(A6),D1
08000D74  C2BC 0000 1787          and.l     #255,D1
08000D78  00FF      
08000D7A  2F01      1788          move.l    D1,-(A7)
08000D7C  4879 0800 1789          pea       @m68kus~1_22.L
08000D80  1B84      
08000D82  4E92      1790          jsr       (A2)
08000D84  DEFC 0014 1791          add.w     #20,A7
                    1792   ; for(i = 0; i < size; i++){
08000D88  4202      1793          clr.b     D2
                    1794   main_23:
08000D8A  B403      1795          cmp.b     D3,D2
08000D8C  6C20      1796          bge.s     main_25
                    1797   ; printf("%x", data[i]);
08000D8E  4882      1798          ext.w     D2
08000D90  48C2      1799          ext.l     D2
08000D92  41EE FF7C 1800          lea       -132(A6),A0
08000D96  1230 2800 1801          move.b    0(A0,D2.L),D1
08000D9A  4881      1802          ext.w     D1
08000D9C  48C1      1803          ext.l     D1
08000D9E  2F01      1804          move.l    D1,-(A7)
08000DA0  4879 0800 1805          pea       @m68kus~1_20.L
08000DA4  1B48      
08000DA6  4E92      1806          jsr       (A2)
08000DA8  504F      1807          addq.w    #8,A7
08000DAA  5202      1808          addq.b    #1,D2
08000DAC  60DC      1809          bra       main_23
                    1810   main_25:
08000DAE  6024      1811          bra.s     main_27
                    1812   main_19:
                    1813   ; }
                    1814   ; }
                    1815   ; else if(asdf == '4'){
08000DB0  102E FD73 1816          move.b    -653(A6),D0
08000DB4  0C00 0034 1817          cmp.b     #52,D0
08000DB8  660C      1818          bne.s     main_26
                    1819   ; printf("\r\nbruh");
08000DBA  4879 0800 1820          pea       @m68kus~1_17.L
08000DBE  1ABA      
08000DC0  4E92      1821          jsr       (A2)
08000DC2  584F      1822          addq.w    #4,A7
08000DC4  600E      1823          bra.s     main_27
                    1824   main_26:
                    1825   ; }
                    1826   ; else{
                    1827   ; printf("\r\nInvalid Selection.\r\n");
08000DC6  4879 0800 1828          pea       @m68kus~1_23.L
08000DCA  1BD2      
08000DCC  4E92      1829          jsr       (A2)
08000DCE  584F      1830          addq.w    #4,A7
                    1831   ; continue;
08000DD0  6000 0002 1832          bra       main_27
                    1833   main_27:
08000DD4  6000 FCBA 1834          bra       main_1
                    1835   ; }   
                    1836   ; }
                    1837   ; }
                    1838   _putch:
08000DD8  4E56 0000 1839          link      A6,#0
08000DDC  48E7 2000 1840          movem.l   D2,-(A7)
08000DE0  242E 0008 1841          move.l    8(A6),D2
08000DE4  0C82 0000 1842          cmp.l     #10,D2
08000DE8  000A      
08000DEA  660A      1843          bne.s     putch_1
08000DEC  4878 000D 1844          pea       13
08000DF0  6100 F45A 1845          bsr       __putch
08000DF4  584F      1846          addq.w    #4,A7
                    1847   putch_1:
08000DF6  2F02      1848          move.l    D2,-(A7)
08000DF8  6100 F452 1849          bsr       __putch
08000DFC  584F      1850          addq.w    #4,A7
08000DFE  2002      1851          move.l    D2,D0
08000E00  4CDF 0004 1852          movem.l   (A7)+,D2
08000E04  4E5E      1853          unlk      A6
08000E06  4E75      1854          rts
                    1855   _getch:
08000E08  48E7 2000 1856          movem.l   D2,-(A7)
08000E0C  2439 0800 1857          move.l    __ungetbuf,D2
08000E10  1BEA      
08000E12  2039 0800 1858          move.l    __ungetbuf,D0
08000E16  1BEA      
08000E18  0C80 FFFF 1859          cmp.l     #-1,D0
08000E1C  FFFF      
08000E1E  670C      1860          beq.s     getch_1
08000E20  23FC FFFF 1861          move.l    #-1,__ungetbuf
08000E24  FFFF 0800 
08000E28  1BEA      
08000E2A  6010      1862          bra.s     getch_3
                    1863   getch_1:
08000E2C  6100 F44C 1864          bsr       __getch
08000E30  2400      1865          move.l    D0,D2
08000E32  0C80 0000 1866          cmp.l     #13,D0
08000E36  000D      
08000E38  6602      1867          bne.s     getch_3
08000E3A  740A      1868          moveq     #10,D2
                    1869   getch_3:
08000E3C  2002      1870          move.l    D2,D0
08000E3E  4CDF 0004 1871          movem.l   (A7)+,D2
08000E42  4E75      1872          rts
                    1873   _printf:
08000E44  4E56 FFFC 1874          link      A6,#-4
08000E48  48E7 2000 1875          movem.l   D2,-(A7)
08000E4C  41EE 0008 1876          lea       8(A6),A0
08000E50  5848      1877          addq.w    #4,A0
08000E52  2408      1878          move.l    A0,D2
08000E54  2F02      1879          move.l    D2,-(A7)
08000E56  2F2E 0008 1880          move.l    8(A6),-(A7)
08000E5A  42A7      1881          clr.l     -(A7)
08000E5C  6100 00CA 1882          bsr       _vsprintf
08000E60  DEFC 000C 1883          add.w     #12,A7
08000E64  2D40 FFFC 1884          move.l    D0,-4(A6)
08000E68  4282      1885          clr.l     D2
08000E6A  202E FFFC 1886          move.l    -4(A6),D0
08000E6E  4CDF 0004 1887          movem.l   (A7)+,D2
08000E72  4E5E      1888          unlk      A6
08000E74  4E75      1889          rts
                    1890   @vsprintf_copy:
08000E76  4E56 0000 1891          link      A6,#0
08000E7A  206E 0008 1892          move.l    8(A6),A0
08000E7E  4A90      1893          tst.l     (A0)
08000E80  6710      1894          beq.s     @vsprintf_copy_1
08000E82  202E 000C 1895          move.l    12(A6),D0
08000E86  206E 0008 1896          move.l    8(A6),A0
08000E8A  2250      1897          move.l    (A0),A1
08000E8C  5290      1898          addq.l    #1,(A0)
08000E8E  1280      1899          move.b    D0,(A1)
08000E90  600A      1900          bra.s     @vsprintf_copy_2
                    1901   @vsprintf_copy_1:
08000E92  2F2E 000C 1902          move.l    12(A6),-(A7)
08000E96  6100 FF40 1903          bsr       _putch
08000E9A  584F      1904          addq.w    #4,A7
                    1905   @vsprintf_copy_2:
08000E9C  4E5E      1906          unlk      A6
08000E9E  4E75      1907          rts
                    1908   @vsprintf_getval:
08000EA0  4E56 0000 1909          link      A6,#0
08000EA4  48E7 3000 1910          movem.l   D2/D3,-(A7)
08000EA8  242E 0008 1911          move.l    8(A6),D2
08000EAC  4283      1912          clr.l     D3
08000EAE  2042      1913          move.l    D2,A0
08000EB0  2050      1914          move.l    (A0),A0
08000EB2  1010      1915          move.b    (A0),D0
08000EB4  4880      1916          ext.w     D0
08000EB6  48C0      1917          ext.l     D0
08000EB8  0C80 0000 1918          cmp.l     #42,D0
08000EBC  002A      
08000EBE  6612      1919          bne.s     @vsprintf_getval_1
08000EC0  206E 000C 1920          move.l    12(A6),A0
08000EC4  2250      1921          move.l    (A0),A1
08000EC6  5890      1922          addq.l    #4,(A0)
08000EC8  2611      1923          move.l    (A1),D3
08000ECA  2042      1924          move.l    D2,A0
08000ECC  5290      1925          addq.l    #1,(A0)
08000ECE  6000 004E 1926          bra       @vsprintf_getval_5
                    1927   @vsprintf_getval_1:
08000ED2  2042      1928          move.l    D2,A0
08000ED4  2050      1929          move.l    (A0),A0
08000ED6  1010      1930          move.b    (A0),D0
08000ED8  4880      1931          ext.w     D0
08000EDA  48C0      1932          ext.l     D0
08000EDC  0C80 0000 1933          cmp.l     #48,D0
08000EE0  0030      
08000EE2  6D00 003A 1934          blt       @vsprintf_getval_5
08000EE6  2042      1935          move.l    D2,A0
08000EE8  2050      1936          move.l    (A0),A0
08000EEA  1010      1937          move.b    (A0),D0
08000EEC  4880      1938          ext.w     D0
08000EEE  48C0      1939          ext.l     D0
08000EF0  0C80 0000 1940          cmp.l     #57,D0
08000EF4  0039      
08000EF6  6E26      1941          bgt.s     @vsprintf_getval_5
08000EF8  2F03      1942          move.l    D3,-(A7)
08000EFA  4878 000A 1943          pea       10
08000EFE  6100 07F6 1944          bsr       LMUL
08000F02  2017      1945          move.l    (A7),D0
08000F04  504F      1946          addq.w    #8,A7
08000F06  2042      1947          move.l    D2,A0
08000F08  2250      1948          move.l    (A0),A1
08000F0A  5290      1949          addq.l    #1,(A0)
08000F0C  1211      1950          move.b    (A1),D1
08000F0E  4881      1951          ext.w     D1
08000F10  48C1      1952          ext.l     D1
08000F12  D081      1953          add.l     D1,D0
08000F14  0480 0000 1954          sub.l     #48,D0
08000F18  0030      
08000F1A  2600      1955          move.l    D0,D3
08000F1C  60B4      1956          bra       @vsprintf_getval_1
                    1957   @vsprintf_getval_5:
08000F1E  2003      1958          move.l    D3,D0
08000F20  4CDF 000C 1959          movem.l   (A7)+,D2/D3
08000F24  4E5E      1960          unlk      A6
08000F26  4E75      1961          rts
                    1962   _vsprintf:
08000F28  4E56 FFCC 1963          link      A6,#-52
08000F2C  48E7 3F3C 1964          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
08000F30  45EE 0008 1965          lea       8(A6),A2
08000F34  47F9 0800 1966          lea       @vsprintf_copy,A3
08000F38  0E76      
08000F3A  49F9 0800 1967          lea       _ultoa,A4
08000F3E  1682      
08000F40  4286      1968          clr.l     D6
                    1969   vsprintf_1:
08000F42  206E 000C 1970          move.l    12(A6),A0
08000F46  4A10      1971          tst.b     (A0)
08000F48  6700 0624 1972          beq       vsprintf_3
08000F4C  206E 000C 1973          move.l    12(A6),A0
08000F50  1010      1974          move.b    (A0),D0
08000F52  4880      1975          ext.w     D0
08000F54  48C0      1976          ext.l     D0
08000F56  0C80 0000 1977          cmp.l     #37,D0
08000F5A  0025      
08000F5C  671C      1978          beq.s     vsprintf_4
08000F5E  206E 000C 1979          move.l    12(A6),A0
08000F62  52AE 000C 1980          addq.l    #1,12(A6)
08000F66  1210      1981          move.b    (A0),D1
08000F68  4881      1982          ext.w     D1
08000F6A  48C1      1983          ext.l     D1
08000F6C  2F01      1984          move.l    D1,-(A7)
08000F6E  2F0A      1985          move.l    A2,-(A7)
08000F70  4E93      1986          jsr       (A3)
08000F72  504F      1987          addq.w    #8,A7
08000F74  5286      1988          addq.l    #1,D6
08000F76  6000 05F2 1989          bra       vsprintf_2
                    1990   vsprintf_4:
08000F7A  52AE 000C 1991          addq.l    #1,12(A6)
08000F7E  422E FFD3 1992          clr.b     -45(A6)
08000F82  422E FFD2 1993          clr.b     -46(A6)
08000F86  422E FFD0 1994          clr.b     -48(A6)
08000F8A  422E FFCF 1995          clr.b     -49(A6)
08000F8E  422E FFCE 1996          clr.b     -50(A6)
08000F92  422E FFCD 1997          clr.b     -51(A6)
08000F96  42AE FFFC 1998          clr.l     -4(A6)
08000F9A  7AFF      1999          moveq     #-1,D5
08000F9C  41EE FFDC 2000          lea       -36(A6),A0
08000FA0  2608      2001          move.l    A0,D3
08000FA2  2408      2002          move.l    A0,D2
                    2003   vsprintf_6:
08000FA4  206E 000C 2004          move.l    12(A6),A0
08000FA8  1010      2005          move.b    (A0),D0
08000FAA  4880      2006          ext.w     D0
08000FAC  48C0      2007          ext.l     D0
08000FAE  0C80 0000 2008          cmp.l     #43,D0
08000FB2  002B      
08000FB4  6730      2009          beq.s     vsprintf_12
08000FB6  6E18      2010          bgt.s     vsprintf_15
08000FB8  0C80 0000 2011          cmp.l     #35,D0
08000FBC  0023      
08000FBE  6700 003E 2012          beq       vsprintf_14
08000FC2  6E00 0046 2013          bgt       vsprintf_9
08000FC6  0C80 0000 2014          cmp.l     #32,D0
08000FCA  0020      
08000FCC  6724      2015          beq.s     vsprintf_13
08000FCE  603A      2016          bra.s     vsprintf_9
                    2017   vsprintf_15:
08000FD0  0C80 0000 2018          cmp.l     #45,D0
08000FD4  002D      
08000FD6  6702      2019          beq.s     vsprintf_11
08000FD8  6030      2020          bra.s     vsprintf_9
                    2021   vsprintf_11:
08000FDA  1D7C 0001 2022          move.b    #1,-51(A6)
08000FDE  FFCD      
08000FE0  52AE 000C 2023          addq.l    #1,12(A6)
08000FE4  6026      2024          bra.s     vsprintf_7
                    2025   vsprintf_12:
08000FE6  1D7C 0001 2026          move.b    #1,-50(A6)
08000FEA  FFCE      
08000FEC  52AE 000C 2027          addq.l    #1,12(A6)
08000FF0  601A      2028          bra.s     vsprintf_7
                    2029   vsprintf_13:
08000FF2  1D7C 0001 2030          move.b    #1,-49(A6)
08000FF6  FFCF      
08000FF8  52AE 000C 2031          addq.l    #1,12(A6)
08000FFC  600E      2032          bra.s     vsprintf_7
                    2033   vsprintf_14:
08000FFE  1D7C 0001 2034          move.b    #1,-48(A6)
08001002  FFD0      
08001004  52AE 000C 2035          addq.l    #1,12(A6)
08001008  6002      2036          bra.s     vsprintf_7
                    2037   vsprintf_9:
0800100A  6002      2038          bra.s     vsprintf_8
                    2039   vsprintf_7:
0800100C  6096      2040          bra       vsprintf_6
                    2041   vsprintf_8:
0800100E  206E 000C 2042          move.l    12(A6),A0
08001012  1010      2043          move.b    (A0),D0
08001014  4880      2044          ext.w     D0
08001016  48C0      2045          ext.l     D0
08001018  0C80 0000 2046          cmp.l     #48,D0
0800101C  0030      
0800101E  660A      2047          bne.s     vsprintf_16
08001020  52AE 000C 2048          addq.l    #1,12(A6)
08001024  1D7C 0001 2049          move.b    #1,-46(A6)
08001028  FFD2      
                    2050   vsprintf_16:
0800102A  486E 0010 2051          pea       16(A6)
0800102E  486E 000C 2052          pea       12(A6)
08001032  6100 FE6C 2053          bsr       @vsprintf_getval
08001036  504F      2054          addq.w    #8,A7
08001038  2A40      2055          move.l    D0,A5
0800103A  206E 000C 2056          move.l    12(A6),A0
0800103E  1010      2057          move.b    (A0),D0
08001040  4880      2058          ext.w     D0
08001042  48C0      2059          ext.l     D0
08001044  0C80 0000 2060          cmp.l     #46,D0
08001048  002E      
0800104A  6614      2061          bne.s     vsprintf_18
0800104C  52AE 000C 2062          addq.l    #1,12(A6)
08001050  486E 0010 2063          pea       16(A6)
08001054  486E 000C 2064          pea       12(A6)
08001058  6100 FE46 2065          bsr       @vsprintf_getval
0800105C  504F      2066          addq.w    #8,A7
0800105E  2A00      2067          move.l    D0,D5
                    2068   vsprintf_18:
08001060  206E 000C 2069          move.l    12(A6),A0
08001064  1010      2070          move.b    (A0),D0
08001066  4880      2071          ext.w     D0
08001068  48C0      2072          ext.l     D0
0800106A  0C80 0000 2073          cmp.l     #108,D0
0800106E  006C      
08001070  660A      2074          bne.s     vsprintf_20
08001072  52AE 000C 2075          addq.l    #1,12(A6)
08001076  1D7C 0001 2076          move.b    #1,-45(A6)
0800107A  FFD3      
                    2077   vsprintf_20:
0800107C  206E 000C 2078          move.l    12(A6),A0
08001080  1010      2079          move.b    (A0),D0
08001082  4880      2080          ext.w     D0
08001084  48C0      2081          ext.l     D0
08001086  0C80 0000 2082          cmp.l     #111,D0
0800108A  006F      
0800108C  6700 00D4 2083          beq       vsprintf_27
08001090  6E34      2084          bgt.s     vsprintf_33
08001092  0C80 0000 2085          cmp.l     #100,D0
08001096  0064      
08001098  6700 0054 2086          beq       vsprintf_24
0800109C  6E1C      2087          bgt.s     vsprintf_34
0800109E  0C80 0000 2088          cmp.l     #99,D0
080010A2  0063      
080010A4  6700 012C 2089          beq       vsprintf_30
080010A8  6E00 016A 2090          bgt       vsprintf_22
080010AC  0C80 0000 2091          cmp.l     #88,D0
080010B0  0058      
080010B2  6700 00E6 2092          beq       vsprintf_28
080010B6  6000 015C 2093          bra       vsprintf_22
                    2094   vsprintf_34:
080010BA  0C80 0000 2095          cmp.l     #105,D0
080010BE  0069      
080010C0  672C      2096          beq.s     vsprintf_24
080010C2  6000 0150 2097          bra       vsprintf_22
                    2098   vsprintf_33:
080010C6  0C80 0000 2099          cmp.l     #117,D0
080010CA  0075      
080010CC  6700 005C 2100          beq       vsprintf_26
080010D0  6E0E      2101          bgt.s     vsprintf_35
080010D2  0C80 0000 2102          cmp.l     #115,D0
080010D6  0073      
080010D8  6700 011C 2103          beq       vsprintf_31
080010DC  6000 0136 2104          bra       vsprintf_22
                    2105   vsprintf_35:
080010E0  0C80 0000 2106          cmp.l     #120,D0
080010E4  0078      
080010E6  6700 00B2 2107          beq       vsprintf_28
080010EA  6000 0128 2108          bra       vsprintf_22
                    2109   vsprintf_24:
080010EE  4A2E FFD3 2110          tst.b     -45(A6)
080010F2  671A      2111          beq.s     vsprintf_36
080010F4  4878 000A 2112          pea       10
080010F8  2F03      2113          move.l    D3,-(A7)
080010FA  206E 0010 2114          move.l    16(A6),A0
080010FE  58AE 0010 2115          addq.l    #4,16(A6)
08001102  2F10      2116          move.l    (A0),-(A7)
08001104  6100 04F8 2117          bsr       _ltoa
08001108  DEFC 000C 2118          add.w     #12,A7
0800110C  6018      2119          bra.s     vsprintf_37
                    2120   vsprintf_36:
0800110E  4878 000A 2121          pea       10
08001112  2F03      2122          move.l    D3,-(A7)
08001114  206E 0010 2123          move.l    16(A6),A0
08001118  58AE 0010 2124          addq.l    #4,16(A6)
0800111C  2F10      2125          move.l    (A0),-(A7)
0800111E  6100 04DE 2126          bsr       _ltoa
08001122  DEFC 000C 2127          add.w     #12,A7
                    2128   vsprintf_37:
08001126  6000 00FA 2129          bra       vsprintf_23
                    2130   vsprintf_26:
0800112A  4A2E FFD3 2131          tst.b     -45(A6)
0800112E  6718      2132          beq.s     vsprintf_38
08001130  4878 000A 2133          pea       10
08001134  2F03      2134          move.l    D3,-(A7)
08001136  206E 0010 2135          move.l    16(A6),A0
0800113A  58AE 0010 2136          addq.l    #4,16(A6)
0800113E  2F10      2137          move.l    (A0),-(A7)
08001140  4E94      2138          jsr       (A4)
08001142  DEFC 000C 2139          add.w     #12,A7
08001146  6016      2140          bra.s     vsprintf_39
                    2141   vsprintf_38:
08001148  4878 000A 2142          pea       10
0800114C  2F03      2143          move.l    D3,-(A7)
0800114E  206E 0010 2144          move.l    16(A6),A0
08001152  58AE 0010 2145          addq.l    #4,16(A6)
08001156  2F10      2146          move.l    (A0),-(A7)
08001158  4E94      2147          jsr       (A4)
0800115A  DEFC 000C 2148          add.w     #12,A7
                    2149   vsprintf_39:
0800115E  6000 00C2 2150          bra       vsprintf_23
                    2151   vsprintf_27:
08001162  4A2E FFD3 2152          tst.b     -45(A6)
08001166  6718      2153          beq.s     vsprintf_40
08001168  4878 0008 2154          pea       8
0800116C  2F03      2155          move.l    D3,-(A7)
0800116E  206E 0010 2156          move.l    16(A6),A0
08001172  58AE 0010 2157          addq.l    #4,16(A6)
08001176  2F10      2158          move.l    (A0),-(A7)
08001178  4E94      2159          jsr       (A4)
0800117A  DEFC 000C 2160          add.w     #12,A7
0800117E  6016      2161          bra.s     vsprintf_41
                    2162   vsprintf_40:
08001180  4878 0008 2163          pea       8
08001184  2F03      2164          move.l    D3,-(A7)
08001186  206E 0010 2165          move.l    16(A6),A0
0800118A  58AE 0010 2166          addq.l    #4,16(A6)
0800118E  2F10      2167          move.l    (A0),-(A7)
08001190  4E94      2168          jsr       (A4)
08001192  DEFC 000C 2169          add.w     #12,A7
                    2170   vsprintf_41:
08001196  6000 008A 2171          bra       vsprintf_23
                    2172   vsprintf_28:
0800119A  4A2E FFD3 2173          tst.b     -45(A6)
0800119E  6718      2174          beq.s     vsprintf_42
080011A0  4878 0010 2175          pea       16
080011A4  2F03      2176          move.l    D3,-(A7)
080011A6  206E 0010 2177          move.l    16(A6),A0
080011AA  58AE 0010 2178          addq.l    #4,16(A6)
080011AE  2F10      2179          move.l    (A0),-(A7)
080011B0  4E94      2180          jsr       (A4)
080011B2  DEFC 000C 2181          add.w     #12,A7
080011B6  6016      2182          bra.s     vsprintf_43
                    2183   vsprintf_42:
080011B8  4878 0010 2184          pea       16
080011BC  2F03      2185          move.l    D3,-(A7)
080011BE  206E 0010 2186          move.l    16(A6),A0
080011C2  58AE 0010 2187          addq.l    #4,16(A6)
080011C6  2F10      2188          move.l    (A0),-(A7)
080011C8  4E94      2189          jsr       (A4)
080011CA  DEFC 000C 2190          add.w     #12,A7
                    2191   vsprintf_43:
080011CE  6000 0052 2192          bra       vsprintf_23
                    2193   vsprintf_30:
080011D2  206E 0010 2194          move.l    16(A6),A0
080011D6  58AE 0010 2195          addq.l    #4,16(A6)
080011DA  2010      2196          move.l    (A0),D0
080011DC  2042      2197          move.l    D2,A0
080011DE  5282      2198          addq.l    #1,D2
080011E0  1080      2199          move.b    D0,(A0)
080011E2  2042      2200          move.l    D2,A0
080011E4  4210      2201          clr.b     (A0)
080011E6  200D      2202          move.l    A5,D0
080011E8  6704      2203          beq.s     vsprintf_44
080011EA  200D      2204          move.l    A5,D0
080011EC  6002      2205          bra.s     vsprintf_45
                    2206   vsprintf_44:
080011EE  7001      2207          moveq     #1,D0
                    2208   vsprintf_45:
080011F0  2A00      2209          move.l    D0,D5
080011F2  6000 002E 2210          bra       vsprintf_23
                    2211   vsprintf_31:
080011F6  206E 0010 2212          move.l    16(A6),A0
080011FA  58AE 0010 2213          addq.l    #4,16(A6)
080011FE  2610      2214          move.l    (A0),D3
08001200  0C85 FFFF 2215          cmp.l     #-1,D5
08001204  FFFF      
08001206  660A      2216          bne.s     vsprintf_46
08001208  2F03      2217          move.l    D3,-(A7)
0800120A  6100 0578 2218          bsr       _strlen
0800120E  584F      2219          addq.w    #4,A7
08001210  2A00      2220          move.l    D0,D5
                    2221   vsprintf_46:
08001212  600E      2222          bra.s     vsprintf_23
                    2223   vsprintf_22:
08001214  206E 000C 2224          move.l    12(A6),A0
08001218  2242      2225          move.l    D2,A1
0800121A  5282      2226          addq.l    #1,D2
0800121C  1290      2227          move.b    (A0),(A1)
0800121E  2042      2228          move.l    D2,A0
08001220  4210      2229          clr.b     (A0)
                    2230   vsprintf_23:
08001222  2F03      2231          move.l    D3,-(A7)
08001224  6100 055E 2232          bsr       _strlen
08001228  584F      2233          addq.w    #4,A7
0800122A  1800      2234          move.b    D0,D4
0800122C  206E 000C 2235          move.l    12(A6),A0
08001230  1010      2236          move.b    (A0),D0
08001232  4880      2237          ext.w     D0
08001234  48C0      2238          ext.l     D0
08001236  0C80 0000 2239          cmp.l     #115,D0
0800123A  0073      
0800123C  6618      2240          bne.s     vsprintf_48
0800123E  0C85 0000 2241          cmp.l     #0,D5
08001242  0000      
08001244  6D10      2242          blt.s     vsprintf_48
08001246  4884      2243          ext.w     D4
08001248  48C4      2244          ext.l     D4
0800124A  B885      2245          cmp.l     D5,D4
0800124C  6F04      2246          ble.s     vsprintf_50
0800124E  1005      2247          move.b    D5,D0
08001250  6002      2248          bra.s     vsprintf_51
                    2249   vsprintf_50:
08001252  1004      2250          move.b    D4,D0
                    2251   vsprintf_51:
08001254  1800      2252          move.b    D0,D4
                    2253   vsprintf_48:
08001256  206E 000C 2254          move.l    12(A6),A0
0800125A  1010      2255          move.b    (A0),D0
0800125C  4880      2256          ext.w     D0
0800125E  48C0      2257          ext.l     D0
08001260  0C80 0000 2258          cmp.l     #88,D0
08001264  0058      
08001266  6600 0026 2259          bne       vsprintf_56
0800126A  41EE FFDC 2260          lea       -36(A6),A0
0800126E  2408      2261          move.l    A0,D2
                    2262   vsprintf_54:
08001270  2042      2263          move.l    D2,A0
08001272  4A10      2264          tst.b     (A0)
08001274  6718      2265          beq.s     vsprintf_56
08001276  2042      2266          move.l    D2,A0
08001278  1210      2267          move.b    (A0),D1
0800127A  4881      2268          ext.w     D1
0800127C  48C1      2269          ext.l     D1
0800127E  2F01      2270          move.l    D1,-(A7)
08001280  6100 0514 2271          bsr       _toupper
08001284  584F      2272          addq.w    #4,A7
08001286  2042      2273          move.l    D2,A0
08001288  1080      2274          move.b    D0,(A0)
0800128A  5282      2275          addq.l    #1,D2
0800128C  60E2      2276          bra       vsprintf_54
                    2277   vsprintf_56:
0800128E  7E00      2278          moveq     #0,D7
08001290  41EE FFD4 2279          lea       -44(A6),A0
08001294  2408      2280          move.l    A0,D2
08001296  206E 000C 2281          move.l    12(A6),A0
0800129A  1010      2282          move.b    (A0),D0
0800129C  4880      2283          ext.w     D0
0800129E  48C0      2284          ext.l     D0
080012A0  0C80 0000 2285          cmp.l     #100,D0
080012A4  0064      
080012A6  6714      2286          beq.s     vsprintf_59
080012A8  206E 000C 2287          move.l    12(A6),A0
080012AC  1010      2288          move.b    (A0),D0
080012AE  4880      2289          ext.w     D0
080012B0  48C0      2290          ext.l     D0
080012B2  0C80 0000 2291          cmp.l     #105,D0
080012B6  0069      
080012B8  6600 0076 2292          bne       vsprintf_65
                    2293   vsprintf_59:
080012BC  4A2E FFCE 2294          tst.b     -50(A6)
080012C0  6612      2295          bne.s     vsprintf_62
080012C2  2043      2296          move.l    D3,A0
080012C4  1010      2297          move.b    (A0),D0
080012C6  4880      2298          ext.w     D0
080012C8  48C0      2299          ext.l     D0
080012CA  0C80 0000 2300          cmp.l     #45,D0
080012CE  002D      
080012D0  6600 002E 2301          bne       vsprintf_60
                    2302   vsprintf_62:
080012D4  2043      2303          move.l    D3,A0
080012D6  1010      2304          move.b    (A0),D0
080012D8  4880      2305          ext.w     D0
080012DA  48C0      2306          ext.l     D0
080012DC  0C80 0000 2307          cmp.l     #45,D0
080012E0  002D      
080012E2  660E      2308          bne.s     vsprintf_63
080012E4  2043      2309          move.l    D3,A0
080012E6  5283      2310          addq.l    #1,D3
080012E8  2242      2311          move.l    D2,A1
080012EA  5282      2312          addq.l    #1,D2
080012EC  1290      2313          move.b    (A0),(A1)
080012EE  5304      2314          subq.b    #1,D4
080012F0  6008      2315          bra.s     vsprintf_64
                    2316   vsprintf_63:
080012F2  2042      2317          move.l    D2,A0
080012F4  5282      2318          addq.l    #1,D2
080012F6  10BC 002B 2319          move.b    #43,(A0)
                    2320   vsprintf_64:
080012FA  5287      2321          addq.l    #1,D7
080012FC  6000 0032 2322          bra       vsprintf_65
                    2323   vsprintf_60:
08001300  4A2E FFCF 2324          tst.b     -49(A6)
08001304  6700 002A 2325          beq       vsprintf_65
08001308  2043      2326          move.l    D3,A0
0800130A  1010      2327          move.b    (A0),D0
0800130C  4880      2328          ext.w     D0
0800130E  48C0      2329          ext.l     D0
08001310  0C80 0000 2330          cmp.l     #45,D0
08001314  002D      
08001316  660E      2331          bne.s     vsprintf_67
08001318  2043      2332          move.l    D3,A0
0800131A  5283      2333          addq.l    #1,D3
0800131C  2242      2334          move.l    D2,A1
0800131E  5282      2335          addq.l    #1,D2
08001320  1290      2336          move.b    (A0),(A1)
08001322  5304      2337          subq.b    #1,D4
08001324  6008      2338          bra.s     vsprintf_68
                    2339   vsprintf_67:
08001326  2042      2340          move.l    D2,A0
08001328  5282      2341          addq.l    #1,D2
0800132A  10BC 0020 2342          move.b    #32,(A0)
                    2343   vsprintf_68:
0800132E  5287      2344          addq.l    #1,D7
                    2345   vsprintf_65:
08001330  4A2E FFD0 2346          tst.b     -48(A6)
08001334  6700 0066 2347          beq       vsprintf_77
08001338  206E 000C 2348          move.l    12(A6),A0
0800133C  1010      2349          move.b    (A0),D0
0800133E  4880      2350          ext.w     D0
08001340  48C0      2351          ext.l     D0
08001342  0C80 0000 2352          cmp.l     #111,D0
08001346  006F      
08001348  671A      2353          beq.s     vsprintf_73
0800134A  6E0C      2354          bgt.s     vsprintf_76
0800134C  0C80 0000 2355          cmp.l     #88,D0
08001350  0058      
08001352  6710      2356          beq.s     vsprintf_73
08001354  6000 0046 2357          bra       vsprintf_77
                    2358   vsprintf_76:
08001358  0C80 0000 2359          cmp.l     #120,D0
0800135C  0078      
0800135E  6704      2360          beq.s     vsprintf_73
08001360  6000 003A 2361          bra       vsprintf_77
                    2362   vsprintf_73:
08001364  2042      2363          move.l    D2,A0
08001366  5282      2364          addq.l    #1,D2
08001368  10BC 0030 2365          move.b    #48,(A0)
0800136C  5287      2366          addq.l    #1,D7
0800136E  206E 000C 2367          move.l    12(A6),A0
08001372  1010      2368          move.b    (A0),D0
08001374  4880      2369          ext.w     D0
08001376  48C0      2370          ext.l     D0
08001378  0C80 0000 2371          cmp.l     #120,D0
0800137C  0078      
0800137E  6712      2372          beq.s     vsprintf_79
08001380  206E 000C 2373          move.l    12(A6),A0
08001384  1010      2374          move.b    (A0),D0
08001386  4880      2375          ext.w     D0
08001388  48C0      2376          ext.l     D0
0800138A  0C80 0000 2377          cmp.l     #88,D0
0800138E  0058      
08001390  660A      2378          bne.s     vsprintf_77
                    2379   vsprintf_79:
08001392  2042      2380          move.l    D2,A0
08001394  5282      2381          addq.l    #1,D2
08001396  10BC 0078 2382          move.b    #120,(A0)
0800139A  5287      2383          addq.l    #1,D7
                    2384   vsprintf_77:
0800139C  2042      2385          move.l    D2,A0
0800139E  4210      2386          clr.b     (A0)
080013A0  206E 000C 2387          move.l    12(A6),A0
080013A4  1010      2388          move.b    (A0),D0
080013A6  4880      2389          ext.w     D0
080013A8  48C0      2390          ext.l     D0
080013AA  0C80 0000 2391          cmp.l     #105,D0
080013AE  0069      
080013B0  6700 0076 2392          beq       vsprintf_82
080013B4  6E42      2393          bgt.s     vsprintf_93
080013B6  0C80 0000 2394          cmp.l     #99,D0
080013BA  0063      
080013BC  6700 0084 2395          beq       vsprintf_96
080013C0  6E1C      2396          bgt.s     vsprintf_94
080013C2  0C80 0000 2397          cmp.l     #88,D0
080013C6  0058      
080013C8  6700 005E 2398          beq       vsprintf_82
080013CC  6E00 0184 2399          bgt       vsprintf_80
080013D0  0C80 0000 2400          cmp.l     #69,D0
080013D4  0045      
080013D6  6700 0050 2401          beq       vsprintf_82
080013DA  6000 0176 2402          bra       vsprintf_80
                    2403   vsprintf_94:
080013DE  0C80 0000 2404          cmp.l     #101,D0
080013E2  0065      
080013E4  6700 0042 2405          beq       vsprintf_82
080013E8  6E00 0168 2406          bgt       vsprintf_80
080013EC  0C80 0000 2407          cmp.l     #100,D0
080013F0  0064      
080013F2  6734      2408          beq.s     vsprintf_82
080013F4  6000 015C 2409          bra       vsprintf_80
                    2410   vsprintf_93:
080013F8  0C80 0000 2411          cmp.l     #117,D0
080013FC  0075      
080013FE  6728      2412          beq.s     vsprintf_82
08001400  6E1A      2413          bgt.s     vsprintf_95
08001402  0C80 0000 2414          cmp.l     #115,D0
08001406  0073      
08001408  6700 0038 2415          beq       vsprintf_96
0800140C  6E00 0144 2416          bgt       vsprintf_80
08001410  0C80 0000 2417          cmp.l     #111,D0
08001414  006F      
08001416  6710      2418          beq.s     vsprintf_82
08001418  6000 0138 2419          bra       vsprintf_80
                    2420   vsprintf_95:
0800141C  0C80 0000 2421          cmp.l     #120,D0
08001420  0078      
08001422  6704      2422          beq.s     vsprintf_82
08001424  6000 012C 2423          bra       vsprintf_80
                    2424   vsprintf_82:
08001428  4A2E FFD2 2425          tst.b     -46(A6)
0800142C  6714      2426          beq.s     vsprintf_96
0800142E  4A2E FFCD 2427          tst.b     -51(A6)
08001432  660E      2428          bne.s     vsprintf_96
08001434  200D      2429          move.l    A5,D0
08001436  9087      2430          sub.l     D7,D0
08001438  4884      2431          ext.w     D4
0800143A  48C4      2432          ext.l     D4
0800143C  9084      2433          sub.l     D4,D0
0800143E  2D40 FFFC 2434          move.l    D0,-4(A6)
                    2435   vsprintf_96:
08001442  202E FFFC 2436          move.l    -4(A6),D0
08001446  0C80 0000 2437          cmp.l     #0,D0
0800144A  0000      
0800144C  6C04      2438          bge.s     vsprintf_98
0800144E  42AE FFFC 2439          clr.l     -4(A6)
                    2440   vsprintf_98:
08001452  4A2E FFCD 2441          tst.b     -51(A6)
08001456  6600 0030 2442          bne       vsprintf_104
0800145A  4884      2443          ext.w     D4
0800145C  48C4      2444          ext.l     D4
0800145E  2004      2445          move.l    D4,D0
08001460  D0AE FFFC 2446          add.l     -4(A6),D0
08001464  D087      2447          add.l     D7,D0
08001466  1D40 FFD1 2448          move.b    D0,-47(A6)
                    2449   vsprintf_102:
0800146A  102E FFD1 2450          move.b    -47(A6),D0
0800146E  4880      2451          ext.w     D0
08001470  48C0      2452          ext.l     D0
08001472  220D      2453          move.l    A5,D1
08001474  534D      2454          subq.w    #1,A5
08001476  B081      2455          cmp.l     D1,D0
08001478  6C0E      2456          bge.s     vsprintf_104
0800147A  4878 0020 2457          pea       32
0800147E  2F0A      2458          move.l    A2,-(A7)
08001480  4E93      2459          jsr       (A3)
08001482  504F      2460          addq.w    #8,A7
08001484  5286      2461          addq.l    #1,D6
08001486  60E2      2462          bra       vsprintf_102
                    2463   vsprintf_104:
08001488  41EE FFD4 2464          lea       -44(A6),A0
0800148C  2408      2465          move.l    A0,D2
                    2466   vsprintf_105:
0800148E  2042      2467          move.l    D2,A0
08001490  4A10      2468          tst.b     (A0)
08001492  6716      2469          beq.s     vsprintf_107
08001494  2042      2470          move.l    D2,A0
08001496  5282      2471          addq.l    #1,D2
08001498  1210      2472          move.b    (A0),D1
0800149A  4881      2473          ext.w     D1
0800149C  48C1      2474          ext.l     D1
0800149E  2F01      2475          move.l    D1,-(A7)
080014A0  2F0A      2476          move.l    A2,-(A7)
080014A2  4E93      2477          jsr       (A3)
080014A4  504F      2478          addq.w    #8,A7
080014A6  5286      2479          addq.l    #1,D6
080014A8  60E4      2480          bra       vsprintf_105
                    2481   vsprintf_107:
080014AA  202E FFFC 2482          move.l    -4(A6),D0
080014AE  1D40 FFD1 2483          move.b    D0,-47(A6)
                    2484   vsprintf_108:
080014B2  102E FFD1 2485          move.b    -47(A6),D0
080014B6  532E FFD1 2486          subq.b    #1,-47(A6)
080014BA  4A00      2487          tst.b     D0
080014BC  670E      2488          beq.s     vsprintf_110
080014BE  4878 0030 2489          pea       48
080014C2  2F0A      2490          move.l    A2,-(A7)
080014C4  4E93      2491          jsr       (A3)
080014C6  504F      2492          addq.w    #8,A7
080014C8  5286      2493          addq.l    #1,D6
080014CA  60E6      2494          bra       vsprintf_108
                    2495   vsprintf_110:
080014CC  2043      2496          move.l    D3,A0
080014CE  4A10      2497          tst.b     (A0)
080014D0  6700 0048 2498          beq       vsprintf_113
080014D4  206E 000C 2499          move.l    12(A6),A0
080014D8  1010      2500          move.b    (A0),D0
080014DA  4880      2501          ext.w     D0
080014DC  48C0      2502          ext.l     D0
080014DE  0C80 0000 2503          cmp.l     #115,D0
080014E2  0073      
080014E4  670C      2504          beq.s     vsprintf_116
080014E6  6E18      2505          bgt.s     vsprintf_119
080014E8  0C80 0000 2506          cmp.l     #99,D0
080014EC  0063      
080014EE  6702      2507          beq.s     vsprintf_116
080014F0  600E      2508          bra.s     vsprintf_119
                    2509   vsprintf_116:
080014F2  2005      2510          move.l    D5,D0
080014F4  5385      2511          subq.l    #1,D5
080014F6  0C80 0000 2512          cmp.l     #0,D0
080014FA  0000      
080014FC  6E02      2513          bgt.s     vsprintf_119
080014FE  6016      2514          bra.s     vsprintf_115
                    2515   vsprintf_119:
08001500  2043      2516          move.l    D3,A0
08001502  5283      2517          addq.l    #1,D3
08001504  1210      2518          move.b    (A0),D1
08001506  4881      2519          ext.w     D1
08001508  48C1      2520          ext.l     D1
0800150A  2F01      2521          move.l    D1,-(A7)
0800150C  2F0A      2522          move.l    A2,-(A7)
0800150E  4E93      2523          jsr       (A3)
08001510  504F      2524          addq.w    #8,A7
08001512  5286      2525          addq.l    #1,D6
08001514  6002      2526          bra.s     vsprintf_112
                    2527   vsprintf_115:
08001516  6002      2528          bra.s     vsprintf_113
                    2529   vsprintf_112:
08001518  60B2      2530          bra       vsprintf_110
                    2531   vsprintf_113:
0800151A  4A2E FFCD 2532          tst.b     -51(A6)
0800151E  6700 0030 2533          beq       vsprintf_125
08001522  4884      2534          ext.w     D4
08001524  48C4      2535          ext.l     D4
08001526  2004      2536          move.l    D4,D0
08001528  D0AE FFFC 2537          add.l     -4(A6),D0
0800152C  D087      2538          add.l     D7,D0
0800152E  1D40 FFD1 2539          move.b    D0,-47(A6)
                    2540   vsprintf_123:
08001532  102E FFD1 2541          move.b    -47(A6),D0
08001536  4880      2542          ext.w     D0
08001538  48C0      2543          ext.l     D0
0800153A  220D      2544          move.l    A5,D1
0800153C  534D      2545          subq.w    #1,A5
0800153E  B081      2546          cmp.l     D1,D0
08001540  6C0E      2547          bge.s     vsprintf_125
08001542  4878 0020 2548          pea       32
08001546  2F0A      2549          move.l    A2,-(A7)
08001548  4E93      2550          jsr       (A3)
0800154A  504F      2551          addq.w    #8,A7
0800154C  5386      2552          subq.l    #1,D6
0800154E  60E2      2553          bra       vsprintf_123
                    2554   vsprintf_125:
08001550  6014      2555          bra.s     vsprintf_81
                    2556   vsprintf_80:
08001552  206E 000C 2557          move.l    12(A6),A0
08001556  1210      2558          move.b    (A0),D1
08001558  4881      2559          ext.w     D1
0800155A  48C1      2560          ext.l     D1
0800155C  2F01      2561          move.l    D1,-(A7)
0800155E  2F0A      2562          move.l    A2,-(A7)
08001560  4E93      2563          jsr       (A3)
08001562  504F      2564          addq.w    #8,A7
08001564  5286      2565          addq.l    #1,D6
                    2566   vsprintf_81:
08001566  52AE 000C 2567          addq.l    #1,12(A6)
                    2568   vsprintf_2:
0800156A  6000 F9D6 2569          bra       vsprintf_1
                    2570   vsprintf_3:
0800156E  4A92      2571          tst.l     (A2)
08001570  6710      2572          beq.s     vsprintf_126
08001572  4201      2573          clr.b     D1
08001574  C2BC 0000 2574          and.l     #255,D1
08001578  00FF      
0800157A  2F01      2575          move.l    D1,-(A7)
0800157C  2F0A      2576          move.l    A2,-(A7)
0800157E  4E93      2577          jsr       (A3)
08001580  504F      2578          addq.w    #8,A7
                    2579   vsprintf_126:
08001582  2006      2580          move.l    D6,D0
08001584  4CDF 3CFC 2581          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08001588  4E5E      2582          unlk      A6
0800158A  4E75      2583          rts
                    2584   @itoa_convert:
0800158C  4E56 0000 2585          link      A6,#0
08001590  48E7 3C00 2586          movem.l   D2/D3/D4/D5,-(A7)
08001594  242E 0008 2587          move.l    8(A6),D2
08001598  262E 0010 2588          move.l    16(A6),D3
0800159C  2A2E 000C 2589          move.l    12(A6),D5
080015A0  2F05      2590          move.l    D5,-(A7)
080015A2  2F03      2591          move.l    D3,-(A7)
080015A4  6100 022C 2592          bsr       ULDIV
080015A8  202F 0004 2593          move.l    4(A7),D0
080015AC  504F      2594          addq.w    #8,A7
080015AE  2800      2595          move.l    D0,D4
080015B0  BA83      2596          cmp.l     D3,D5
080015B2  651A      2597          blo.s     @itoa_convert_1
080015B4  2F03      2598          move.l    D3,-(A7)
080015B6  2F05      2599          move.l    D5,-(A7)
080015B8  2F03      2600          move.l    D3,-(A7)
080015BA  6100 0216 2601          bsr       ULDIV
080015BE  2217      2602          move.l    (A7),D1
080015C0  504F      2603          addq.w    #8,A7
080015C2  2F01      2604          move.l    D1,-(A7)
080015C4  2F02      2605          move.l    D2,-(A7)
080015C6  61C4      2606          bsr       @itoa_convert
080015C8  DEFC 000C 2607          add.w     #12,A7
080015CC  2400      2608          move.l    D0,D2
                    2609   @itoa_convert_1:
080015CE  0C84 0000 2610          cmp.l     #9,D4
080015D2  0009      
080015D4  6E0A      2611          bgt.s     @itoa_convert_3
080015D6  2004      2612          move.l    D4,D0
080015D8  0680 0000 2613          add.l     #48,D0
080015DC  0030      
080015DE  600E      2614          bra.s     @itoa_convert_4
                    2615   @itoa_convert_3:
080015E0  2004      2616          move.l    D4,D0
080015E2  0680 0000 2617          add.l     #97,D0
080015E6  0061      
080015E8  0480 0000 2618          sub.l     #10,D0
080015EC  000A      
                    2619   @itoa_convert_4:
080015EE  2042      2620          move.l    D2,A0
080015F0  1080      2621          move.b    D0,(A0)
080015F2  2002      2622          move.l    D2,D0
080015F4  5280      2623          addq.l    #1,D0
080015F6  4CDF 003C 2624          movem.l   (A7)+,D2/D3/D4/D5
080015FA  4E5E      2625          unlk      A6
080015FC  4E75      2626          rts
                    2627   _ltoa:
080015FE  4E56 0000 2628          link      A6,#0
08001602  48E7 3C00 2629          movem.l   D2/D3/D4/D5,-(A7)
08001606  242E 0008 2630          move.l    8(A6),D2
0800160A  262E 000C 2631          move.l    12(A6),D3
0800160E  2A2E 0010 2632          move.l    16(A6),D5
08001612  2803      2633          move.l    D3,D4
08001614  0C85 0000 2634          cmp.l     #2,D5
08001618  0002      
0800161A  6D08      2635          blt.s     ltoa_3
0800161C  0C85 0000 2636          cmp.l     #36,D5
08001620  0024      
08001622  6F06      2637          ble.s     ltoa_1
                    2638   ltoa_3:
08001624  2003      2639          move.l    D3,D0
08001626  6000 0052 2640          bra       ltoa_4
                    2641   ltoa_1:
0800162A  0C85 0000 2642          cmp.l     #10,D5
0800162E  000A      
08001630  6600 0032 2643          bne       ltoa_5
08001634  0C82 0000 2644          cmp.l     #0,D2
08001638  0000      
0800163A  6C28      2645          bge.s     ltoa_5
0800163C  2002      2646          move.l    D2,D0
0800163E  4480      2647          neg.l     D0
08001640  2400      2648          move.l    D0,D2
08001642  0C82 0000 2649          cmp.l     #0,D2
08001646  0000      
08001648  6C12      2650          bge.s     ltoa_7
0800164A  4879 0800 2651          pea       @itoa_1
0800164E  1BF6      
08001650  2F03      2652          move.l    D3,-(A7)
08001652  6100 016E 2653          bsr       _strcpy
08001656  504F      2654          addq.w    #8,A7
08001658  2003      2655          move.l    D3,D0
0800165A  601E      2656          bra.s     ltoa_4
                    2657   ltoa_7:
0800165C  2044      2658          move.l    D4,A0
0800165E  5284      2659          addq.l    #1,D4
08001660  10BC 002D 2660          move.b    #45,(A0)
                    2661   ltoa_5:
08001664  2F05      2662          move.l    D5,-(A7)
08001666  2F02      2663          move.l    D2,-(A7)
08001668  2F04      2664          move.l    D4,-(A7)
0800166A  6100 FF20 2665          bsr       @itoa_convert
0800166E  DEFC 000C 2666          add.w     #12,A7
08001672  2800      2667          move.l    D0,D4
08001674  2044      2668          move.l    D4,A0
08001676  4210      2669          clr.b     (A0)
08001678  2003      2670          move.l    D3,D0
                    2671   ltoa_4:
0800167A  4CDF 003C 2672          movem.l   (A7)+,D2/D3/D4/D5
0800167E  4E5E      2673          unlk      A6
08001680  4E75      2674          rts
                    2675   _ultoa:
08001682  4E56 0000 2676          link      A6,#0
08001686  48E7 3800 2677          movem.l   D2/D3/D4,-(A7)
0800168A  262E 0010 2678          move.l    16(A6),D3
0800168E  282E 000C 2679          move.l    12(A6),D4
08001692  2404      2680          move.l    D4,D2
08001694  0C83 0000 2681          cmp.l     #2,D3
08001698  0002      
0800169A  6D08      2682          blt.s     ultoa_3
0800169C  0C83 0000 2683          cmp.l     #36,D3
080016A0  0024      
080016A2  6F04      2684          ble.s     ultoa_1
                    2685   ultoa_3:
080016A4  2004      2686          move.l    D4,D0
080016A6  6018      2687          bra.s     ultoa_4
                    2688   ultoa_1:
080016A8  2F03      2689          move.l    D3,-(A7)
080016AA  2F2E 0008 2690          move.l    8(A6),-(A7)
080016AE  2F02      2691          move.l    D2,-(A7)
080016B0  6100 FEDA 2692          bsr       @itoa_convert
080016B4  DEFC 000C 2693          add.w     #12,A7
080016B8  2400      2694          move.l    D0,D2
080016BA  2042      2695          move.l    D2,A0
080016BC  4210      2696          clr.b     (A0)
080016BE  2004      2697          move.l    D4,D0
                    2698   ultoa_4:
080016C0  4CDF 001C 2699          movem.l   (A7)+,D2/D3/D4
080016C4  4E5E      2700          unlk      A6
080016C6  4E75      2701          rts
                    2702   _itoa:
080016C8  4E56 0000 2703          link      A6,#0
080016CC  2F2E 0010 2704          move.l    16(A6),-(A7)
080016D0  2F2E 000C 2705          move.l    12(A6),-(A7)
080016D4  2F2E 0008 2706          move.l    8(A6),-(A7)
080016D8  6100 FF24 2707          bsr       _ltoa
080016DC  DEFC 000C 2708          add.w     #12,A7
080016E0  4E5E      2709          unlk      A6
080016E2  4E75      2710          rts
                    2711   ULMUL:
080016E4  4E56 0000 2712          link    A6,#0
080016E8  48E7 C000 2713          movem.l D0/D1,-(A7)
080016EC  222E 0008 2714          move.l  8(A6),D1
080016F0  202E 000C 2715          move.l  12(A6),D0
080016F4  602C      2716          bra.s   lmul_3
                    2717   LMUL:
080016F6  4E56 0000 2718          link    A6,#0
080016FA  48E7 C000 2719          movem.l D0/D1,-(A7)
080016FE  222E 0008 2720          move.l  8(A6),D1
08001702  202E 000C 2721          move.l  12(A6),D0
08001706  4A80      2722          tst.l   D0
08001708  6A0A      2723          bpl.s   lmul_1
0800170A  4480      2724          neg.l   D0
0800170C  4A81      2725          tst.l   D1
0800170E  6A0A      2726          bpl.s   lmul_2
08001710  4481      2727          neg.l   D1
08001712  600E      2728          bra.s   lmul_3
                    2729   lmul_1:
08001714  4A81      2730          tst.l   D1
08001716  6A0A      2731          bpl.s   lmul_3
08001718  4481      2732          neg.l   D1
                    2733   lmul_2:
0800171A  6114      2734          bsr.s   domul
0800171C  4481      2735          neg.l   D1
0800171E  4080      2736          negx.l  D0
08001720  6002      2737          bra.s   lmul_4
                    2738   lmul_3:
08001722  610C      2739          bsr.s   domul
                    2740   lmul_4:
08001724  2D41 0008 2741          move.l  D1,8(A6)
08001728  4CDF 0003 2742          movem.l (A7)+,D0/D1
0800172C  4E5E      2743          unlk    A6
0800172E  4E75      2744          rts
                    2745   domul:
08001730  0C81 0000 2746          cmpi.l  #$FFFF,D1
08001734  FFFF      
08001736  620C      2747          bhi.s   domul_1
08001738  0C80 0000 2748          cmpi.l  #$FFFF,D0
0800173C  FFFF      
0800173E  620E      2749          bhi.s   domul_2
08001740  C2C0      2750          mulu    D0,D1
08001742  4E75      2751          rts
                    2752   domul_1:
08001744  0C80 0000 2753          cmpi.l  #$FFFF,D0
08001748  FFFF      
0800174A  6218      2754          bhi.s   domul_4
0800174C  6002      2755          bra.s   domul_3
                    2756   domul_2
0800174E  C141      2757          exg     D0,D1
                    2758   domul_3:
08001750  2F02      2759          move.l  D2,-(A7)
08001752  2401      2760          move.l  D1,D2
08001754  4842      2761          swap    D2
08001756  C2C0      2762          mulu    D0,D1
08001758  C4C0      2763          mulu    D0,D2
0800175A  4842      2764          swap    D2
0800175C  4242      2765          clr.w   D2
0800175E  D282      2766          add.l   D2,D1
08001760  241F      2767          move.l  (A7)+,D2
08001762  4E75      2768          rts
                    2769   domul_4:
08001764  48E7 3000 2770          movem.l D2/D3,-(A7)
08001768  2401      2771          move.l  D1,D2
0800176A  2601      2772          move.l  D1,D3
0800176C  C2C0      2773          mulu    D0,D1
0800176E  4842      2774          swap    D2
08001770  C4C0      2775          mulu    D0,D2
08001772  4840      2776          swap    D0
08001774  C6C0      2777          mulu    D0,D3
08001776  D483      2778          add.l   D3,D2
08001778  4842      2779          swap    D2
0800177A  4242      2780          clr.w   D2
0800177C  D282      2781          add.l   D2,D1
0800177E  4CDF 000C 2782          movem.l (A7)+,D2/D3
08001782  4E75      2783          rts
                    2784   _strlen:
08001784  206F 0004 2785          move.l    (4,A7),A0
08001788  2248      2786          move.l    A0,A1
                    2787   strlen_1:
0800178A  4A19      2788          tst.b     (A1)+
0800178C  66FC      2789          bne       strlen_1
0800178E  2009      2790          move.l    A1,D0
08001790  9088      2791          sub.l     A0,D0
08001792  5380      2792          subq.l    #1,D0
08001794  4E75      2793          rts
                    2794   _toupper:
08001796  4E56 0000 2795          link      A6,#0
0800179A  48E7 2000 2796          movem.l   D2,-(A7)
0800179E  242E 0008 2797          move.l    8(A6),D2
080017A2  0C82 0000 2798          cmp.l     #97,D2
080017A6  0061      
080017A8  6D0E      2799          blt.s     toupper_1
080017AA  0C82 0000 2800          cmp.l     #122,D2
080017AE  007A      
080017B0  6E06      2801          bgt.s     toupper_1
080017B2  C4BC 0000 2802          and.l     #95,D2
080017B6  005F      
                    2803   toupper_1:
080017B8  2002      2804          move.l    D2,D0
080017BA  4CDF 0004 2805          movem.l   (A7)+,D2
080017BE  4E5E      2806          unlk      A6
080017C0  4E75      2807          rts
                    2808   _strcpy:
080017C2  206F 0004 2809          move.l    (4,A7),A0
080017C6  226F 0008 2810          move.l    (8,A7),A1
080017CA  2008      2811          move.l    A0,D0
                    2812   strcpy_1:
080017CC  10D9      2813          move.b    (A1)+,(A0)+
080017CE  66FC      2814          bne       strcpy_1
080017D0  4E75      2815          rts
                    2816   ULDIV:
080017D2  4E56 0000 2817          link    A6,#0
080017D6  48E7 C000 2818          movem.l D0/D1,-(A7)
080017DA  222E 0008 2819          move.l  8(A6),D1
080017DE  202E 000C 2820          move.l  12(A6),D0
080017E2  6036      2821          bra.s   ldiv_3
                    2822   LDIV:
080017E4  4E56 0000 2823          link    A6,#0
080017E8  48E7 C000 2824          movem.l D0/D1,-(A7)
080017EC  222E 0008 2825          move.l  8(A6),D1
080017F0  202E 000C 2826          move.l  12(A6),D0
080017F4  4A80      2827          tst.l   D0
080017F6  6A0E      2828          bpl.s   ldiv_1
080017F8  4480      2829          neg.l   D0
080017FA  4A81      2830          tst.l   D1
080017FC  6A14      2831          bpl.s   ldiv_2
080017FE  4481      2832          neg.l   D1
08001800  612A      2833          bsr.s   dodiv
08001802  4481      2834          neg.l   D1
08001804  6016      2835          bra.s   ldiv_4
                    2836   ldiv_1:
08001806  4A81      2837          tst.l   D1
08001808  6A10      2838          bpl.s   ldiv_3
0800180A  4481      2839          neg.l   D1
0800180C  611E      2840          bsr.s   dodiv
0800180E  4480      2841          neg.l   D0
08001810  600A      2842          bra.s   ldiv_4
                    2843   ldiv_2:
08001812  6118      2844          bsr.s   dodiv
08001814  4480      2845          neg.l   D0
08001816  4481      2846          neg.l   D1
08001818  6002      2847          bra.s   ldiv_4
                    2848   ldiv_3:
0800181A  6110      2849          bsr.s   dodiv
                    2850   ldiv_4:
0800181C  2D40 0008 2851          move.l  D0,8(A6)
08001820  2D41 000C 2852          move.l  D1,12(A6)
08001824  4CDF 0003 2853          movem.l (A7)+,D0/D1
08001828  4E5E      2854          unlk    A6
0800182A  4E75      2855          rts
                    2856   dodiv:
0800182C  0C81 0000 2857          cmpi.l  #$FFFF,D1
08001830  FFFF      
08001832  6236      2858          bhi.s   dodiv_2
08001834  0C80 0000 2859          cmpi.l  #$FFFF,D0
08001838  FFFF      
0800183A  6210      2860          bhi.s   dodiv_1
0800183C  80C1      2861          divu    D1,D0
0800183E  2200      2862          move.l  D0,D1
08001840  4241      2863          clr.w   D1
08001842  4841      2864          swap    D1
08001844  0280 0000 2865          andi.l  #$FFFF,D0
08001848  FFFF      
0800184A  4E75      2866          rts
                    2867   dodiv_1:
0800184C  48A7 A000 2868          movem.w D0/D2,-(A7)
08001850  4240      2869          clr.w   D0
08001852  4840      2870          swap    D0
08001854  80C1      2871          divu    D1,D0
08001856  3400      2872          move.w  D0,D2
08001858  301F      2873          move.w  (A7)+,D0
0800185A  80C1      2874          divu    D1,D0
0800185C  4840      2875          swap    D0
0800185E  4281      2876          clr.l   D1
08001860  3200      2877          move.w  D0,D1
08001862  3002      2878          move.w  D2,D0
08001864  4840      2879          swap    D0
08001866  341F      2880          move.w  (A7)+,D2
08001868  4E75      2881          rts
                    2882   dodiv_2:
0800186A  48E7 3800 2883          movem.l D2/D3/D4,-(A7)
0800186E  2401      2884          move.l  D1,D2
08001870  4242      2885          clr.w   D2
08001872  4842      2886          swap    D2
08001874  5282      2887          addq.l  #1,D2
08001876  2600      2888          move.l  D0,D3
08001878  2801      2889          move.l  D1,D4
0800187A  2202      2890          move.l  D2,D1
0800187C  61CE      2891          bsr.s   dodiv_1
0800187E  2204      2892          move.l  D4,D1
08001880  82C2      2893          divu    D2,D1
08001882  80C1      2894          divu    D1,D0
08001884  0280 0000 2895          andi.l  #$FFFF,D0
08001888  FFFF      
                    2896   dodiv_3:
0800188A  2204      2897          move.l  D4,D1
0800188C  2404      2898          move.l  D4,D2
0800188E  4842      2899          swap    D2
08001890  C2C0      2900          mulu    D0,D1
08001892  C4C0      2901          mulu    D0,D2
08001894  4842      2902          swap    D2
08001896  D282      2903          add.l   D2,D1
08001898  9283      2904          sub.l   D3,D1
0800189A  620A      2905          bhi.s   dodiv_4
0800189C  4481      2906          neg.l   D1
0800189E  B881      2907          cmp.l   D1,D4
080018A0  6208      2908          bhi.s   dodiv_5
080018A2  5280      2909          addq.l  #1,D0
080018A4  60E4      2910          bra.s   dodiv_3
                    2911   dodiv_4:
080018A6  5380      2912          subq.l  #1,D0
080018A8  60E0      2913          bra.s   dodiv_3
                    2914   dodiv_5:
080018AA  4CDF 001C 2915          movem.l (A7)+,D2/D3/D4
080018AE  4E75      2916          rts
                    2917          section   const
080018B0            2918                   align
                    2919   
                    2920   
                    2921   @m68kus~1_1:
080018B0  0D0A 2064 2922          dc.b      13,10,32,100,97,116,97,32,105,115,32,37,100
080018B4  6174 6120 
080018B8  6973 2025 
080018BC  64        
080018BD  0D0A 00   2923          dc.b      13,10,0
                    2924   @m68kus~1_2:
080018C0  0D0A 2073 2925          dc.b      13,10,32,115,108,97,118,101,97,100,100,114,32
080018C4  6C61 7665 
080018C8  6164 6472 
080018CC  20        
080018CD  2578 0D0A 2926          dc.b      37,120,13,10,0
080018D1  00        
                    2927   @m68kus~1_3:
080018D2  0D0A 206D 2928          dc.b      13,10,32,109,101,109,97,100,100,114,104,105
080018D6  656D 6164 
080018DA  6472 6869 
080018DE  2069 7320 2929          dc.b      32,105,115,32,37,100,13,10,0
080018E2  2564 0D0A 
080018E6  00        
                    2930   @m68kus~1_4:
080018E8  0D0A 206D 2931          dc.b      13,10,32,109,101,109,97,100,100,114,108,111
080018EC  656D 6164 
080018F0  6472 6C6F 
080018F4  2069 7320 2932          dc.b      32,105,115,32,37,100,13,10,0
080018F8  2564 0D0A 
080018FC  00        
                    2933   @m68kus~1_5:
080018FE  0D0A 2025 2934          dc.b      13,10,32,37,120,32,37,120,37,120,0
08001902  7820 2578 
08001906  2578 00   
                    2935   @m68kus~1_6:
0800190A  0D0A 2043 2936          dc.b      13,10,32,67,104,97,110,103,105,110,103,32,115
0800190E  6861 6E67 
08001912  696E 6720 
08001916  73        
08001917  6C61 7665 2937          dc.b      108,97,118,101,32,97,110,100,32,114,101,115
0800191B  2061 6E64 
0800191F  2072 6573 
08001923  7461 7274 2938          dc.b      116,97,114,116,32,37,120,0
08001927  2025 7800 
                    2939   @m68kus~1_7:
0800192C  0D0A 2048 2940          dc.b      13,10,32,72,73,84,32,69,68,71,69,32,67,65,83
08001930  4954 2045 
08001934  4447 4520 
08001938  4341 53   
0800193B  4520 2578 2941          dc.b      69,32,37,120,32,37,120,37,120,0
0800193F  2025 7825 
08001943  7800      
                    2942   @m68kus~1_8:
08001946  0D0A 5365 2943          dc.b      13,10,83,101,108,101,99,116,32,98,97,110,107
0800194A  6C65 6374 
0800194E  2062 616E 
08001952  6B        
08001953  3A0D 0A30 2944          dc.b      58,13,10,48,32,45,32,66,97,110,107,32,48,13
08001957  202D 2042 
0800195B  616E 6B20 
0800195F  300D      
08001961  0A31 202D 2945          dc.b      10,49,32,45,32,66,97,110,107,32,49,0
08001965  2042 616E 
08001969  6B20 3100 
                    2946   @m68kus~1_9:
0800196E  0D0A 496E 2947          dc.b      13,10,73,110,118,97,108,105,100,32,115,101,108
08001972  7661 6C69 
08001976  6420 7365 
0800197A  6C        
0800197B  6563 7469 2948          dc.b      101,99,116,105,111,110,46,0
0800197F  6F6E 2E00 
                    2949   @m68kus~1_10:
08001984  0D0A 456E 2950          dc.b      13,10,69,110,116,101,114,32,109,101,109,32,97
08001988  7465 7220 
0800198C  6D65 6D20 
08001990  61        
08001991  6464 7265 2951          dc.b      100,100,114,101,115,115,32,104,105,58,0
08001995  7373 2068 
08001999  693A 00   
                    2952   @m68kus~1_11:
0800199C  0D0A 456E 2953          dc.b      13,10,69,110,116,101,114,32,109,101,109,32,97
080019A0  7465 7220 
080019A4  6D65 6D20 
080019A8  61        
080019A9  6464 7265 2954          dc.b      100,100,114,101,115,115,32,108,111,58,0
080019AD  7373 206C 
080019B1  6F3A 00   
                    2955   @m68kus~1_12:
080019B4  0D0A 4C61 2956          dc.b      13,10,76,97,98,32,53,58,32,73,50,67,0
080019B8  6220 353A 
080019BC  2049 3243 
080019C0  00        
                    2957   @m68kus~1_13:
080019C2  0D0A 4368 2958          dc.b      13,10,67,104,111,111,115,101,32,116,104,101
080019C6  6F6F 7365 
080019CA  2074 6865 
080019CE  2066 6F6C 2959          dc.b      32,102,111,108,108,111,119,105,110,103,58,13
080019D2  6C6F 7769 
080019D6  6E67 3A0D 
080019DA  0A30 202D 2960          dc.b      10,48,32,45,32,87,114,105,116,101,32,66,121
080019DE  2057 7269 
080019E2  7465 2042 
080019E6  79        
080019E7  7465 0D0A 2961          dc.b      116,101,13,10,49,32,45,32,82,101,97,100,32,66
080019EB  3120 2D20 
080019EF  5265 6164 
080019F3  2042      
080019F5  7974 650D 2962          dc.b      121,116,101,13,10,50,32,45,32,80,97,103,101
080019F9  0A32 202D 
080019FD  2050 6167 
08001A01  65        
08001A02  2057 7269 2963          dc.b      32,87,114,105,116,101,13,10,51,32,45,32,80,97
08001A06  7465 0D0A 
08001A0A  3320 2D20 
08001A0E  5061      
08001A10  6765 2052 2964          dc.b      103,101,32,82,101,97,100,13,10,52,32,45,32,65
08001A14  6561 640D 
08001A18  0A34 202D 
08001A1C  2041      
08001A1E  4443 2073 2965          dc.b      68,67,32,115,116,117,102,102,32,116,111,100
08001A22  7475 6666 
08001A26  2074 6F64 
08001A2A  6F0D 0A00 2966          dc.b      111,13,10,0
                    2967   @m68kus~1_14:
08001A2E  0D0A 456E 2968          dc.b      13,10,69,110,116,101,114,32,98,121,116,101,32
08001A32  7465 7220 
08001A36  6279 7465 
08001A3A  20        
08001A3B  746F 2077 2969          dc.b      116,111,32,119,114,105,116,101,58,32,0
08001A3F  7269 7465 
08001A43  3A20 00   
                    2970   @m68kus~1_15:
08001A46  0D0A 5772 2971          dc.b      13,10,87,114,105,116,116,101,110,32,37,120,32
08001A4A  6974 7465 
08001A4E  6E20 2578 
08001A52  20        
08001A53  746F 2062 2972          dc.b      116,111,32,98,97,110,107,32,37,100,32,97,116
08001A57  616E 6B20 
08001A5B  2564 2061 
08001A5F  74        
08001A60  206D 656D 2973          dc.b      32,109,101,109,97,100,100,114,32,104,105,58
08001A64  6164 6472 
08001A68  2068 693A 
08001A6C  2025 7820 2974          dc.b      32,37,120,32,109,101,109,32,97,100,100,114,32
08001A70  6D65 6D20 
08001A74  6164 6472 
08001A78  20        
08001A79  6C6F 3A20 2975          dc.b      108,111,58,32,37,120,0
08001A7D  2578 00   
                    2976   @m68kus~1_16:
08001A80  0D0A 5265 2977          dc.b      13,10,82,101,97,100,32,37,120,32,102,114,111
08001A84  6164 2025 
08001A88  7820 6672 
08001A8C  6F        
08001A8D  6D20 6261 2978          dc.b      109,32,98,97,110,107,32,37,100,32,97,116,32
08001A91  6E6B 2025 
08001A95  6420 6174 
08001A99  20        
08001A9A  6D65 6D61 2979          dc.b      109,101,109,97,100,100,114,32,104,105,58,32
08001A9E  6464 7220 
08001AA2  6869 3A20 
08001AA6  2578 206D 2980          dc.b      37,120,32,109,101,109,32,97,100,100,114,32,108
08001AAA  656D 2061 
08001AAE  6464 7220 
08001AB2  6C        
08001AB3  6F3A 2025 2981          dc.b      111,58,32,37,120,0
08001AB7  7800      
                    2982   @m68kus~1_17:
08001ABA  0D0A 6272 2983          dc.b      13,10,98,114,117,104,0
08001ABE  7568 00   
                    2984   @m68kus~1_18:
08001AC2  0D0A 456E 2985          dc.b      13,10,69,110,116,101,114,32,115,105,122,101
08001AC6  7465 7220 
08001ACA  7369 7A65 
08001ACE  206F 6620 2986          dc.b      32,111,102,32,112,97,103,101,32,116,111,32,119
08001AD2  7061 6765 
08001AD6  2074 6F20 
08001ADA  77        
08001ADB  7269 7465 2987          dc.b      114,105,116,101,40,109,97,120,32,49,50,56,32
08001ADF  286D 6178 
08001AE3  2031 3238 
08001AE7  20        
08001AE8  696E 2068 2988          dc.b      105,110,32,104,101,120,32,61,61,32,48,120,55
08001AEC  6578 203D 
08001AF0  3D20 3078 
08001AF4  37        
08001AF5  4629 3A20 2989          dc.b      70,41,58,32,0
08001AF9  00        
                    2990   @m68kus~1_19:
08001AFA  0D0A 5772 2991          dc.b      13,10,87,114,111,116,101,32,118,97,108,117,101
08001AFE  6F74 6520 
08001B02  7661 6C75 
08001B06  65        
08001B07  7320 7374 2992          dc.b      115,32,115,116,97,114,116,105,110,103,32,97
08001B0B  6172 7469 
08001B0F  6E67 2061 
08001B13  7420 6D65 2993          dc.b      116,32,109,101,109,97,100,100,114,32,48,120
08001B17  6D61 6464 
08001B1B  7220 3078 
08001B1F  2578 2578 2994          dc.b      37,120,37,120,32,97,110,100,32,98,97,110,107
08001B23  2061 6E64 
08001B27  2062 616E 
08001B2B  6B        
08001B2C  2025 642C 2995          dc.b      32,37,100,44,32,116,111,116,97,108,32,115,105
08001B30  2074 6F74 
08001B34  616C 2073 
08001B38  69        
08001B39  7A65 3A20 2996          dc.b      122,101,58,32,37,120,13,10,68,97,116,97,58,32
08001B3D  2578 0D0A 
08001B41  4461 7461 
08001B45  3A20      
08001B47  00        2997          dc.b      0
                    2998   @m68kus~1_20:
08001B48  2578 00   2999          dc.b      37,120,0
                    3000   @m68kus~1_21:
08001B4C  0D0A 456E 3001          dc.b      13,10,69,110,116,101,114,32,115,105,122,101
08001B50  7465 7220 
08001B54  7369 7A65 
08001B58  206F 6620 3002          dc.b      32,111,102,32,112,97,103,101,32,116,111,32,114
08001B5C  7061 6765 
08001B60  2074 6F20 
08001B64  72        
08001B65  6561 6428 3003          dc.b      101,97,100,40,109,97,120,32,49,50,56,32,105
08001B69  6D61 7820 
08001B6D  3132 3820 
08001B71  69        
08001B72  6E20 6865 3004          dc.b      110,32,104,101,120,32,61,61,32,48,120,55,70
08001B76  7820 3D3D 
08001B7A  2030 7837 
08001B7E  46        
08001B7F  293A 2000 3005          dc.b      41,58,32,0
                    3006   @m68kus~1_22:
08001B84  0D0A 5265 3007          dc.b      13,10,82,101,97,100,32,118,97,108,117,101,115
08001B88  6164 2076 
08001B8C  616C 7565 
08001B90  73        
08001B91  2073 7461 3008          dc.b      32,115,116,97,114,116,105,110,103,32,97,116
08001B95  7274 696E 
08001B99  6720 6174 
08001B9D  206D 656D 3009          dc.b      32,109,101,109,97,100,100,114,32,48,120,37,120
08001BA1  6164 6472 
08001BA5  2030 7825 
08001BA9  78        
08001BAA  2578 2061 3010          dc.b      37,120,32,97,110,100,32,98,97,110,107,32,37
08001BAE  6E64 2062 
08001BB2  616E 6B20 
08001BB6  25        
08001BB7  642C 2074 3011          dc.b      100,44,32,116,111,116,97,108,32,115,105,122
08001BBB  6F74 616C 
08001BBF  2073 697A 
08001BC3  653A 2025 3012          dc.b      101,58,32,37,120,13,10,68,97,116,97,58,32,0
08001BC7  780D 0A44 
08001BCB  6174 613A 
08001BCF  2000      
                    3013   @m68kus~1_23:
08001BD2  0D0A 496E 3014          dc.b      13,10,73,110,118,97,108,105,100,32,83,101,108
08001BD6  7661 6C69 
08001BDA  6420 5365 
08001BDE  6C        
08001BDF  6563 7469 3015          dc.b      101,99,116,105,111,110,46,13,10,0
08001BE3  6F6E 2E0D 
08001BE7  0A00      
                    3016          section   data
08001BEA            3017                   align
                    3018   
                    3019   *********************************************************************************************************************************************************
                    3020   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    3021   ********************************************************************************************************************************************************
                    3022   
          0800 1BEA 3023   DataStart       equ       *
08001BEA            3024   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
08001BEE            3025   __allocp:       ds.l      1                    start of free memory block list
08001BF2            3026   __heap:         ds.l      1                    begin of free memory
                    3027   
                    3028   
                    3029   @itoa_1:
08001BF6  2D32 3134 3030          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
08001BFA  3734 3833 
08001BFE  3634 3800 
                    3031          section   bss
08001C02            3032                   align
                    3033   
          0800 1C02 3034   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 0018 3035   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    3036   
                    3037   *********************************************************************************************************
                    3038   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    3039   *********************************************************************************************************
          0800 1C02 3040   BssStart       equ       *
                    3041   
                    3042   _i:
08001C02            3043          ds.b      4
                    3044   _x:
08001C06            3045          ds.b      4
                    3046   _y:
08001C0A            3047          ds.b      4
                    3048   _z:
08001C0E            3049          ds.b      4
                    3050   _PortA_Count:
08001C12            3051          ds.b      4
                    3052   _Timer1Count:
08001C16            3053          ds.b      1
                    3054   _Timer2Count:
08001C18            3055          ds.b      1
                    3056   _Timer3Count:
08001C1A            3057          ds.b      1
                    3058   _Timer4Count:
08001C1C            3059          ds.b      1
                    3060          section   heap
08001C1E            3061                  align
                    3062   
          0800 1C1E 3063   BssEnd         equ       *
          0000 001C 3064   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    3065   
                    3066   *********************************************************************************************************
                    3067   * Section for Heap
                    3068   *********************************************************************************************************
                    3069   
          0800 1C1E 3070   heap           equ       *
08001C1E            3071                  align
          0800 0000

Assembly errors: 0
