680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 25 Mar 2022      Time: 19:24:59          Source: C:\USERS\MARTINCHUA\DESKTOP\CPEN412\CPEN412\LAB5\M68KUSERPROGRAM.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  1E2A      
0800000A  203C 0000   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  001C      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  1E12      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  1E16      
0800002C  23FC 0800   40                   move.l    #heap,__heap           pointer to free memory
08000030  1E46 0800 
08000034  1E1A      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  0AEC      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; C:\USERS\MARTINCHUA\DESKTOP\CPEN412\CPEN412\LAB5\M68KUSERPROGRAM (DE1).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdio.h>
                      46   ; #include <string.h>
                      47   ; #include <ctype.h>
                      48   ; //IMPORTANT
                      49   ; //
                      50   ; // Uncomment one of the two #defines below
                      51   ; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
                      52   ; // 0B000000 for running programs from dram
                      53   ; //
                      54   ; // In your labs, you will initially start by designing a system with SRam and later move to
                      55   ; // Dram, so these constants will need to be changed based on the version of the system you have
                      56   ; // building
                      57   ; //
                      58   ; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
                      59   ; // is based around Dram so #define accordingly before building
                      60   ; // #define StartOfExceptionVectorTable 0x08030000
                      61   ; #define StartOfExceptionVectorTable 0x0B000000
                      62   ; /**********************************************************************************************
                      63   ; **	Parallel port addresses
                      64   ; **********************************************************************************************/
                      65   ; #define PortA   *(volatile unsigned char *)(0x00400000)
                      66   ; #define PortB   *(volatile unsigned char *)(0x00400002)
                      67   ; #define PortC   *(volatile unsigned char *)(0x00400004)
                      68   ; #define PortD   *(volatile unsigned char *)(0x00400006)
                      69   ; #define PortE   *(volatile unsigned char *)(0x00400008)
                      70   ; /*********************************************************************************************
                      71   ; **	Hex 7 seg displays port addresses
                      72   ; *********************************************************************************************/
                      73   ; #define HEX_A        *(volatile unsigned char *)(0x00400010)
                      74   ; #define HEX_B        *(volatile unsigned char *)(0x00400012)
                      75   ; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
                      76   ; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
                      77   ; /**********************************************************************************************
                      78   ; **	LCD display port addresses
                      79   ; **********************************************************************************************/
                      80   ; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
                      81   ; #define LCDdata      *(volatile unsigned char *)(0x00400022)
                      82   ; /********************************************************************************************
                      83   ; **	Timer Port addresses
                      84   ; *********************************************************************************************/
                      85   ; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
                      86   ; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
                      87   ; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
                      88   ; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
                      89   ; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
                      90   ; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
                      91   ; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
                      92   ; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
                      93   ; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
                      94   ; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
                      95   ; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
                      96   ; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
                      97   ; /*********************************************************************************************
                      98   ; **	RS232 port addresses
                      99   ; *********************************************************************************************/
                     100   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                     101   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                     102   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                     103   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                     104   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                     105   ; /*********************************************************************************************
                     106   ; **	PIA 1 and 2 port addresses
                     107   ; *********************************************************************************************/
                     108   ; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
                     109   ; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
                     110   ; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
                     111   ; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
                     112   ; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
                     113   ; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
                     114   ; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
                     115   ; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
                     116   ; /*************************************************************
                     117   ; ** I2C Controller registers
                     118   ; **************************************************************/
                     119   ; // I2C Registers
                     120   ; #define I2C_PRERLO     (*(volatile unsigned char *)(0x00408000))
                     121   ; #define I2C_PRERHI     (*(volatile unsigned char *)(0x00408002))
                     122   ; #define I2C_CTR        (*(volatile unsigned char *)(0x00408004))
                     123   ; #define I2C_TXR        (*(volatile unsigned char *)(0x00408006))
                     124   ; #define I2C_RXR        (*(volatile unsigned char *)(0x00408006))
                     125   ; #define I2C_CR         (*(volatile unsigned char *)(0x00408008))
                     126   ; #define I2C_SR         (*(volatile unsigned char *)(0x00408008))
                     127   ; // STA bit == cmd[7], W bit == cmd[4], IACK bit == cmd[0] -> 8'b1001_0001
                     128   ; #define WSTART 0x91
                     129   ; // STO bit == cmd[6], W bit == cmd[4] -> 8'b0101_0000
                     130   ; #define WSTOP 0x50
                     131   ; // W bit = cmd[4] -> 8'b0001_0000
                     132   ; #define WRITE 0x10
                     133   ; // R bit == cmd[5], NACK bit == cmd[3], IACK bit == cmd[0] -> 8'b0010_1001
                     134   ; #define READNACK 0x29
                     135   ; // R bit == cmd[5], NACK bit == cmd[3], IACK bit == cmd[0] -> 8'b0010_0001
                     136   ; #define READACK 0x21
                     137   ; #define EEPROM_SLAVE_BANK0 0xA0
                     138   ; #define EEPROM_SLAVE_BANK1 0xA8
                     139   ; #define ADCDAC_SLAVE 0x90
                     140   ; // 8'b01xx_0xxx
                     141   ; #define DAC_OUT_ON 0x40
                     142   ; // 8'b00xx_0xxx
                     143   ; #define DAC_OUT_OFF 0x00
                     144   ; // 8'b0000_0101
                     145   ; #define ADC_AUTO_INCREMENT_A1 0x05
                     146   ; #define ADC_AUTO_INCREMENT_A0 0x04
                     147   ; /*********************************************************************************************************************************
                     148   ; (( DO NOT initialise global variables here, do it main even if you want 0
                     149   ; (( it's a limitation of the compiler
                     150   ; (( YOU HAVE BEEN WARNED
                     151   ; *********************************************************************************************************************************/
                     152   ; unsigned int i, x, y, z, PortA_Count;
                     153   ; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count ;
                     154   ; /*******************************************************************************************
                     155   ; ** Function Prototypes
                     156   ; *******************************************************************************************/
                     157   ; void Wait1ms(void);
                     158   ; void Wait3ms(void);
                     159   ; void Wait250ms(void);
                     160   ; void Wait750ms(void);
                     161   ; void Wait1s(void);
                     162   ; void Init_LCD(void) ;
                     163   ; void LCDOutchar(int c);
                     164   ; void LCDOutMess(char *theMessage);
                     165   ; void LCDClearln(void);
                     166   ; void LCDline1Message(char *theMessage);
                     167   ; void LCDline2Message(char *theMessage);
                     168   ; int sprintf(char *out, const char *format, ...) ;
                     169   ; // I2C
                     170   ; void I2C_Init(void);
                     171   ; void I2C_Start(void);
                     172   ; void I2C_Stop(void);
                     173   ; void WaitForTIPFlagReset(void);
                     174   ; void WaitForRxACK(void);
                     175   ; void WriteI2CChar(char data, char slave_addr, char memaddr_hi, char memaddr_lo);
                     176   ; void ReadI2CChar(char *data, char slave_addr, char memaddr_hi, char memaddr_lo);
                     177   ; void WriteI2CPage(char slave_addr, char memaddr_hi, char memaddr_lo, char size);
                     178   ; void ReadI2CPage(char *data, char slave_addr, char memaddr_hi, char memaddr_lo, char size);
                     179   ; void GetMemAddr(char *hi, char *lo);
                     180   ; void GetBank(char *bank);
                     181   ; void Wait(void);
                     182   ; void readADC(void);
                     183   ; /*****************************************************************************************
                     184   ; **	Interrupt service routine for Timers
                     185   ; **
                     186   ; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
                     187   ; **  out which timer is producing the interrupt
                     188   ; **
                     189   ; *****************************************************************************************/
                     190   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     191   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     192   ; char xtod(int c)
                     193   ; {
                     194   _xtod:
0800003E  4E56 0000  195          link      A6,#0
08000042  2F02       196          move.l    D2,-(A7)
08000044  242E 0008  197          move.l    8(A6),D2
                     198   ; if ((char)(c) <= (char)('9'))
08000048  0C02 0039  199          cmp.b     #57,D2
0800004C  6E08       200          bgt.s     xtod_1
                     201   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
0800004E  1002       202          move.b    D2,D0
08000050  0400 0030  203          sub.b     #48,D0
08000054  6014       204          bra.s     xtod_3
                     205   xtod_1:
                     206   ; else if((char)(c) > (char)('F'))    // assume lower case
08000056  0C02 0046  207          cmp.b     #70,D2
0800005A  6F08       208          ble.s     xtod_4
                     209   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
0800005C  1002       210          move.b    D2,D0
0800005E  0400 0057  211          sub.b     #87,D0
08000062  6006       212          bra.s     xtod_3
                     213   xtod_4:
                     214   ; else
                     215   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
08000064  1002       216          move.b    D2,D0
08000066  0400 0037  217          sub.b     #55,D0
                     218   xtod_3:
0800006A  241F       219          move.l    (A7)+,D2
0800006C  4E5E       220          unlk      A6
0800006E  4E75       221          rts
                     222   ; }
                     223   ; int Get2HexDigits(char *CheckSumPtr)
                     224   ; {
                     225   _Get2HexDigits:
08000070  4E56 0000  226          link      A6,#0
08000074  2F02       227          move.l    D2,-(A7)
                     228   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
08000076  2F00       229          move.l    D0,-(A7)
08000078  4EB9 0800  230          jsr       __getch
0800007C  02C8      
0800007E  2200       231          move.l    D0,D1
08000080  201F       232          move.l    (A7)+,D0
08000082  2F01       233          move.l    D1,-(A7)
08000084  4EB9 0800  234          jsr       _xtod
08000088  003E      
0800008A  584F       235          addq.w    #4,A7
0800008C  C0BC 0000  236          and.l     #255,D0
08000090  00FF      
08000092  E980       237          asl.l     #4,D0
08000094  2F00       238          move.l    D0,-(A7)
08000096  2F01       239          move.l    D1,-(A7)
08000098  4EB9 0800  240          jsr       __getch
0800009C  02C8      
0800009E  221F       241          move.l    (A7)+,D1
080000A0  2F00       242          move.l    D0,-(A7)
080000A2  4EB9 0800  243          jsr       _xtod
080000A6  003E      
080000A8  584F       244          addq.w    #4,A7
080000AA  2200       245          move.l    D0,D1
080000AC  201F       246          move.l    (A7)+,D0
080000AE  C2BC 0000  247          and.l     #255,D1
080000B2  00FF      
080000B4  8081       248          or.l      D1,D0
080000B6  2400       249          move.l    D0,D2
                     250   ; if(CheckSumPtr)
080000B8  4AAE 0008  251          tst.l     8(A6)
080000BC  6706       252          beq.s     Get2HexDigits_1
                     253   ; *CheckSumPtr += i ;
080000BE  206E 0008  254          move.l    8(A6),A0
080000C2  D510       255          add.b     D2,(A0)
                     256   Get2HexDigits_1:
                     257   ; return i ;
080000C4  2002       258          move.l    D2,D0
080000C6  241F       259          move.l    (A7)+,D2
080000C8  4E5E       260          unlk      A6
080000CA  4E75       261          rts
                     262   ; }
                     263   ; int Get4HexDigits(char *CheckSumPtr)
                     264   ; {
                     265   _Get4HexDigits:
080000CC  4E56 0000  266          link      A6,#0
                     267   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000D0  2F2E 0008  268          move.l    8(A6),-(A7)
080000D4  4EB9 0800  269          jsr       _Get2HexDigits
080000D8  0070      
080000DA  584F       270          addq.w    #4,A7
080000DC  E180       271          asl.l     #8,D0
080000DE  2F00       272          move.l    D0,-(A7)
080000E0  2F2E 0008  273          move.l    8(A6),-(A7)
080000E4  4EB9 0800  274          jsr       _Get2HexDigits
080000E8  0070      
080000EA  584F       275          addq.w    #4,A7
080000EC  2200       276          move.l    D0,D1
080000EE  201F       277          move.l    (A7)+,D0
080000F0  8081       278          or.l      D1,D0
080000F2  4E5E       279          unlk      A6
080000F4  4E75       280          rts
                     281   ; }
                     282   ; int Get6HexDigits(char *CheckSumPtr)
                     283   ; {
                     284   _Get6HexDigits:
080000F6  4E56 0000  285          link      A6,#0
                     286   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
080000FA  2F2E 0008  287          move.l    8(A6),-(A7)
080000FE  4EB9 0800  288          jsr       _Get4HexDigits
08000102  00CC      
08000104  584F       289          addq.w    #4,A7
08000106  E180       290          asl.l     #8,D0
08000108  2F00       291          move.l    D0,-(A7)
0800010A  2F2E 0008  292          move.l    8(A6),-(A7)
0800010E  4EB9 0800  293          jsr       _Get2HexDigits
08000112  0070      
08000114  584F       294          addq.w    #4,A7
08000116  2200       295          move.l    D0,D1
08000118  201F       296          move.l    (A7)+,D0
0800011A  8081       297          or.l      D1,D0
0800011C  4E5E       298          unlk      A6
0800011E  4E75       299          rts
                     300   ; }
                     301   ; int Get8HexDigits(char *CheckSumPtr)
                     302   ; {
                     303   _Get8HexDigits:
08000120  4E56 0000  304          link      A6,#0
                     305   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
08000124  2F2E 0008  306          move.l    8(A6),-(A7)
08000128  4EB9 0800  307          jsr       _Get4HexDigits
0800012C  00CC      
0800012E  584F       308          addq.w    #4,A7
08000130  E180       309          asl.l     #8,D0
08000132  E180       310          asl.l     #8,D0
08000134  2F00       311          move.l    D0,-(A7)
08000136  2F2E 0008  312          move.l    8(A6),-(A7)
0800013A  4EB9 0800  313          jsr       _Get4HexDigits
0800013E  00CC      
08000140  584F       314          addq.w    #4,A7
08000142  2200       315          move.l    D0,D1
08000144  201F       316          move.l    (A7)+,D0
08000146  8081       317          or.l      D1,D0
08000148  4E5E       318          unlk      A6
0800014A  4E75       319          rts
                     320   ; }
                     321   ; void Timer_ISR()
                     322   ; {
                     323   _Timer_ISR:
                     324   ; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
0800014C  1039 0040  325          move.b    4194354,D0
08000150  0032      
08000152  0C00 0001  326          cmp.b     #1,D0
08000156  661A       327          bne.s     Timer_ISR_1
                     328   ; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
08000158  13FC 0003  329          move.b    #3,4194354
0800015C  0040 0032 
                     330   ; PortA = Timer1Count++ ;     // increment an LED count on PortA with each tick of Timer 1
08000160  1039 0800  331          move.b    _Timer1Count.L,D0
08000164  1E3E      
08000166  5239 0800  332          addq.b    #1,_Timer1Count.L
0800016A  1E3E      
0800016C  13C0 0040  333          move.b    D0,4194304
08000170  0000      
                     334   Timer_ISR_1:
                     335   ; }
                     336   ; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
08000172  1039 0040  337          move.b    4194358,D0
08000176  0036      
08000178  0C00 0001  338          cmp.b     #1,D0
0800017C  661A       339          bne.s     Timer_ISR_3
                     340   ; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0800017E  13FC 0003  341          move.b    #3,4194358
08000182  0040 0036 
                     342   ; PortC = Timer2Count++ ;     // increment an LED count on PortC with each tick of Timer 2
08000186  1039 0800  343          move.b    _Timer2Count.L,D0
0800018A  1E40      
0800018C  5239 0800  344          addq.b    #1,_Timer2Count.L
08000190  1E40      
08000192  13C0 0040  345          move.b    D0,4194308
08000196  0004      
                     346   Timer_ISR_3:
                     347   ; }
                     348   ; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
08000198  1039 0040  349          move.b    4194362,D0
0800019C  003A      
0800019E  0C00 0001  350          cmp.b     #1,D0
080001A2  661A       351          bne.s     Timer_ISR_5
                     352   ; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080001A4  13FC 0003  353          move.b    #3,4194362
080001A8  0040 003A 
                     354   ; HEX_A = Timer3Count++ ;     // increment a HEX count on Port HEX_A with each tick of Timer 3
080001AC  1039 0800  355          move.b    _Timer3Count.L,D0
080001B0  1E42      
080001B2  5239 0800  356          addq.b    #1,_Timer3Count.L
080001B6  1E42      
080001B8  13C0 0040  357          move.b    D0,4194320
080001BC  0010      
                     358   Timer_ISR_5:
                     359   ; }
                     360   ; if(Timer4Status == 1) {         // Did Timer 4 produce the Interrupt?
080001BE  1039 0040  361          move.b    4194366,D0
080001C2  003E      
080001C4  0C00 0001  362          cmp.b     #1,D0
080001C8  661A       363          bne.s     Timer_ISR_7
                     364   ; Timer4Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080001CA  13FC 0003  365          move.b    #3,4194366
080001CE  0040 003E 
                     366   ; HEX_B = Timer4Count++ ;     // increment a HEX count on HEX_B with each tick of Timer 4
080001D2  1039 0800  367          move.b    _Timer4Count.L,D0
080001D6  1E44      
080001D8  5239 0800  368          addq.b    #1,_Timer4Count.L
080001DC  1E44      
080001DE  13C0 0040  369          move.b    D0,4194322
080001E2  0012      
                     370   Timer_ISR_7:
080001E4  4E75       371          rts
                     372   ; }
                     373   ; }
                     374   ; /*****************************************************************************************
                     375   ; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
                     376   ; **  Add your code here to poll Status register and clear interrupt
                     377   ; *****************************************************************************************/
                     378   ; void ACIA_ISR()
                     379   ; {}
                     380   _ACIA_ISR:
080001E6  4E75       381          rts
                     382   ; /***************************************************************************************
                     383   ; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
                     384   ; **  Add your code here to poll Status register and clear interrupt
                     385   ; *****************************************************************************************/
                     386   ; void PIA_ISR()
                     387   ; {}
                     388   _PIA_ISR:
080001E8  4E75       389          rts
                     390   ; /***********************************************************************************
                     391   ; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
                     392   ; ************************************************************************************/
                     393   ; void Key2PressISR()
                     394   ; {}
                     395   _Key2PressISR:
080001EA  4E75       396          rts
                     397   ; /***********************************************************************************
                     398   ; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
                     399   ; ************************************************************************************/
                     400   ; void Key1PressISR()
                     401   ; {}
                     402   _Key1PressISR:
080001EC  4E75       403          rts
                     404   ; /************************************************************************************
                     405   ; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
                     406   ; ************************************************************************************/
                     407   ; void Wait1ms(void)
                     408   ; {
                     409   _Wait1ms:
080001EE  2F02       410          move.l    D2,-(A7)
                     411   ; int  i ;
                     412   ; for(i = 0; i < 1000; i ++)
080001F0  4282       413          clr.l     D2
                     414   Wait1ms_1:
080001F2  0C82 0000  415          cmp.l     #1000,D2
080001F6  03E8      
080001F8  6C04       416          bge.s     Wait1ms_3
080001FA  5282       417          addq.l    #1,D2
080001FC  60F4       418          bra       Wait1ms_1
                     419   Wait1ms_3:
080001FE  241F       420          move.l    (A7)+,D2
08000200  4E75       421          rts
                     422   ; ;
                     423   ; }
                     424   ; /************************************************************************************
                     425   ; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
                     426   ; **************************************************************************************/
                     427   ; void Wait3ms(void)
                     428   ; {
                     429   _Wait3ms:
08000202  2F02       430          move.l    D2,-(A7)
                     431   ; int i ;
                     432   ; for(i = 0; i < 3; i++)
08000204  4282       433          clr.l     D2
                     434   Wait3ms_1:
08000206  0C82 0000  435          cmp.l     #3,D2
0800020A  0003      
0800020C  6C0A       436          bge.s     Wait3ms_3
                     437   ; Wait1ms() ;
0800020E  4EB9 0800  438          jsr       _Wait1ms
08000212  01EE      
08000214  5282       439          addq.l    #1,D2
08000216  60EE       440          bra       Wait3ms_1
                     441   Wait3ms_3:
08000218  241F       442          move.l    (A7)+,D2
0800021A  4E75       443          rts
                     444   ; }
                     445   ; void Wait250ms(void)
                     446   ; {
                     447   _Wait250ms:
0800021C  2F02       448          move.l    D2,-(A7)
                     449   ; int i ;
                     450   ; for(i = 0; i < 250; i++)
0800021E  4282       451          clr.l     D2
                     452   Wait250ms_1:
08000220  0C82 0000  453          cmp.l     #250,D2
08000224  00FA      
08000226  6C0A       454          bge.s     Wait250ms_3
                     455   ; Wait1ms() ;
08000228  4EB9 0800  456          jsr       _Wait1ms
0800022C  01EE      
0800022E  5282       457          addq.l    #1,D2
08000230  60EE       458          bra       Wait250ms_1
                     459   Wait250ms_3:
08000232  241F       460          move.l    (A7)+,D2
08000234  4E75       461          rts
                     462   ; }
                     463   ; void Wait750ms(void)
                     464   ; {
                     465   _Wait750ms:
08000236  2F02       466          move.l    D2,-(A7)
                     467   ; int i ;
                     468   ; for(i = 0; i < 750; i++)
08000238  4282       469          clr.l     D2
                     470   Wait750ms_1:
0800023A  0C82 0000  471          cmp.l     #750,D2
0800023E  02EE      
08000240  6C0A       472          bge.s     Wait750ms_3
                     473   ; Wait1ms() ;
08000242  4EB9 0800  474          jsr       _Wait1ms
08000246  01EE      
08000248  5282       475          addq.l    #1,D2
0800024A  60EE       476          bra       Wait750ms_1
                     477   Wait750ms_3:
0800024C  241F       478          move.l    (A7)+,D2
0800024E  4E75       479          rts
                     480   ; }
                     481   ; /************************************************************************************
                     482   ; **  Subroutine to give the 68000 something useless to do to waste 1s
                     483   ; **************************************************************************************/
                     484   ; void Wait1s(void){
                     485   _Wait1s:
08000250  2F02       486          move.l    D2,-(A7)
                     487   ; int i;
                     488   ; for(i = 0; i < 1000; i++)
08000252  4282       489          clr.l     D2
                     490   Wait1s_1:
08000254  0C82 0000  491          cmp.l     #1000,D2
08000258  03E8      
0800025A  6C0A       492          bge.s     Wait1s_3
                     493   ; Wait1ms();
0800025C  4EB9 0800  494          jsr       _Wait1ms
08000260  01EE      
08000262  5282       495          addq.l    #1,D2
08000264  60EE       496          bra       Wait1s_1
                     497   Wait1s_3:
08000266  241F       498          move.l    (A7)+,D2
08000268  4E75       499          rts
                     500   ; }
                     501   ; /*********************************************************************************************
                     502   ; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
                     503   ; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
                     504   ; *********************************************************************************************/
                     505   ; void Init_LCD(void)
                     506   ; {
                     507   _Init_LCD:
                     508   ; LCDcommand = 0x0c ;
0800026A  13FC 000C  509          move.b    #12,4194336
0800026E  0040 0020 
                     510   ; Wait3ms() ;
08000272  4EB9 0800  511          jsr       _Wait3ms
08000276  0202      
                     512   ; LCDcommand = 0x38 ;
08000278  13FC 0038  513          move.b    #56,4194336
0800027C  0040 0020 
                     514   ; Wait3ms() ;
08000280  4EB9 0800  515          jsr       _Wait3ms
08000284  0202      
08000286  4E75       516          rts
                     517   ; }
                     518   ; /*********************************************************************************************
                     519   ; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     520   ; *********************************************************************************************/
                     521   ; void Init_RS232(void)
                     522   ; {
                     523   _Init_RS232:
                     524   ; RS232_Control = 0x15 ; //  %00010101 set up 6850 uses divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
08000288  13FC 0015  525          move.b    #21,4194368
0800028C  0040 0040 
                     526   ; RS232_Baud = 0x1 ;      // program baud rate generator 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
08000290  13FC 0001  527          move.b    #1,4194372
08000294  0040 0044 
08000298  4E75       528          rts
                     529   ; }
                     530   ; /*********************************************************************************************************
                     531   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     532   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     533   ; **  to allow the board to communicate with HyperTerminal Program
                     534   ; **
                     535   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     536   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     537   ; **  call _putch() also
                     538   ; *********************************************************************************************************/
                     539   ; int _putch( int c)
                     540   ; {
                     541   __putch:
0800029A  4E56 0000  542          link      A6,#0
                     543   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     544   _putch_1:
0800029E  1039 0040  545          move.b    4194368,D0
080002A2  0040      
080002A4  C03C 0002  546          and.b     #2,D0
080002A8  0C00 0002  547          cmp.b     #2,D0
080002AC  6702       548          beq.s     _putch_3
080002AE  60EE       549          bra       _putch_1
                     550   _putch_3:
                     551   ; ;
                     552   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
080002B0  202E 0008  553          move.l    8(A6),D0
080002B4  C0BC 0000  554          and.l     #127,D0
080002B8  007F      
080002BA  13C0 0040  555          move.b    D0,4194370
080002BE  0042      
                     556   ; return c ;                                              // putchar() expects the character to be returned
080002C0  202E 0008  557          move.l    8(A6),D0
080002C4  4E5E       558          unlk      A6
080002C6  4E75       559          rts
                     560   ; }
                     561   ; /*********************************************************************************************************
                     562   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     563   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     564   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     565   ; **
                     566   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     567   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
                     568   ; **  call _getch() also
                     569   ; *********************************************************************************************************/
                     570   ; int _getch( void )
                     571   ; {
                     572   __getch:
080002C8  4E56 FFFC  573          link      A6,#-4
                     574   ; char c ;
                     575   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     576   _getch_1:
080002CC  1039 0040  577          move.b    4194368,D0
080002D0  0040      
080002D2  C03C 0001  578          and.b     #1,D0
080002D6  0C00 0001  579          cmp.b     #1,D0
080002DA  6702       580          beq.s     _getch_3
080002DC  60EE       581          bra       _getch_1
                     582   _getch_3:
                     583   ; ;
                     584   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
080002DE  1039 0040  585          move.b    4194370,D0
080002E2  0042      
080002E4  C0BC 0000  586          and.l     #255,D0
080002E8  00FF      
080002EA  C0BC 0000  587          and.l     #127,D0
080002EE  007F      
080002F0  4E5E       588          unlk      A6
080002F2  4E75       589          rts
                     590   ; }
                     591   ; /******************************************************************************
                     592   ; **  Subroutine to output a single character to the 2 row LCD display
                     593   ; **  It is assumed the character is an ASCII code and it will be displayed at the
                     594   ; **  current cursor position
                     595   ; *******************************************************************************/
                     596   ; void LCDOutchar(int c)
                     597   ; {
                     598   _LCDOutchar:
080002F4  4E56 0000  599          link      A6,#0
                     600   ; LCDdata = (char)(c);
080002F8  202E 0008  601          move.l    8(A6),D0
080002FC  13C0 0040  602          move.b    D0,4194338
08000300  0022      
                     603   ; Wait1ms() ;
08000302  4EB9 0800  604          jsr       _Wait1ms
08000306  01EE      
08000308  4E5E       605          unlk      A6
0800030A  4E75       606          rts
                     607   ; }
                     608   ; /**********************************************************************************
                     609   ; *subroutine to output a message at the current cursor position of the LCD display
                     610   ; ************************************************************************************/
                     611   ; void LCDOutMessage(char *theMessage)
                     612   ; {
                     613   _LCDOutMessage:
0800030C  4E56 FFFC  614          link      A6,#-4
                     615   ; char c ;
                     616   ; while((c = *theMessage++) != 0)     // output characters from the string until NULL
                     617   LCDOutMessage_1:
08000310  206E 0008  618          move.l    8(A6),A0
08000314  52AE 0008  619          addq.l    #1,8(A6)
08000318  1D50 FFFF  620          move.b    (A0),-1(A6)
0800031C  1010       621          move.b    (A0),D0
0800031E  6714       622          beq.s     LCDOutMessage_3
                     623   ; LCDOutchar(c) ;
08000320  122E FFFF  624          move.b    -1(A6),D1
08000324  4881       625          ext.w     D1
08000326  48C1       626          ext.l     D1
08000328  2F01       627          move.l    D1,-(A7)
0800032A  4EB9 0800  628          jsr       _LCDOutchar
0800032E  02F4      
08000330  584F       629          addq.w    #4,A7
08000332  60DC       630          bra       LCDOutMessage_1
                     631   LCDOutMessage_3:
08000334  4E5E       632          unlk      A6
08000336  4E75       633          rts
                     634   ; }
                     635   ; /******************************************************************************
                     636   ; *subroutine to clear the line by issuing 24 space characters
                     637   ; *******************************************************************************/
                     638   ; void LCDClearln(void)
                     639   ; {
                     640   _LCDClearln:
08000338  2F02       641          move.l    D2,-(A7)
                     642   ; int i ;
                     643   ; for(i = 0; i < 24; i ++)
0800033A  4282       644          clr.l     D2
                     645   LCDClearln_1:
0800033C  0C82 0000  646          cmp.l     #24,D2
08000340  0018      
08000342  6C10       647          bge.s     LCDClearln_3
                     648   ; LCDOutchar(' ') ;       // write a space char to the LCD display
08000344  4878 0020  649          pea       32
08000348  4EB9 0800  650          jsr       _LCDOutchar
0800034C  02F4      
0800034E  584F       651          addq.w    #4,A7
08000350  5282       652          addq.l    #1,D2
08000352  60E8       653          bra       LCDClearln_1
                     654   LCDClearln_3:
08000354  241F       655          move.l    (A7)+,D2
08000356  4E75       656          rts
                     657   ; }
                     658   ; /******************************************************************************
                     659   ; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
                     660   ; *******************************************************************************/
                     661   ; void LCDLine1Message(char *theMessage)
                     662   ; {
                     663   _LCDLine1Message:
08000358  4E56 0000  664          link      A6,#0
                     665   ; LCDcommand = 0x80 ;
0800035C  13FC 0080  666          move.b    #128,4194336
08000360  0040 0020 
                     667   ; Wait3ms();
08000364  4EB9 0800  668          jsr       _Wait3ms
08000368  0202      
                     669   ; LCDClearln() ;
0800036A  4EB9 0800  670          jsr       _LCDClearln
0800036E  0338      
                     671   ; LCDcommand = 0x80 ;
08000370  13FC 0080  672          move.b    #128,4194336
08000374  0040 0020 
                     673   ; Wait3ms() ;
08000378  4EB9 0800  674          jsr       _Wait3ms
0800037C  0202      
                     675   ; LCDOutMessage(theMessage) ;
0800037E  2F2E 0008  676          move.l    8(A6),-(A7)
08000382  4EB9 0800  677          jsr       _LCDOutMessage
08000386  030C      
08000388  584F       678          addq.w    #4,A7
0800038A  4E5E       679          unlk      A6
0800038C  4E75       680          rts
                     681   ; }
                     682   ; /******************************************************************************
                     683   ; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
                     684   ; *******************************************************************************/
                     685   ; void LCDLine2Message(char *theMessage)
                     686   ; {
                     687   _LCDLine2Message:
0800038E  4E56 0000  688          link      A6,#0
                     689   ; LCDcommand = 0xC0 ;
08000392  13FC 00C0  690          move.b    #192,4194336
08000396  0040 0020 
                     691   ; Wait3ms();
0800039A  4EB9 0800  692          jsr       _Wait3ms
0800039E  0202      
                     693   ; LCDClearln() ;
080003A0  4EB9 0800  694          jsr       _LCDClearln
080003A4  0338      
                     695   ; LCDcommand = 0xC0 ;
080003A6  13FC 00C0  696          move.b    #192,4194336
080003AA  0040 0020 
                     697   ; Wait3ms() ;
080003AE  4EB9 0800  698          jsr       _Wait3ms
080003B2  0202      
                     699   ; LCDOutMessage(theMessage) ;
080003B4  2F2E 0008  700          move.l    8(A6),-(A7)
080003B8  4EB9 0800  701          jsr       _LCDOutMessage
080003BC  030C      
080003BE  584F       702          addq.w    #4,A7
080003C0  4E5E       703          unlk      A6
080003C2  4E75       704          rts
                     705   ; }
                     706   ; void I2C_Start(void){
                     707   _I2C_Start:
                     708   ; // Start condition is 8'b1000_0000
                     709   ; I2C_CR = 0x80;
080003C4  13FC 0080  710          move.b    #128,4227080
080003C8  0040 8008 
080003CC  4E75       711          rts
                     712   ; }
                     713   ; void I2C_Stop(void){
                     714   _I2C_Stop:
                     715   ; // Stop condition is 8'b0100_0000
                     716   ; I2C_CR = 0x40;
080003CE  13FC 0040  717          move.b    #64,4227080
080003D2  0040 8008 
080003D6  4E75       718          rts
                     719   ; }
                     720   ; void I2C_Init(void){
                     721   _I2C_Init:
                     722   ; // Make sure I2C core is off
                     723   ; I2C_CTR = (char)0x00;
080003D8  4239 0040  724          clr.b     4227076
080003DC  8004      
                     725   ; // Prescale register clock, 25Mhz / (5 * 100KHz) - 1  -> 0x0031
                     726   ; I2C_PRERLO = (char)0x31;
080003DE  13FC 0031  727          move.b    #49,4227072
080003E2  0040 8000 
                     728   ; I2C_PRERHI = (char)0x00;
080003E6  4239 0040  729          clr.b     4227074
080003EA  8002      
                     730   ; // Enable I2C Core, no interrupt enabled
                     731   ; // 8'b10xx_xxxx
                     732   ; I2C_CTR = (char)0x80;
080003EC  13FC 0080  733          move.b    #128,4227076
080003F0  0040 8004 
080003F4  4E75       734          rts
                     735   ; }
                     736   ; void WaitForRxACK(void){
                     737   _WaitForRxACK:
                     738   ; // Read RxACK bit from Status Register, should be '0'
                     739   ; // Status Register [7] == 0
                     740   ; while(((I2C_SR >> 7) & 1) == 1){
                     741   WaitForRxACK_1:
080003F6  1039 0040  742          move.b    4227080,D0
080003FA  8008      
080003FC  EE08       743          lsr.b     #7,D0
080003FE  C03C 0001  744          and.b     #1,D0
08000402  0C00 0001  745          cmp.b     #1,D0
08000406  6602       746          bne.s     WaitForRxACK_3
                     747   ; }
08000408  60EC       748          bra       WaitForRxACK_1
                     749   WaitForRxACK_3:
0800040A  4E75       750          rts
                     751   ; }
                     752   ; void WaitForTIPFlagReset(void){
                     753   _WaitForTIPFlagReset:
                     754   ; // Status Register [1] == 0
                     755   ; while((I2C_SR >> 1) & 1){
                     756   WaitForTIPFlagReset_1:
0800040C  1039 0040  757          move.b    4227080,D0
08000410  8008      
08000412  E208       758          lsr.b     #1,D0
08000414  C03C 0001  759          and.b     #1,D0
08000418  6702       760          beq.s     WaitForTIPFlagReset_3
                     761   ; }
0800041A  60F0       762          bra       WaitForTIPFlagReset_1
                     763   WaitForTIPFlagReset_3:
0800041C  4E75       764          rts
                     765   ; }
                     766   ; void Wait(void){
                     767   _Wait:
                     768   ; WaitForTIPFlagReset();
0800041E  4EB9 0800  769          jsr       _WaitForTIPFlagReset
08000422  040C      
                     770   ; WaitForRxACK();
08000424  4EB9 0800  771          jsr       _WaitForRxACK
08000428  03F6      
0800042A  4E75       772          rts
                     773   ; }
                     774   ; void TransmitI2C(char data, char cr){
                     775   _TransmitI2C:
0800042C  4E56 0000  776          link      A6,#0
                     777   ; I2C_TXR = data;
08000430  13EE 000B  778          move.b    11(A6),4227078
08000434  0040 8006 
                     779   ; I2C_CR = cr;
08000438  13EE 000F  780          move.b    15(A6),4227080
0800043C  0040 8008 
                     781   ; Wait();
08000440  4EB9 0800  782          jsr       _Wait
08000444  041E      
08000446  4E5E       783          unlk      A6
08000448  4E75       784          rts
                     785   ; }
                     786   ; // Assumptions: addr is at most 7 bits wide
                     787   ; void WriteI2CChar(char data, char slave_addr, char memaddr_hi, char memaddr_lo){
                     788   _WriteI2CChar:
0800044A  4E56 0000  789          link      A6,#0
0800044E  2F0A       790          move.l    A2,-(A7)
08000450  45F9 0800  791          lea       _TransmitI2C.L,A2
08000454  042C      
                     792   ; // Check before doing anything
                     793   ; WaitForTIPFlagReset();
08000456  4EB9 0800  794          jsr       _WaitForTIPFlagReset
0800045A  040C      
                     795   ; // Set slave to write mode, Generate start command
                     796   ; TransmitI2C(slave_addr, WSTART);
0800045C  4878 0091  797          pea       145
08000460  122E 000F  798          move.b    15(A6),D1
08000464  4881       799          ext.w     D1
08000466  48C1       800          ext.l     D1
08000468  2F01       801          move.l    D1,-(A7)
0800046A  4E92       802          jsr       (A2)
0800046C  504F       803          addq.w    #8,A7
                     804   ; // Write Mem Address and set W bit
                     805   ; TransmitI2C(memaddr_hi, WRITE);
0800046E  4878 0010  806          pea       16
08000472  122E 0013  807          move.b    19(A6),D1
08000476  4881       808          ext.w     D1
08000478  48C1       809          ext.l     D1
0800047A  2F01       810          move.l    D1,-(A7)
0800047C  4E92       811          jsr       (A2)
0800047E  504F       812          addq.w    #8,A7
                     813   ; TransmitI2C(memaddr_lo, WRITE);
08000480  4878 0010  814          pea       16
08000484  122E 0017  815          move.b    23(A6),D1
08000488  4881       816          ext.w     D1
0800048A  48C1       817          ext.l     D1
0800048C  2F01       818          move.l    D1,-(A7)
0800048E  4E92       819          jsr       (A2)
08000490  504F       820          addq.w    #8,A7
                     821   ; // Write data transmit register, set STO bit, set W bit. 
                     822   ; TransmitI2C(data, WSTOP);
08000492  4878 0050  823          pea       80
08000496  122E 000B  824          move.b    11(A6),D1
0800049A  4881       825          ext.w     D1
0800049C  48C1       826          ext.l     D1
0800049E  2F01       827          move.l    D1,-(A7)
080004A0  4E92       828          jsr       (A2)
080004A2  504F       829          addq.w    #8,A7
080004A4  245F       830          move.l    (A7)+,A2
080004A6  4E5E       831          unlk      A6
080004A8  4E75       832          rts
                     833   ; }
                     834   ; // Assumptions: slave_addr is in write mode
                     835   ; void ReadI2CChar(char *data, char slave_addr, char memaddr_hi, char memaddr_lo){
                     836   _ReadI2CChar:
080004AA  4E56 0000  837          link      A6,#0
080004AE  2F0A       838          move.l    A2,-(A7)
080004B0  45F9 0800  839          lea       _TransmitI2C.L,A2
080004B4  042C      
                     840   ; // Check before doing anything
                     841   ; WaitForTIPFlagReset();
080004B6  4EB9 0800  842          jsr       _WaitForTIPFlagReset
080004BA  040C      
                     843   ; // Set slave to write mode, Generate start command
                     844   ; TransmitI2C(slave_addr, WSTART);
080004BC  4878 0091  845          pea       145
080004C0  122E 000F  846          move.b    15(A6),D1
080004C4  4881       847          ext.w     D1
080004C6  48C1       848          ext.l     D1
080004C8  2F01       849          move.l    D1,-(A7)
080004CA  4E92       850          jsr       (A2)
080004CC  504F       851          addq.w    #8,A7
                     852   ; // Write Mem Address and set W bit
                     853   ; TransmitI2C(memaddr_hi, WRITE);
080004CE  4878 0010  854          pea       16
080004D2  122E 0013  855          move.b    19(A6),D1
080004D6  4881       856          ext.w     D1
080004D8  48C1       857          ext.l     D1
080004DA  2F01       858          move.l    D1,-(A7)
080004DC  4E92       859          jsr       (A2)
080004DE  504F       860          addq.w    #8,A7
                     861   ; TransmitI2C(memaddr_lo, WRITE);
080004E0  4878 0010  862          pea       16
080004E4  122E 0017  863          move.b    23(A6),D1
080004E8  4881       864          ext.w     D1
080004EA  48C1       865          ext.l     D1
080004EC  2F01       866          move.l    D1,-(A7)
080004EE  4E92       867          jsr       (A2)
080004F0  504F       868          addq.w    #8,A7
                     869   ; // Set slave to read mode and generate start command for reading
                     870   ; TransmitI2C(slave_addr | 1, WSTART);
080004F2  4878 0091  871          pea       145
080004F6  122E 000F  872          move.b    15(A6),D1
080004FA  823C 0001  873          or.b      #1,D1
080004FE  4881       874          ext.w     D1
08000500  48C1       875          ext.l     D1
08000502  2F01       876          move.l    D1,-(A7)
08000504  4E92       877          jsr       (A2)
08000506  504F       878          addq.w    #8,A7
                     879   ; // Read data transmit register, set R bit, set NACK and IACK
                     880   ; I2C_CR = READNACK;
08000508  13FC 0029  881          move.b    #41,4227080
0800050C  0040 8008 
                     882   ; // Wait for read data to come in
                     883   ; while((I2C_SR & 1) !=1){}
                     884   ReadI2CChar_1:
08000510  1039 0040  885          move.b    4227080,D0
08000514  8008      
08000516  C03C 0001  886          and.b     #1,D0
0800051A  0C00 0001  887          cmp.b     #1,D0
0800051E  6702       888          beq.s     ReadI2CChar_3
08000520  60EE       889          bra       ReadI2CChar_1
                     890   ReadI2CChar_3:
                     891   ; *data = I2C_RXR;
08000522  206E 0008  892          move.l    8(A6),A0
08000526  10B9 0040  893          move.b    4227078,(A0)
0800052A  8006      
                     894   ; I2C_CR = 0x41;
0800052C  13FC 0041  895          move.b    #65,4227080
08000530  0040 8008 
08000534  245F       896          move.l    (A7)+,A2
08000536  4E5E       897          unlk      A6
08000538  4E75       898          rts
                     899   ; }
                     900   ; // Increment logic, handles bank overflows
                     901   ; void incrI2C(char *slave_addr, char *memaddr_hi, char *memaddr_lo, int read){
                     902   _incrI2C:
0800053A  4E56 0000  903          link      A6,#0
0800053E  48E7 3E20  904          movem.l   D2/D3/D4/D5/D6/A2,-(A7)
08000542  45F9 0800  905          lea       _TransmitI2C.L,A2
08000546  042C      
08000548  242E 0008  906          move.l    8(A6),D2
0800054C  262E 0010  907          move.l    16(A6),D3
08000550  282E 000C  908          move.l    12(A6),D4
                     909   ; char zeewo = 0x00;
08000554  4205       910          clr.b     D5
                     911   ; char one = 0x01;
08000556  7C01       912          moveq     #1,D6
                     913   ; // printf("\r\n %x %x%x", *slave_addr, *memaddr_hi, *memaddr_lo);
                     914   ; if ((*memaddr_lo & 0xFF) == 0xFF){
08000558  2043       915          move.l    D3,A0
0800055A  1010       916          move.b    (A0),D0
0800055C  4880       917          ext.w     D0
0800055E  C07C 00FF  918          and.w     #255,D0
08000562  0C40 00FF  919          cmp.w     #255,D0
08000566  6600 011E  920          bne       incrI2C_1
                     921   ; if ((*memaddr_hi & 0xFF) == 0xFF){ // Change bank
0800056A  2044       922          move.l    D4,A0
0800056C  1010       923          move.b    (A0),D0
0800056E  4880       924          ext.w     D0
08000570  C07C 00FF  925          and.w     #255,D0
08000574  0C40 00FF  926          cmp.w     #255,D0
08000578  6600 0102  927          bne       incrI2C_3
                     928   ; *slave_addr = ((*slave_addr & 0x8) == 0x8) ? EEPROM_SLAVE_BANK0 : EEPROM_SLAVE_BANK1;
0800057C  2042       929          move.l    D2,A0
0800057E  1010       930          move.b    (A0),D0
08000580  C03C 0008  931          and.b     #8,D0
08000584  0C00 0008  932          cmp.b     #8,D0
08000588  6606       933          bne.s     incrI2C_5
0800058A  303C 00A0  934          move.w    #160,D0
0800058E  6004       935          bra.s     incrI2C_6
                     936   incrI2C_5:
08000590  303C 00A8  937          move.w    #168,D0
                     938   incrI2C_6:
08000594  2042       939          move.l    D2,A0
08000596  1080       940          move.b    D0,(A0)
                     941   ; *memaddr_lo = zeewo;
08000598  2043       942          move.l    D3,A0
0800059A  1085       943          move.b    D5,(A0)
                     944   ; *memaddr_hi = zeewo;
0800059C  2044       945          move.l    D4,A0
0800059E  1085       946          move.b    D5,(A0)
                     947   ; if(read & 1){
080005A0  202E 0014  948          move.l    20(A6),D0
080005A4  C0BC 0000  949          and.l     #1,D0
080005A8  0001      
080005AA  6700 006A  950          beq       incrI2C_7
                     951   ; printf("\r\n Changing slave and restart %x", *slave_addr);
080005AE  2042       952          move.l    D2,A0
080005B0  1210       953          move.b    (A0),D1
080005B2  4881       954          ext.w     D1
080005B4  48C1       955          ext.l     D1
080005B6  2F01       956          move.l    D1,-(A7)
080005B8  4879 0800  957          pea       @m68kus~1_1.L
080005BC  1A3A      
080005BE  4EB9 0800  958          jsr       _printf
080005C2  0FCE      
080005C4  504F       959          addq.w    #8,A7
                     960   ; TransmitI2C(*slave_addr, WSTART);
080005C6  4878 0091  961          pea       145
080005CA  2042       962          move.l    D2,A0
080005CC  1210       963          move.b    (A0),D1
080005CE  4881       964          ext.w     D1
080005D0  48C1       965          ext.l     D1
080005D2  2F01       966          move.l    D1,-(A7)
080005D4  4E92       967          jsr       (A2)
080005D6  504F       968          addq.w    #8,A7
                     969   ; TransmitI2C(*memaddr_hi, WRITE);
080005D8  4878 0010  970          pea       16
080005DC  2044       971          move.l    D4,A0
080005DE  1210       972          move.b    (A0),D1
080005E0  4881       973          ext.w     D1
080005E2  48C1       974          ext.l     D1
080005E4  2F01       975          move.l    D1,-(A7)
080005E6  4E92       976          jsr       (A2)
080005E8  504F       977          addq.w    #8,A7
                     978   ; TransmitI2C(*memaddr_lo, WRITE);
080005EA  4878 0010  979          pea       16
080005EE  2043       980          move.l    D3,A0
080005F0  1210       981          move.b    (A0),D1
080005F2  4881       982          ext.w     D1
080005F4  48C1       983          ext.l     D1
080005F6  2F01       984          move.l    D1,-(A7)
080005F8  4E92       985          jsr       (A2)
080005FA  504F       986          addq.w    #8,A7
                     987   ; TransmitI2C(*slave_addr | 1, WSTART);
080005FC  4878 0091  988          pea       145
08000600  2042       989          move.l    D2,A0
08000602  1210       990          move.b    (A0),D1
08000604  823C 0001  991          or.b      #1,D1
08000608  4881       992          ext.w     D1
0800060A  48C1       993          ext.l     D1
0800060C  2F01       994          move.l    D1,-(A7)
0800060E  4E92       995          jsr       (A2)
08000610  504F       996          addq.w    #8,A7
08000612  6000 0038  997          bra       incrI2C_8
                     998   incrI2C_7:
                     999   ; }
                    1000   ; else{
                    1001   ; TransmitI2C(*slave_addr, WSTART);
08000616  4878 0091 1002          pea       145
0800061A  2042      1003          move.l    D2,A0
0800061C  1210      1004          move.b    (A0),D1
0800061E  4881      1005          ext.w     D1
08000620  48C1      1006          ext.l     D1
08000622  2F01      1007          move.l    D1,-(A7)
08000624  4E92      1008          jsr       (A2)
08000626  504F      1009          addq.w    #8,A7
                    1010   ; TransmitI2C(*memaddr_hi, WRITE);
08000628  4878 0010 1011          pea       16
0800062C  2044      1012          move.l    D4,A0
0800062E  1210      1013          move.b    (A0),D1
08000630  4881      1014          ext.w     D1
08000632  48C1      1015          ext.l     D1
08000634  2F01      1016          move.l    D1,-(A7)
08000636  4E92      1017          jsr       (A2)
08000638  504F      1018          addq.w    #8,A7
                    1019   ; TransmitI2C(*memaddr_lo, WRITE);
0800063A  4878 0010 1020          pea       16
0800063E  2043      1021          move.l    D3,A0
08000640  1210      1022          move.b    (A0),D1
08000642  4881      1023          ext.w     D1
08000644  48C1      1024          ext.l     D1
08000646  2F01      1025          move.l    D1,-(A7)
08000648  4E92      1026          jsr       (A2)
0800064A  504F      1027          addq.w    #8,A7
                    1028   incrI2C_8:
                    1029   ; }
                    1030   ; printf("\r\n HIT EDGE CASE %x %x%x", *slave_addr, *memaddr_hi, *memaddr_lo);
0800064C  2043      1031          move.l    D3,A0
0800064E  1210      1032          move.b    (A0),D1
08000650  4881      1033          ext.w     D1
08000652  48C1      1034          ext.l     D1
08000654  2F01      1035          move.l    D1,-(A7)
08000656  2044      1036          move.l    D4,A0
08000658  1210      1037          move.b    (A0),D1
0800065A  4881      1038          ext.w     D1
0800065C  48C1      1039          ext.l     D1
0800065E  2F01      1040          move.l    D1,-(A7)
08000660  2042      1041          move.l    D2,A0
08000662  1210      1042          move.b    (A0),D1
08000664  4881      1043          ext.w     D1
08000666  48C1      1044          ext.l     D1
08000668  2F01      1045          move.l    D1,-(A7)
0800066A  4879 0800 1046          pea       @m68kus~1_2.L
0800066E  1A5C      
08000670  4EB9 0800 1047          jsr       _printf
08000674  0FCE      
08000676  DEFC 0010 1048          add.w     #16,A7
0800067A  6008      1049          bra.s     incrI2C_4
                    1050   incrI2C_3:
                    1051   ; }
                    1052   ; else{
                    1053   ; *memaddr_hi += one;
0800067C  2044      1054          move.l    D4,A0
0800067E  DD10      1055          add.b     D6,(A0)
                    1056   ; *memaddr_lo = zeewo;
08000680  2043      1057          move.l    D3,A0
08000682  1085      1058          move.b    D5,(A0)
                    1059   incrI2C_4:
08000684  6004      1060          bra.s     incrI2C_2
                    1061   incrI2C_1:
                    1062   ; }
                    1063   ; }
                    1064   ; else{
                    1065   ; *memaddr_lo += one;
08000686  2043      1066          move.l    D3,A0
08000688  DD10      1067          add.b     D6,(A0)
                    1068   incrI2C_2:
0800068A  4CDF 047C 1069          movem.l   (A7)+,D2/D3/D4/D5/D6/A2
0800068E  4E5E      1070          unlk      A6
08000690  4E75      1071          rts
                    1072   ; }
                    1073   ; }
                    1074   ; void WriteI2CPage(char slave_addr, char memaddr_hi, char memaddr_lo, char size){
                    1075   _WriteI2CPage:
08000692  4E56 0000 1076          link      A6,#0
08000696  48E7 2020 1077          movem.l   D2/A2,-(A7)
0800069A  45F9 0800 1078          lea       _TransmitI2C.L,A2
0800069E  042C      
                    1079   ; // Data is array of size "size", max size 128
                    1080   ; // WriteI2CChar();
                    1081   ; char i;
                    1082   ; // Check before doing anything
                    1083   ; WaitForTIPFlagReset();
080006A0  4EB9 0800 1084          jsr       _WaitForTIPFlagReset
080006A4  040C      
                    1085   ; // Set slave to write mode, Generate start command
                    1086   ; TransmitI2C(slave_addr, WSTART);
080006A6  4878 0091 1087          pea       145
080006AA  122E 000B 1088          move.b    11(A6),D1
080006AE  4881      1089          ext.w     D1
080006B0  48C1      1090          ext.l     D1
080006B2  2F01      1091          move.l    D1,-(A7)
080006B4  4E92      1092          jsr       (A2)
080006B6  504F      1093          addq.w    #8,A7
                    1094   ; // Write Mem Address and set W bit
                    1095   ; TransmitI2C(memaddr_hi, WRITE);
080006B8  4878 0010 1096          pea       16
080006BC  122E 000F 1097          move.b    15(A6),D1
080006C0  4881      1098          ext.w     D1
080006C2  48C1      1099          ext.l     D1
080006C4  2F01      1100          move.l    D1,-(A7)
080006C6  4E92      1101          jsr       (A2)
080006C8  504F      1102          addq.w    #8,A7
                    1103   ; TransmitI2C(memaddr_lo, WRITE);
080006CA  4878 0010 1104          pea       16
080006CE  122E 0013 1105          move.b    19(A6),D1
080006D2  4881      1106          ext.w     D1
080006D4  48C1      1107          ext.l     D1
080006D6  2F01      1108          move.l    D1,-(A7)
080006D8  4E92      1109          jsr       (A2)
080006DA  504F      1110          addq.w    #8,A7
                    1111   ; for (i = 0; i < size; i++){
080006DC  4202      1112          clr.b     D2
                    1113   WriteI2CPage_1:
080006DE  B42E 0017 1114          cmp.b     23(A6),D2
080006E2  6C00 0066 1115          bge       WriteI2CPage_3
                    1116   ; // Write without stop unless we're at the end
                    1117   ; if (i == (size-1) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF)){
080006E6  102E 0017 1118          move.b    23(A6),D0
080006EA  5300      1119          subq.b    #1,D0
080006EC  B400      1120          cmp.b     D0,D2
080006EE  6720      1121          beq.s     WriteI2CPage_6
080006F0  102E 000F 1122          move.b    15(A6),D0
080006F4  4880      1123          ext.w     D0
080006F6  C07C 00FF 1124          and.w     #255,D0
080006FA  0C40 00FF 1125          cmp.w     #255,D0
080006FE  6620      1126          bne.s     WriteI2CPage_4
08000700  102E 0013 1127          move.b    19(A6),D0
08000704  4880      1128          ext.w     D0
08000706  C07C 00FF 1129          and.w     #255,D0
0800070A  0C40 00FF 1130          cmp.w     #255,D0
0800070E  6610      1131          bne.s     WriteI2CPage_4
                    1132   WriteI2CPage_6:
                    1133   ; TransmitI2C(i,WSTOP);
08000710  4878 0050 1134          pea       80
08000714  4882      1135          ext.w     D2
08000716  48C2      1136          ext.l     D2
08000718  2F02      1137          move.l    D2,-(A7)
0800071A  4E92      1138          jsr       (A2)
0800071C  504F      1139          addq.w    #8,A7
0800071E  600E      1140          bra.s     WriteI2CPage_5
                    1141   WriteI2CPage_4:
                    1142   ; }
                    1143   ; else{
                    1144   ; TransmitI2C(i,WRITE);
08000720  4878 0010 1145          pea       16
08000724  4882      1146          ext.w     D2
08000726  48C2      1147          ext.l     D2
08000728  2F02      1148          move.l    D2,-(A7)
0800072A  4E92      1149          jsr       (A2)
0800072C  504F      1150          addq.w    #8,A7
                    1151   WriteI2CPage_5:
                    1152   ; }
                    1153   ; // Page crossing, if it happens, is handled inside incrI2C
                    1154   ; incrI2C(&slave_addr, &memaddr_hi, &memaddr_lo, 0);
0800072E  42A7      1155          clr.l     -(A7)
08000730  486E 0013 1156          pea       19(A6)
08000734  486E 000F 1157          pea       15(A6)
08000738  486E 000B 1158          pea       11(A6)
0800073C  4EB9 0800 1159          jsr       _incrI2C
08000740  053A      
08000742  DEFC 0010 1160          add.w     #16,A7
08000746  5202      1161          addq.b    #1,D2
08000748  6094      1162          bra       WriteI2CPage_1
                    1163   WriteI2CPage_3:
0800074A  4CDF 0404 1164          movem.l   (A7)+,D2/A2
0800074E  4E5E      1165          unlk      A6
08000750  4E75      1166          rts
                    1167   ; }
                    1168   ; }
                    1169   ; void ReadI2CPage(char *data, char slave_addr, char memaddr_hi, char memaddr_lo, char size){
                    1170   _ReadI2CPage:
08000752  4E56 FFFC 1171          link      A6,#-4
08000756  48E7 3020 1172          movem.l   D2/D3/A2,-(A7)
0800075A  45F9 0800 1173          lea       _TransmitI2C.L,A2
0800075E  042C      
08000760  162E 001B 1174          move.b    27(A6),D3
08000764  4883      1175          ext.w     D3
08000766  48C3      1176          ext.l     D3
                    1177   ; // Data is array of size "size", max size 128
                    1178   ; char i;
                    1179   ; char temp = 0;
08000768  422E FFFF 1180          clr.b     -1(A6)
                    1181   ; // Check before doing anything
                    1182   ; WaitForTIPFlagReset();
0800076C  4EB9 0800 1183          jsr       _WaitForTIPFlagReset
08000770  040C      
                    1184   ; // Set slave to write mode, Generate start command
                    1185   ; TransmitI2C(slave_addr, WSTART);
08000772  4878 0091 1186          pea       145
08000776  122E 000F 1187          move.b    15(A6),D1
0800077A  4881      1188          ext.w     D1
0800077C  48C1      1189          ext.l     D1
0800077E  2F01      1190          move.l    D1,-(A7)
08000780  4E92      1191          jsr       (A2)
08000782  504F      1192          addq.w    #8,A7
                    1193   ; // Write Mem Address and set W bit
                    1194   ; TransmitI2C(memaddr_hi, WRITE);
08000784  4878 0010 1195          pea       16
08000788  122E 0013 1196          move.b    19(A6),D1
0800078C  4881      1197          ext.w     D1
0800078E  48C1      1198          ext.l     D1
08000790  2F01      1199          move.l    D1,-(A7)
08000792  4E92      1200          jsr       (A2)
08000794  504F      1201          addq.w    #8,A7
                    1202   ; TransmitI2C(memaddr_lo, WRITE);
08000796  4878 0010 1203          pea       16
0800079A  122E 0017 1204          move.b    23(A6),D1
0800079E  4881      1205          ext.w     D1
080007A0  48C1      1206          ext.l     D1
080007A2  2F01      1207          move.l    D1,-(A7)
080007A4  4E92      1208          jsr       (A2)
080007A6  504F      1209          addq.w    #8,A7
                    1210   ; // Set slave to read mode and generate start command for reading
                    1211   ; TransmitI2C(slave_addr | 1, WSTART);
080007A8  4878 0091 1212          pea       145
080007AC  122E 000F 1213          move.b    15(A6),D1
080007B0  823C 0001 1214          or.b      #1,D1
080007B4  4881      1215          ext.w     D1
080007B6  48C1      1216          ext.l     D1
080007B8  2F01      1217          move.l    D1,-(A7)
080007BA  4E92      1218          jsr       (A2)
080007BC  504F      1219          addq.w    #8,A7
                    1220   ; for (i = 0; i < size; i++){
080007BE  4202      1221          clr.b     D2
                    1222   ReadI2CPage_1:
080007C0  B403      1223          cmp.b     D3,D2
080007C2  6C00 00B8 1224          bge       ReadI2CPage_3
                    1225   ; // Read without NACK unless we're at the end
                    1226   ; if (i == (size-1) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF)){
080007C6  1003      1227          move.b    D3,D0
080007C8  5300      1228          subq.b    #1,D0
080007CA  B400      1229          cmp.b     D0,D2
080007CC  6720      1230          beq.s     ReadI2CPage_6
080007CE  102E 0013 1231          move.b    19(A6),D0
080007D2  4880      1232          ext.w     D0
080007D4  C07C 00FF 1233          and.w     #255,D0
080007D8  0C40 00FF 1234          cmp.w     #255,D0
080007DC  661A      1235          bne.s     ReadI2CPage_4
080007DE  102E 0017 1236          move.b    23(A6),D0
080007E2  4880      1237          ext.w     D0
080007E4  C07C 00FF 1238          and.w     #255,D0
080007E8  0C40 00FF 1239          cmp.w     #255,D0
080007EC  660A      1240          bne.s     ReadI2CPage_4
                    1241   ReadI2CPage_6:
                    1242   ; I2C_CR = READNACK;
080007EE  13FC 0029 1243          move.b    #41,4227080
080007F2  0040 8008 
080007F6  6008      1244          bra.s     ReadI2CPage_5
                    1245   ReadI2CPage_4:
                    1246   ; }
                    1247   ; else
                    1248   ; I2C_CR = READACK;
080007F8  13FC 0021 1249          move.b    #33,4227080
080007FC  0040 8008 
                    1250   ReadI2CPage_5:
                    1251   ; while((I2C_SR & 1) !=1){}
                    1252   ReadI2CPage_7:
08000800  1039 0040 1253          move.b    4227080,D0
08000804  8008      
08000806  C03C 0001 1254          and.b     #1,D0
0800080A  0C00 0001 1255          cmp.b     #1,D0
0800080E  6702      1256          beq.s     ReadI2CPage_9
08000810  60EE      1257          bra       ReadI2CPage_7
                    1258   ReadI2CPage_9:
                    1259   ; data[i] = I2C_RXR;
08000812  206E 0008 1260          move.l    8(A6),A0
08000816  4882      1261          ext.w     D2
08000818  48C2      1262          ext.l     D2
0800081A  11B9 0040 1263          move.b    4227078,0(A0,D2.L)
0800081E  8006 2800 
                    1264   ; if (i == (size-1) || ((memaddr_hi & 0xFF) == 0xFF) && ((memaddr_lo & 0xFF) == 0xFF))
08000822  1003      1265          move.b    D3,D0
08000824  5300      1266          subq.b    #1,D0
08000826  B400      1267          cmp.b     D0,D2
08000828  6720      1268          beq.s     ReadI2CPage_12
0800082A  102E 0013 1269          move.b    19(A6),D0
0800082E  4880      1270          ext.w     D0
08000830  C07C 00FF 1271          and.w     #255,D0
08000834  0C40 00FF 1272          cmp.w     #255,D0
08000838  661A      1273          bne.s     ReadI2CPage_10
0800083A  102E 0017 1274          move.b    23(A6),D0
0800083E  4880      1275          ext.w     D0
08000840  C07C 00FF 1276          and.w     #255,D0
08000844  0C40 00FF 1277          cmp.w     #255,D0
08000848  660A      1278          bne.s     ReadI2CPage_10
                    1279   ReadI2CPage_12:
                    1280   ; I2C_CR = 0x41;
0800084A  13FC 0041 1281          move.b    #65,4227080
0800084E  0040 8008 
08000852  6008      1282          bra.s     ReadI2CPage_11
                    1283   ReadI2CPage_10:
                    1284   ; else
                    1285   ; I2C_CR = 0x01;
08000854  13FC 0001 1286          move.b    #1,4227080
08000858  0040 8008 
                    1287   ReadI2CPage_11:
                    1288   ; // Page crossing, if it happens, is handled inside incrI2C
                    1289   ; incrI2C(&slave_addr, &memaddr_hi, &memaddr_lo, 1);
0800085C  4878 0001 1290          pea       1
08000860  486E 0017 1291          pea       23(A6)
08000864  486E 0013 1292          pea       19(A6)
08000868  486E 000F 1293          pea       15(A6)
0800086C  4EB9 0800 1294          jsr       _incrI2C
08000870  053A      
08000872  DEFC 0010 1295          add.w     #16,A7
08000876  5202      1296          addq.b    #1,D2
08000878  6000 FF46 1297          bra       ReadI2CPage_1
                    1298   ReadI2CPage_3:
0800087C  4CDF 040C 1299          movem.l   (A7)+,D2/D3/A2
08000880  4E5E      1300          unlk      A6
08000882  4E75      1301          rts
                    1302   ; }
                    1303   ; }
                    1304   ; void GetBank(char *bank){
                    1305   _GetBank:
08000884  4E56 0000 1306          link      A6,#0
08000888  2F02      1307          move.l    D2,-(A7)
                    1308   ; char asdf;
                    1309   ; while(1){
                    1310   GetBank_1:
                    1311   ; printf("\r\nSelect bank:\r\n0 - Bank 0\r\n1 - Bank 1");
0800088A  4879 0800 1312          pea       @m68kus~1_3.L
0800088E  1A76      
08000890  4EB9 0800 1313          jsr       _printf
08000894  0FCE      
08000896  584F      1314          addq.w    #4,A7
                    1315   ; asdf = getchar();
08000898  4EB9 0800 1316          jsr       _getch
0800089C  0F92      
0800089E  1400      1317          move.b    D0,D2
                    1318   ; putchar(asdf);
080008A0  4882      1319          ext.w     D2
080008A2  48C2      1320          ext.l     D2
080008A4  2F02      1321          move.l    D2,-(A7)
080008A6  4EB9 0800 1322          jsr       _putch
080008AA  0F62      
080008AC  584F      1323          addq.w    #4,A7
                    1324   ; if(asdf == '0'){
080008AE  0C02 0030 1325          cmp.b     #48,D2
080008B2  660A      1326          bne.s     GetBank_4
                    1327   ; *bank = EEPROM_SLAVE_BANK0;
080008B4  206E 0008 1328          move.l    8(A6),A0
080008B8  10BC 00A0 1329          move.b    #160,(A0)
                    1330   ; break;
080008BC  6020      1331          bra.s     GetBank_3
                    1332   GetBank_4:
                    1333   ; }
                    1334   ; else if (asdf == '1'){
080008BE  0C02 0031 1335          cmp.b     #49,D2
080008C2  660A      1336          bne.s     GetBank_6
                    1337   ; *bank = EEPROM_SLAVE_BANK1;
080008C4  206E 0008 1338          move.l    8(A6),A0
080008C8  10BC 00A8 1339          move.b    #168,(A0)
                    1340   ; break;
080008CC  6010      1341          bra.s     GetBank_3
                    1342   GetBank_6:
                    1343   ; }
                    1344   ; else{
                    1345   ; printf("\r\nInvalid selection.");
080008CE  4879 0800 1346          pea       @m68kus~1_4.L
080008D2  1A9E      
080008D4  4EB9 0800 1347          jsr       _printf
080008D8  0FCE      
080008DA  584F      1348          addq.w    #4,A7
080008DC  60AC      1349          bra       GetBank_1
                    1350   GetBank_3:
080008DE  241F      1351          move.l    (A7)+,D2
080008E0  4E5E      1352          unlk      A6
080008E2  4E75      1353          rts
                    1354   ; }
                    1355   ; }       
                    1356   ; }
                    1357   ; void GetMemAddr(char *hi, char *lo){
                    1358   _GetMemAddr:
080008E4  4E56 0000 1359          link      A6,#0
                    1360   ; printf("\r\nEnter mem address hi:");
080008E8  4879 0800 1361          pea       @m68kus~1_5.L
080008EC  1AB4      
080008EE  4EB9 0800 1362          jsr       _printf
080008F2  0FCE      
080008F4  584F      1363          addq.w    #4,A7
                    1364   ; *hi = Get2HexDigits(0);
080008F6  42A7      1365          clr.l     -(A7)
080008F8  4EB9 0800 1366          jsr       _Get2HexDigits
080008FC  0070      
080008FE  584F      1367          addq.w    #4,A7
08000900  206E 0008 1368          move.l    8(A6),A0
08000904  1080      1369          move.b    D0,(A0)
                    1370   ; printf("\r\nEnter mem address lo:");
08000906  4879 0800 1371          pea       @m68kus~1_6.L
0800090A  1ACC      
0800090C  4EB9 0800 1372          jsr       _printf
08000910  0FCE      
08000912  584F      1373          addq.w    #4,A7
                    1374   ; *lo = Get2HexDigits(0);
08000914  42A7      1375          clr.l     -(A7)
08000916  4EB9 0800 1376          jsr       _Get2HexDigits
0800091A  0070      
0800091C  584F      1377          addq.w    #4,A7
0800091E  206E 000C 1378          move.l    12(A6),A0
08000922  1080      1379          move.b    D0,(A0)
08000924  4E5E      1380          unlk      A6
08000926  4E75      1381          rts
                    1382   ; // TODO: Hex digit validation?
                    1383   ; }
                    1384   ; void blinky(){
                    1385   _blinky:
08000928  48E7 0030 1386          movem.l   A2/A3,-(A7)
0800092C  45F9 0800 1387          lea       _TransmitI2C.L,A2
08000930  042C      
08000932  47F9 0800 1388          lea       _Wait250ms.L,A3
08000936  021C      
                    1389   ; // Make sure nothing is going on in the I2C bus 
                    1390   ; WaitForTIPFlagReset();
08000938  4EB9 0800 1391          jsr       _WaitForTIPFlagReset
0800093C  040C      
                    1392   ; // Write address
                    1393   ; TransmitI2C(ADCDAC_SLAVE, WSTART);
0800093E  4878 0091 1394          pea       145
08000942  4878 0090 1395          pea       144
08000946  4E92      1396          jsr       (A2)
08000948  504F      1397          addq.w    #8,A7
                    1398   ; // Set control to OUT: 8'b01xx_0xxx
                    1399   ; TransmitI2C(DAC_OUT_ON, WRITE);
0800094A  4878 0010 1400          pea       16
0800094E  4878 0040 1401          pea       64
08000952  4E92      1402          jsr       (A2)
08000954  504F      1403          addq.w    #8,A7
                    1404   ; // Vout calculation: 5/256 * 8 bit data
                    1405   ; // Blinky until reset is pressed on DE1
                    1406   ; while(1){
                    1407   blinky_1:
                    1408   ; TransmitI2C(0xFF, WRITE);
08000956  4878 0010 1409          pea       16
0800095A  4878 00FF 1410          pea       255
0800095E  4E92      1411          jsr       (A2)
08000960  504F      1412          addq.w    #8,A7
                    1413   ; Wait250ms();
08000962  4E93      1414          jsr       (A3)
                    1415   ; TransmitI2C(0x00, WRITE);
08000964  4878 0010 1416          pea       16
08000968  42A7      1417          clr.l     -(A7)
0800096A  4E92      1418          jsr       (A2)
0800096C  504F      1419          addq.w    #8,A7
                    1420   ; Wait250ms();
0800096E  4E93      1421          jsr       (A3)
                    1422   ; TransmitI2C(0xFF, WRITE);
08000970  4878 0010 1423          pea       16
08000974  4878 00FF 1424          pea       255
08000978  4E92      1425          jsr       (A2)
0800097A  504F      1426          addq.w    #8,A7
                    1427   ; Wait250ms();
0800097C  4E93      1428          jsr       (A3)
                    1429   ; TransmitI2C(0x00, WRITE);
0800097E  4878 0010 1430          pea       16
08000982  42A7      1431          clr.l     -(A7)
08000984  4E92      1432          jsr       (A2)
08000986  504F      1433          addq.w    #8,A7
                    1434   ; Wait250ms();
08000988  4E93      1435          jsr       (A3)
                    1436   ; TransmitI2C(0xFF, WRITE);
0800098A  4878 0010 1437          pea       16
0800098E  4878 00FF 1438          pea       255
08000992  4E92      1439          jsr       (A2)
08000994  504F      1440          addq.w    #8,A7
                    1441   ; Wait750ms();
08000996  4EB9 0800 1442          jsr       _Wait750ms
0800099A  0236      
                    1443   ; TransmitI2C(0x00, WRITE);
0800099C  4878 0010 1444          pea       16
080009A0  42A7      1445          clr.l     -(A7)
080009A2  4E92      1446          jsr       (A2)
080009A4  504F      1447          addq.w    #8,A7
                    1448   ; Wait750ms();
080009A6  4EB9 0800 1449          jsr       _Wait750ms
080009AA  0236      
080009AC  60A8      1450          bra       blinky_1
                    1451   ; }
                    1452   ; }
                    1453   ; // AN0: External analog source (remove jumper)
                    1454   ; // 2. AN1: On board potentiometer to supply a variable voltage.
                    1455   ; // 3. AN2: On board thermistor to measure temperature
                    1456   ; // 4. AN3: On board photo resistor to measure light intensity
                    1457   ; // 5. OUT: A RED LED which can be driven by the D/A output. 
                    1458   ; void readADC(void){
                    1459   _readADC:
080009AE  4E56 FFFC 1460          link      A6,#-4
080009B2  48E7 0030 1461          movem.l   A2/A3,-(A7)
080009B6  45F9 0800 1462          lea       _printf.L,A2
080009BA  0FCE      
080009BC  47F9 0800 1463          lea       _TransmitI2C.L,A3
080009C0  042C      
                    1464   ; char Vchannel1, Vchannel2, Vchannel3, Vchannel4;
                    1465   ; while(1){
                    1466   readADC_1:
                    1467   ; // Make sure nothing is going on in the I2C bus 
                    1468   ; WaitForTIPFlagReset();
080009C2  4EB9 0800 1469          jsr       _WaitForTIPFlagReset
080009C6  040C      
                    1470   ; // Write address
                    1471   ; TransmitI2C(ADCDAC_SLAVE, WSTART);
080009C8  4878 0091 1472          pea       145
080009CC  4878 0090 1473          pea       144
080009D0  4E93      1474          jsr       (A3)
080009D2  504F      1475          addq.w    #8,A7
                    1476   ; // Set control to auto increment starting at 1: 8'b0000_0101
                    1477   ; TransmitI2C(ADC_AUTO_INCREMENT_A0, WRITE);
080009D4  4878 0010 1478          pea       16
080009D8  4878 0004 1479          pea       4
080009DC  4E93      1480          jsr       (A3)
080009DE  504F      1481          addq.w    #8,A7
                    1482   ; // Set slave to Read mode
                    1483   ; TransmitI2C(ADCDAC_SLAVE | 1, WSTART);
080009E0  4878 0091 1484          pea       145
080009E4  4878 0091 1485          pea       145
080009E8  4E93      1486          jsr       (A3)
080009EA  504F      1487          addq.w    #8,A7
                    1488   ; // Read data transmit register, set R bit, set ACK
                    1489   ; I2C_CR = READACK;
080009EC  13FC 0021 1490          move.b    #33,4227080
080009F0  0040 8008 
                    1491   ; // Wait for read data to come in
                    1492   ; while((I2C_SR & 1) !=1){}
                    1493   readADC_4:
080009F4  1039 0040 1494          move.b    4227080,D0
080009F8  8008      
080009FA  C03C 0001 1495          and.b     #1,D0
080009FE  0C00 0001 1496          cmp.b     #1,D0
08000A02  6702      1497          beq.s     readADC_6
08000A04  60EE      1498          bra       readADC_4
                    1499   readADC_6:
                    1500   ; Vchannel4 = I2C_RXR; // This is always invalid because the jumper isn't connected
08000A06  1D79 0040 1501          move.b    4227078,-1(A6)
08000A0A  8006 FFFF 
                    1502   ; I2C_CR = READACK;
08000A0E  13FC 0021 1503          move.b    #33,4227080
08000A12  0040 8008 
                    1504   ; while((I2C_SR & 1) !=1){}
                    1505   readADC_7:
08000A16  1039 0040 1506          move.b    4227080,D0
08000A1A  8008      
08000A1C  C03C 0001 1507          and.b     #1,D0
08000A20  0C00 0001 1508          cmp.b     #1,D0
08000A24  6702      1509          beq.s     readADC_9
08000A26  60EE      1510          bra       readADC_7
                    1511   readADC_9:
                    1512   ; Vchannel1 = I2C_RXR;
08000A28  1D79 0040 1513          move.b    4227078,-4(A6)
08000A2C  8006 FFFC 
                    1514   ; I2C_CR = READACK;
08000A30  13FC 0021 1515          move.b    #33,4227080
08000A34  0040 8008 
                    1516   ; // Wait for read data to come in
                    1517   ; while((I2C_SR & 1) !=1){}
                    1518   readADC_10:
08000A38  1039 0040 1519          move.b    4227080,D0
08000A3C  8008      
08000A3E  C03C 0001 1520          and.b     #1,D0
08000A42  0C00 0001 1521          cmp.b     #1,D0
08000A46  6702      1522          beq.s     readADC_12
08000A48  60EE      1523          bra       readADC_10
                    1524   readADC_12:
                    1525   ; Vchannel2 = I2C_RXR;
08000A4A  1D79 0040 1526          move.b    4227078,-3(A6)
08000A4E  8006 FFFD 
                    1527   ; I2C_CR = READACK;
08000A52  13FC 0021 1528          move.b    #33,4227080
08000A56  0040 8008 
                    1529   ; // Wait for read data to come in
                    1530   ; while((I2C_SR & 1) !=1){}
                    1531   readADC_13:
08000A5A  1039 0040 1532          move.b    4227080,D0
08000A5E  8008      
08000A60  C03C 0001 1533          and.b     #1,D0
08000A64  0C00 0001 1534          cmp.b     #1,D0
08000A68  6702      1535          beq.s     readADC_15
08000A6A  60EE      1536          bra       readADC_13
                    1537   readADC_15:
                    1538   ; Vchannel3 = I2C_RXR;
08000A6C  1D79 0040 1539          move.b    4227078,-2(A6)
08000A70  8006 FFFE 
                    1540   ; I2C_CR = 0x41;
08000A74  13FC 0041 1541          move.b    #65,4227080
08000A78  0040 8008 
                    1542   ; // Vout calculation: 5/256 * 8 bit data, but we can just leave it.
                    1543   ; printf("\r\nThermistor: %d", Vchannel1 );
08000A7C  122E FFFC 1544          move.b    -4(A6),D1
08000A80  4881      1545          ext.w     D1
08000A82  48C1      1546          ext.l     D1
08000A84  2F01      1547          move.l    D1,-(A7)
08000A86  4879 0800 1548          pea       @m68kus~1_7.L
08000A8A  1AE4      
08000A8C  4E92      1549          jsr       (A2)
08000A8E  504F      1550          addq.w    #8,A7
                    1551   ; printf("\r\nPotentiometer: %d", Vchannel2 );
08000A90  122E FFFD 1552          move.b    -3(A6),D1
08000A94  4881      1553          ext.w     D1
08000A96  48C1      1554          ext.l     D1
08000A98  2F01      1555          move.l    D1,-(A7)
08000A9A  4879 0800 1556          pea       @m68kus~1_8.L
08000A9E  1AF6      
08000AA0  4E92      1557          jsr       (A2)
08000AA2  504F      1558          addq.w    #8,A7
                    1559   ; printf("\r\nPhotoresistor: %d", Vchannel3);
08000AA4  122E FFFE 1560          move.b    -2(A6),D1
08000AA8  4881      1561          ext.w     D1
08000AAA  48C1      1562          ext.l     D1
08000AAC  2F01      1563          move.l    D1,-(A7)
08000AAE  4879 0800 1564          pea       @m68kus~1_9.L
08000AB2  1B0A      
08000AB4  4E92      1565          jsr       (A2)
08000AB6  504F      1566          addq.w    #8,A7
                    1567   ; printf("\r\n--------------");
08000AB8  4879 0800 1568          pea       @m68kus~1_10.L
08000ABC  1B1E      
08000ABE  4E92      1569          jsr       (A2)
08000AC0  584F      1570          addq.w    #4,A7
                    1571   ; Wait1s();
08000AC2  4EB9 0800 1572          jsr       _Wait1s
08000AC6  0250      
08000AC8  6000 FEF8 1573          bra       readADC_1
                    1574   ; }
                    1575   ; }
                    1576   ; /*********************************************************************************************************************************
                    1577   ; **  IMPORTANT FUNCTION
                    1578   ; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
                    1579   ; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
                    1580   ; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
                    1581   ; **  Calling this function allows you to deal with Interrupts for example
                    1582   ; ***********************************************************************************************************************************/
                    1583   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                    1584   ; {
                    1585   _InstallExceptionHandler:
08000ACC  4E56 FFFC 1586          link      A6,#-4
                    1587   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
08000AD0  2D7C 0B00 1588          move.l    #184549376,-4(A6)
08000AD4  0000 FFFC 
                    1589   ; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
08000AD8  206E FFFC 1590          move.l    -4(A6),A0
08000ADC  202E 000C 1591          move.l    12(A6),D0
08000AE0  E588      1592          lsl.l     #2,D0
08000AE2  21AE 0008 1593          move.l    8(A6),0(A0,D0.L)
08000AE6  0800      
08000AE8  4E5E      1594          unlk      A6
08000AEA  4E75      1595          rts
                    1596   ; }
                    1597   ; /******************************************************************************************************************************
                    1598   ; * Start of user program
                    1599   ; ******************************************************************************************************************************/
                    1600   ; void main()
                    1601   ; {
                    1602   _main:
08000AEC  4E56 FCC8 1603          link      A6,#-824
08000AF0  48E7 303C 1604          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
08000AF4  45F9 0800 1605          lea       _printf.L,A2
08000AF8  0FCE      
08000AFA  47F9 0800 1606          lea       _InstallExceptionHandler.L,A3
08000AFE  0ACC      
08000B00  49EE FD74 1607          lea       -652(A6),A4
08000B04  4BF9 0800 1608          lea       _GetMemAddr.L,A5
08000B08  08E4      
                    1609   ; unsigned int row, j=0, count=0, counter1=1;
08000B0A  42AE FCCE 1610          clr.l     -818(A6)
08000B0E  42AE FCD2 1611          clr.l     -814(A6)
08000B12  2D7C 0000 1612          move.l    #1,-810(A6)
08000B16  0001 FCD6 
                    1613   ; char i = 0;
08000B1A  4202      1614          clr.b     D2
                    1615   ; char c, text[150] ;
                    1616   ; unsigned char asdf, asdf1, asdf2, asdf3, bank;
                    1617   ; unsigned char wBuf[256];
                    1618   ; unsigned char rBuf[256];
                    1619   ; int addr = 2048;
08000B1C  2D7C 0000 1620          move.l    #2048,-136(A6)
08000B20  0800 FF78 
                    1621   ; char size;
                    1622   ; char data[128];
                    1623   ; int PassFailFlag = 1 ;
08000B24  2D7C 0000 1624          move.l    #1,-4(A6)
08000B28  0001 FFFC 
                    1625   ; i = x = y = z = PortA_Count =0;
08000B2C  42B9 0800 1626          clr.l     _PortA_Count.L
08000B30  1E3A      
08000B32  42B9 0800 1627          clr.l     _z.L
08000B36  1E36      
08000B38  42B9 0800 1628          clr.l     _y.L
08000B3C  1E32      
08000B3E  42B9 0800 1629          clr.l     _x.L
08000B42  1E2E      
08000B44  4202      1630          clr.b     D2
                    1631   ; Timer1Count = Timer2Count = Timer3Count = Timer4Count = 0;
08000B46  4239 0800 1632          clr.b     _Timer4Count.L
08000B4A  1E44      
08000B4C  4239 0800 1633          clr.b     _Timer3Count.L
08000B50  1E42      
08000B52  4239 0800 1634          clr.b     _Timer2Count.L
08000B56  1E40      
08000B58  4239 0800 1635          clr.b     _Timer1Count.L
08000B5C  1E3E      
                    1636   ; InstallExceptionHandler(PIA_ISR, 25) ;          // install interrupt handler for PIAs 1 and 2 on level 1 IRQ
08000B5E  4878 0019 1637          pea       25
08000B62  4879 0800 1638          pea       _PIA_ISR.L
08000B66  01E8      
08000B68  4E93      1639          jsr       (A3)
08000B6A  504F      1640          addq.w    #8,A7
                    1641   ; InstallExceptionHandler(ACIA_ISR, 26) ;		    // install interrupt handler for ACIA on level 2 IRQ
08000B6C  4878 001A 1642          pea       26
08000B70  4879 0800 1643          pea       _ACIA_ISR.L
08000B74  01E6      
08000B76  4E93      1644          jsr       (A3)
08000B78  504F      1645          addq.w    #8,A7
                    1646   ; InstallExceptionHandler(Timer_ISR, 27) ;		// install interrupt handler for Timers 1-4 on level 3 IRQ
08000B7A  4878 001B 1647          pea       27
08000B7E  4879 0800 1648          pea       _Timer_ISR.L
08000B82  014C      
08000B84  4E93      1649          jsr       (A3)
08000B86  504F      1650          addq.w    #8,A7
                    1651   ; InstallExceptionHandler(Key2PressISR, 28) ;	    // install interrupt handler for Key Press 2 on DE1 board for level 4 IRQ
08000B88  4878 001C 1652          pea       28
08000B8C  4879 0800 1653          pea       _Key2PressISR.L
08000B90  01EA      
08000B92  4E93      1654          jsr       (A3)
08000B94  504F      1655          addq.w    #8,A7
                    1656   ; InstallExceptionHandler(Key1PressISR, 29) ;	    // install interrupt handler for Key Press 1 on DE1 board for level 5 IRQ
08000B96  4878 001D 1657          pea       29
08000B9A  4879 0800 1658          pea       _Key1PressISR.L
08000B9E  01EC      
08000BA0  4E93      1659          jsr       (A3)
08000BA2  504F      1660          addq.w    #8,A7
                    1661   ; Timer1Data = 0x10;		// program time delay into timers 1-4
08000BA4  13FC 0010 1662          move.b    #16,4194352
08000BA8  0040 0030 
                    1663   ; Timer2Data = 0x20;
08000BAC  13FC 0020 1664          move.b    #32,4194356
08000BB0  0040 0034 
                    1665   ; Timer3Data = 0x15;
08000BB4  13FC 0015 1666          move.b    #21,4194360
08000BB8  0040 0038 
                    1667   ; Timer4Data = 0x25;
08000BBC  13FC 0025 1668          move.b    #37,4194364
08000BC0  0040 003C 
                    1669   ; Timer1Control = 3;		// write 3 to control register to Bit0 = 1 (enable interrupt from timers) 1 - 4 and allow them to count Bit 1 = 1
08000BC4  13FC 0003 1670          move.b    #3,4194354
08000BC8  0040 0032 
                    1671   ; Timer2Control = 3;
08000BCC  13FC 0003 1672          move.b    #3,4194358
08000BD0  0040 0036 
                    1673   ; Timer3Control = 3;
08000BD4  13FC 0003 1674          move.b    #3,4194362
08000BD8  0040 003A 
                    1675   ; Timer4Control = 3;
08000BDC  13FC 0003 1676          move.b    #3,4194366
08000BE0  0040 003E 
                    1677   ; Init_LCD();             // initialise the LCD display to use a parallel data interface and 2 lines of display
08000BE4  4EB9 0800 1678          jsr       _Init_LCD
08000BE8  026A      
                    1679   ; Init_RS232() ;          // initialise the RS232 port for use with hyper terminal
08000BEA  4EB9 0800 1680          jsr       _Init_RS232
08000BEE  0288      
                    1681   ; /*************************************************************************************************
                    1682   ; **  I2C Program Lab 5
                    1683   ; *************************************************************************************************/
                    1684   ; I2C_Init();
08000BF0  4EB9 0800 1685          jsr       _I2C_Init
08000BF4  03D8      
                    1686   ; // printf("%x\n", I2C_PRERLO);
                    1687   ; // printf("%x\n", I2C_PRERHI);
                    1688   ; // printf("%x\n", I2C_CTR);
                    1689   ; // printf("%x\n", I2C_TXR);
                    1690   ; // printf("%x\n", I2C_RXR);
                    1691   ; // printf("%x\n", I2C_CR);
                    1692   ; // printf("%x\n", I2C_SR);
                    1693   ; printf("\r\nLab 5: I2C");
08000BF6  4879 0800 1694          pea       @m68kus~1_11.L
08000BFA  1B30      
08000BFC  4E92      1695          jsr       (A2)
08000BFE  584F      1696          addq.w    #4,A7
                    1697   ; while(1){
                    1698   main_1:
                    1699   ; printf("\r\nChoose the following:\r\n0 - Write Byte\r\n1 - Read Byte\r\n2 - Page Write\r\n3 - Page Read\r\n4 - DAC Blinky LED\r\n5 - ADC Read");
08000C00  4879 0800 1700          pea       @m68kus~1_12.L
08000C04  1B3E      
08000C06  4E92      1701          jsr       (A2)
08000C08  584F      1702          addq.w    #4,A7
                    1703   ; asdf = getchar();
08000C0A  4EB9 0800 1704          jsr       _getch
08000C0E  0F92      
08000C10  1D40 FD73 1705          move.b    D0,-653(A6)
                    1706   ; putchar(asdf);
08000C14  122E FD73 1707          move.b    -653(A6),D1
08000C18  C2BC 0000 1708          and.l     #255,D1
08000C1C  00FF      
08000C1E  2F01      1709          move.l    D1,-(A7)
08000C20  4EB9 0800 1710          jsr       _putch
08000C24  0F62      
08000C26  584F      1711          addq.w    #4,A7
                    1712   ; if(asdf == '0'){
08000C28  102E FD73 1713          move.b    -653(A6),D0
08000C2C  0C00 0030 1714          cmp.b     #48,D0
08000C30  6600 00AC 1715          bne       main_4
                    1716   ; printf("\r\nEnter byte to write: ");
08000C34  4879 0800 1717          pea       @m68kus~1_13.L
08000C38  1BB6      
08000C3A  4E92      1718          jsr       (A2)
08000C3C  584F      1719          addq.w    #4,A7
                    1720   ; asdf = Get2HexDigits(0);
08000C3E  42A7      1721          clr.l     -(A7)
08000C40  4EB9 0800 1722          jsr       _Get2HexDigits
08000C44  0070      
08000C46  584F      1723          addq.w    #4,A7
08000C48  1D40 FD73 1724          move.b    D0,-653(A6)
                    1725   ; // Bank Selection
                    1726   ; GetBank(&bank);
08000C4C  486E FD77 1727          pea       -649(A6)
08000C50  4EB9 0800 1728          jsr       _GetBank
08000C54  0884      
08000C56  584F      1729          addq.w    #4,A7
                    1730   ; // Mem Address Selection
                    1731   ; GetMemAddr(&asdf2, &asdf1);
08000C58  2F0C      1732          move.l    A4,-(A7)
08000C5A  486E FD75 1733          pea       -651(A6)
08000C5E  4E95      1734          jsr       (A5)
08000C60  504F      1735          addq.w    #8,A7
                    1736   ; WriteI2CChar(asdf, bank, asdf2, asdf1);
08000C62  1214      1737          move.b    (A4),D1
08000C64  4881      1738          ext.w     D1
08000C66  48C1      1739          ext.l     D1
08000C68  2F01      1740          move.l    D1,-(A7)
08000C6A  122E FD75 1741          move.b    -651(A6),D1
08000C6E  4881      1742          ext.w     D1
08000C70  48C1      1743          ext.l     D1
08000C72  2F01      1744          move.l    D1,-(A7)
08000C74  122E FD77 1745          move.b    -649(A6),D1
08000C78  4881      1746          ext.w     D1
08000C7A  48C1      1747          ext.l     D1
08000C7C  2F01      1748          move.l    D1,-(A7)
08000C7E  122E FD73 1749          move.b    -653(A6),D1
08000C82  4881      1750          ext.w     D1
08000C84  48C1      1751          ext.l     D1
08000C86  2F01      1752          move.l    D1,-(A7)
08000C88  4EB9 0800 1753          jsr       _WriteI2CChar
08000C8C  044A      
08000C8E  DEFC 0010 1754          add.w     #16,A7
                    1755   ; printf("\r\nWritten %x to bank %d at memaddr hi: %x mem addr lo: %x", asdf, bank == EEPROM_SLAVE_BANK0 ? 0:1, asdf2, asdf1);
08000C92  1214      1756          move.b    (A4),D1
08000C94  C2BC 0000 1757          and.l     #255,D1
08000C98  00FF      
08000C9A  2F01      1758          move.l    D1,-(A7)
08000C9C  122E FD75 1759          move.b    -651(A6),D1
08000CA0  C2BC 0000 1760          and.l     #255,D1
08000CA4  00FF      
08000CA6  2F01      1761          move.l    D1,-(A7)
08000CA8  122E FD77 1762          move.b    -649(A6),D1
08000CAC  C27C 00FF 1763          and.w     #255,D1
08000CB0  0C41 00A0 1764          cmp.w     #160,D1
08000CB4  6604      1765          bne.s     main_6
08000CB6  4201      1766          clr.b     D1
08000CB8  6002      1767          bra.s     main_7
                    1768   main_6:
08000CBA  7201      1769          moveq     #1,D1
                    1770   main_7:
08000CBC  4881      1771          ext.w     D1
08000CBE  48C1      1772          ext.l     D1
08000CC0  2F01      1773          move.l    D1,-(A7)
08000CC2  122E FD73 1774          move.b    -653(A6),D1
08000CC6  C2BC 0000 1775          and.l     #255,D1
08000CCA  00FF      
08000CCC  2F01      1776          move.l    D1,-(A7)
08000CCE  4879 0800 1777          pea       @m68kus~1_14.L
08000CD2  1BCE      
08000CD4  4E92      1778          jsr       (A2)
08000CD6  DEFC 0014 1779          add.w     #20,A7
08000CDA  6000 0282 1780          bra       main_29
                    1781   main_4:
                    1782   ; }
                    1783   ; else if(asdf == '1'){
08000CDE  102E FD73 1784          move.b    -653(A6),D0
08000CE2  0C00 0031 1785          cmp.b     #49,D0
08000CE6  6600 008E 1786          bne       main_8
                    1787   ; // Bank Selection
                    1788   ; GetBank(&bank);
08000CEA  486E FD77 1789          pea       -649(A6)
08000CEE  4EB9 0800 1790          jsr       _GetBank
08000CF2  0884      
08000CF4  584F      1791          addq.w    #4,A7
                    1792   ; // Mem Address Selection
                    1793   ; GetMemAddr(&asdf, &asdf1);
08000CF6  2F0C      1794          move.l    A4,-(A7)
08000CF8  486E FD73 1795          pea       -653(A6)
08000CFC  4E95      1796          jsr       (A5)
08000CFE  504F      1797          addq.w    #8,A7
                    1798   ; ReadI2CChar(&asdf3, bank, asdf, asdf1);
08000D00  1214      1799          move.b    (A4),D1
08000D02  4881      1800          ext.w     D1
08000D04  48C1      1801          ext.l     D1
08000D06  2F01      1802          move.l    D1,-(A7)
08000D08  122E FD73 1803          move.b    -653(A6),D1
08000D0C  4881      1804          ext.w     D1
08000D0E  48C1      1805          ext.l     D1
08000D10  2F01      1806          move.l    D1,-(A7)
08000D12  122E FD77 1807          move.b    -649(A6),D1
08000D16  4881      1808          ext.w     D1
08000D18  48C1      1809          ext.l     D1
08000D1A  2F01      1810          move.l    D1,-(A7)
08000D1C  486E FD76 1811          pea       -650(A6)
08000D20  4EB9 0800 1812          jsr       _ReadI2CChar
08000D24  04AA      
08000D26  DEFC 0010 1813          add.w     #16,A7
                    1814   ; printf("\r\nRead %x from bank %d at memaddr hi: %x mem addr lo: %x", asdf3, bank == EEPROM_SLAVE_BANK0 ? 0:1, asdf, asdf1);
08000D2A  1214      1815          move.b    (A4),D1
08000D2C  C2BC 0000 1816          and.l     #255,D1
08000D30  00FF      
08000D32  2F01      1817          move.l    D1,-(A7)
08000D34  122E FD73 1818          move.b    -653(A6),D1
08000D38  C2BC 0000 1819          and.l     #255,D1
08000D3C  00FF      
08000D3E  2F01      1820          move.l    D1,-(A7)
08000D40  122E FD77 1821          move.b    -649(A6),D1
08000D44  C27C 00FF 1822          and.w     #255,D1
08000D48  0C41 00A0 1823          cmp.w     #160,D1
08000D4C  6604      1824          bne.s     main_10
08000D4E  4201      1825          clr.b     D1
08000D50  6002      1826          bra.s     main_11
                    1827   main_10:
08000D52  7201      1828          moveq     #1,D1
                    1829   main_11:
08000D54  4881      1830          ext.w     D1
08000D56  48C1      1831          ext.l     D1
08000D58  2F01      1832          move.l    D1,-(A7)
08000D5A  122E FD76 1833          move.b    -650(A6),D1
08000D5E  C2BC 0000 1834          and.l     #255,D1
08000D62  00FF      
08000D64  2F01      1835          move.l    D1,-(A7)
08000D66  4879 0800 1836          pea       @m68kus~1_15.L
08000D6A  1C08      
08000D6C  4E92      1837          jsr       (A2)
08000D6E  DEFC 0014 1838          add.w     #20,A7
08000D72  6000 01EA 1839          bra       main_29
                    1840   main_8:
                    1841   ; }
                    1842   ; else if(asdf == '2'){
08000D76  102E FD73 1843          move.b    -653(A6),D0
08000D7A  0C00 0032 1844          cmp.b     #50,D0
08000D7E  6600 00C4 1845          bne       main_12
                    1846   ; printf("\r\nbruh");printf("\r\nEnter size of page to write(max 128 in hex == 0x7F): ");
08000D82  4879 0800 1847          pea       @m68kus~1_16.L
08000D86  1C42      
08000D88  4E92      1848          jsr       (A2)
08000D8A  584F      1849          addq.w    #4,A7
08000D8C  4879 0800 1850          pea       @m68kus~1_17.L
08000D90  1C4A      
08000D92  4E92      1851          jsr       (A2)
08000D94  584F      1852          addq.w    #4,A7
                    1853   ; size = Get2HexDigits(0);
08000D96  42A7      1854          clr.l     -(A7)
08000D98  4EB9 0800 1855          jsr       _Get2HexDigits
08000D9C  0070      
08000D9E  584F      1856          addq.w    #4,A7
08000DA0  1600      1857          move.b    D0,D3
                    1858   ; // Bank Selection
                    1859   ; GetBank(&bank);
08000DA2  486E FD77 1860          pea       -649(A6)
08000DA6  4EB9 0800 1861          jsr       _GetBank
08000DAA  0884      
08000DAC  584F      1862          addq.w    #4,A7
                    1863   ; // Mem Address Selection
                    1864   ; GetMemAddr(&asdf2, &asdf1);
08000DAE  2F0C      1865          move.l    A4,-(A7)
08000DB0  486E FD75 1866          pea       -651(A6)
08000DB4  4E95      1867          jsr       (A5)
08000DB6  504F      1868          addq.w    #8,A7
                    1869   ; WriteI2CPage(bank, asdf2, asdf1,size);
08000DB8  4883      1870          ext.w     D3
08000DBA  48C3      1871          ext.l     D3
08000DBC  2F03      1872          move.l    D3,-(A7)
08000DBE  1214      1873          move.b    (A4),D1
08000DC0  4881      1874          ext.w     D1
08000DC2  48C1      1875          ext.l     D1
08000DC4  2F01      1876          move.l    D1,-(A7)
08000DC6  122E FD75 1877          move.b    -651(A6),D1
08000DCA  4881      1878          ext.w     D1
08000DCC  48C1      1879          ext.l     D1
08000DCE  2F01      1880          move.l    D1,-(A7)
08000DD0  122E FD77 1881          move.b    -649(A6),D1
08000DD4  4881      1882          ext.w     D1
08000DD6  48C1      1883          ext.l     D1
08000DD8  2F01      1884          move.l    D1,-(A7)
08000DDA  4EB9 0800 1885          jsr       _WriteI2CPage
08000DDE  0692      
08000DE0  DEFC 0010 1886          add.w     #16,A7
                    1887   ; printf("\r\nWrote values starting at memaddr 0x%x%x and bank %d, total size: %x\r\nData: ", asdf2, asdf1, bank == EEPROM_SLAVE_BANK0 ? 0:1,size);
08000DE4  4883      1888          ext.w     D3
08000DE6  48C3      1889          ext.l     D3
08000DE8  2F03      1890          move.l    D3,-(A7)
08000DEA  122E FD77 1891          move.b    -649(A6),D1
08000DEE  C27C 00FF 1892          and.w     #255,D1
08000DF2  0C41 00A0 1893          cmp.w     #160,D1
08000DF6  6604      1894          bne.s     main_14
08000DF8  4201      1895          clr.b     D1
08000DFA  6002      1896          bra.s     main_15
                    1897   main_14:
08000DFC  7201      1898          moveq     #1,D1
                    1899   main_15:
08000DFE  4881      1900          ext.w     D1
08000E00  48C1      1901          ext.l     D1
08000E02  2F01      1902          move.l    D1,-(A7)
08000E04  1214      1903          move.b    (A4),D1
08000E06  C2BC 0000 1904          and.l     #255,D1
08000E0A  00FF      
08000E0C  2F01      1905          move.l    D1,-(A7)
08000E0E  122E FD75 1906          move.b    -651(A6),D1
08000E12  C2BC 0000 1907          and.l     #255,D1
08000E16  00FF      
08000E18  2F01      1908          move.l    D1,-(A7)
08000E1A  4879 0800 1909          pea       @m68kus~1_18.L
08000E1E  1C82      
08000E20  4E92      1910          jsr       (A2)
08000E22  DEFC 0014 1911          add.w     #20,A7
                    1912   ; for(i = 0; i < size; i++){
08000E26  4202      1913          clr.b     D2
                    1914   main_16:
08000E28  B403      1915          cmp.b     D3,D2
08000E2A  6C14      1916          bge.s     main_18
                    1917   ; printf("%x", i);
08000E2C  4882      1918          ext.w     D2
08000E2E  48C2      1919          ext.l     D2
08000E30  2F02      1920          move.l    D2,-(A7)
08000E32  4879 0800 1921          pea       @m68kus~1_19.L
08000E36  1CD0      
08000E38  4E92      1922          jsr       (A2)
08000E3A  504F      1923          addq.w    #8,A7
08000E3C  5202      1924          addq.b    #1,D2
08000E3E  60E8      1925          bra       main_16
                    1926   main_18:
08000E40  6000 011C 1927          bra       main_29
                    1928   main_12:
                    1929   ; }
                    1930   ; }
                    1931   ; else if(asdf == '3'){
08000E44  102E FD73 1932          move.b    -653(A6),D0
08000E48  0C00 0033 1933          cmp.b     #51,D0
08000E4C  6600 00CA 1934          bne       main_19
                    1935   ; printf("\r\nEnter size of page to read(max 128 in hex == 0x7F): ");
08000E50  4879 0800 1936          pea       @m68kus~1_20.L
08000E54  1CD4      
08000E56  4E92      1937          jsr       (A2)
08000E58  584F      1938          addq.w    #4,A7
                    1939   ; size = Get2HexDigits(0);
08000E5A  42A7      1940          clr.l     -(A7)
08000E5C  4EB9 0800 1941          jsr       _Get2HexDigits
08000E60  0070      
08000E62  584F      1942          addq.w    #4,A7
08000E64  1600      1943          move.b    D0,D3
                    1944   ; // Bank Selection
                    1945   ; GetBank(&bank);
08000E66  486E FD77 1946          pea       -649(A6)
08000E6A  4EB9 0800 1947          jsr       _GetBank
08000E6E  0884      
08000E70  584F      1948          addq.w    #4,A7
                    1949   ; // Mem Address Selection
                    1950   ; GetMemAddr(&asdf2, &asdf1);
08000E72  2F0C      1951          move.l    A4,-(A7)
08000E74  486E FD75 1952          pea       -651(A6)
08000E78  4E95      1953          jsr       (A5)
08000E7A  504F      1954          addq.w    #8,A7
                    1955   ; ReadI2CPage(data, bank, asdf2, asdf1,size);
08000E7C  4883      1956          ext.w     D3
08000E7E  48C3      1957          ext.l     D3
08000E80  2F03      1958          move.l    D3,-(A7)
08000E82  1214      1959          move.b    (A4),D1
08000E84  4881      1960          ext.w     D1
08000E86  48C1      1961          ext.l     D1
08000E88  2F01      1962          move.l    D1,-(A7)
08000E8A  122E FD75 1963          move.b    -651(A6),D1
08000E8E  4881      1964          ext.w     D1
08000E90  48C1      1965          ext.l     D1
08000E92  2F01      1966          move.l    D1,-(A7)
08000E94  122E FD77 1967          move.b    -649(A6),D1
08000E98  4881      1968          ext.w     D1
08000E9A  48C1      1969          ext.l     D1
08000E9C  2F01      1970          move.l    D1,-(A7)
08000E9E  486E FF7C 1971          pea       -132(A6)
08000EA2  4EB9 0800 1972          jsr       _ReadI2CPage
08000EA6  0752      
08000EA8  DEFC 0014 1973          add.w     #20,A7
                    1974   ; printf("\r\nRead values starting at memaddr 0x%x%x and bank %d, total size: %x\r\nData: ", asdf2, asdf1, bank == EEPROM_SLAVE_BANK0 ? 0:1,size);
08000EAC  4883      1975          ext.w     D3
08000EAE  48C3      1976          ext.l     D3
08000EB0  2F03      1977          move.l    D3,-(A7)
08000EB2  122E FD77 1978          move.b    -649(A6),D1
08000EB6  C27C 00FF 1979          and.w     #255,D1
08000EBA  0C41 00A0 1980          cmp.w     #160,D1
08000EBE  6604      1981          bne.s     main_21
08000EC0  4201      1982          clr.b     D1
08000EC2  6002      1983          bra.s     main_22
                    1984   main_21:
08000EC4  7201      1985          moveq     #1,D1
                    1986   main_22:
08000EC6  4881      1987          ext.w     D1
08000EC8  48C1      1988          ext.l     D1
08000ECA  2F01      1989          move.l    D1,-(A7)
08000ECC  1214      1990          move.b    (A4),D1
08000ECE  C2BC 0000 1991          and.l     #255,D1
08000ED2  00FF      
08000ED4  2F01      1992          move.l    D1,-(A7)
08000ED6  122E FD75 1993          move.b    -651(A6),D1
08000EDA  C2BC 0000 1994          and.l     #255,D1
08000EDE  00FF      
08000EE0  2F01      1995          move.l    D1,-(A7)
08000EE2  4879 0800 1996          pea       @m68kus~1_21.L
08000EE6  1D0C      
08000EE8  4E92      1997          jsr       (A2)
08000EEA  DEFC 0014 1998          add.w     #20,A7
                    1999   ; for(i = 0; i < size; i++){
08000EEE  4202      2000          clr.b     D2
                    2001   main_23:
08000EF0  B403      2002          cmp.b     D3,D2
08000EF2  6C20      2003          bge.s     main_25
                    2004   ; printf("%x", data[i]);
08000EF4  4882      2005          ext.w     D2
08000EF6  48C2      2006          ext.l     D2
08000EF8  41EE FF7C 2007          lea       -132(A6),A0
08000EFC  1230 2800 2008          move.b    0(A0,D2.L),D1
08000F00  4881      2009          ext.w     D1
08000F02  48C1      2010          ext.l     D1
08000F04  2F01      2011          move.l    D1,-(A7)
08000F06  4879 0800 2012          pea       @m68kus~1_19.L
08000F0A  1CD0      
08000F0C  4E92      2013          jsr       (A2)
08000F0E  504F      2014          addq.w    #8,A7
08000F10  5202      2015          addq.b    #1,D2
08000F12  60DC      2016          bra       main_23
                    2017   main_25:
08000F14  6000 0048 2018          bra       main_29
                    2019   main_19:
                    2020   ; }
                    2021   ; }
                    2022   ; else if(asdf == '4'){
08000F18  102E FD73 2023          move.b    -653(A6),D0
08000F1C  0C00 0034 2024          cmp.b     #52,D0
08000F20  6612      2025          bne.s     main_26
                    2026   ; printf("\r\nDAC Blinky... frequency of blinky is: \r\nON - 250ms - OFF - 250ms\r\n0N - 250ms - OFF - 250ms\r\nON - 750ms - OFF - 750ms\r\nRepeat forever\r\n");
08000F22  4879 0800 2027          pea       @m68kus~1_22.L
08000F26  1D5A      
08000F28  4E92      2028          jsr       (A2)
08000F2A  584F      2029          addq.w    #4,A7
                    2030   ; blinky();
08000F2C  4EB9 0800 2031          jsr       _blinky
08000F30  0928      
08000F32  602A      2032          bra.s     main_29
                    2033   main_26:
                    2034   ; }
                    2035   ; else if(asdf == '5'){
08000F34  102E FD73 2036          move.b    -653(A6),D0
08000F38  0C00 0035 2037          cmp.b     #53,D0
08000F3C  6612      2038          bne.s     main_28
                    2039   ; printf("\r\nADC Channel Output:");
08000F3E  4879 0800 2040          pea       @m68kus~1_23.L
08000F42  1DE4      
08000F44  4E92      2041          jsr       (A2)
08000F46  584F      2042          addq.w    #4,A7
                    2043   ; readADC();
08000F48  4EB9 0800 2044          jsr       _readADC
08000F4C  09AE      
08000F4E  600E      2045          bra.s     main_29
                    2046   main_28:
                    2047   ; }
                    2048   ; else{
                    2049   ; printf("\r\nInvalid Selection.\r\n");
08000F50  4879 0800 2050          pea       @m68kus~1_24.L
08000F54  1DFA      
08000F56  4E92      2051          jsr       (A2)
08000F58  584F      2052          addq.w    #4,A7
                    2053   ; continue;
08000F5A  6000 0002 2054          bra       main_29
                    2055   main_29:
08000F5E  6000 FCA0 2056          bra       main_1
                    2057   ; }   
                    2058   ; }
                    2059   ; }
                    2060   _putch:
08000F62  4E56 0000 2061          link      A6,#0
08000F66  48E7 2000 2062          movem.l   D2,-(A7)
08000F6A  242E 0008 2063          move.l    8(A6),D2
08000F6E  0C82 0000 2064          cmp.l     #10,D2
08000F72  000A      
08000F74  660A      2065          bne.s     putch_1
08000F76  4878 000D 2066          pea       13
08000F7A  6100 F31E 2067          bsr       __putch
08000F7E  584F      2068          addq.w    #4,A7
                    2069   putch_1:
08000F80  2F02      2070          move.l    D2,-(A7)
08000F82  6100 F316 2071          bsr       __putch
08000F86  584F      2072          addq.w    #4,A7
08000F88  2002      2073          move.l    D2,D0
08000F8A  4CDF 0004 2074          movem.l   (A7)+,D2
08000F8E  4E5E      2075          unlk      A6
08000F90  4E75      2076          rts
                    2077   _getch:
08000F92  48E7 2000 2078          movem.l   D2,-(A7)
08000F96  2439 0800 2079          move.l    __ungetbuf,D2
08000F9A  1E12      
08000F9C  2039 0800 2080          move.l    __ungetbuf,D0
08000FA0  1E12      
08000FA2  0C80 FFFF 2081          cmp.l     #-1,D0
08000FA6  FFFF      
08000FA8  670C      2082          beq.s     getch_1
08000FAA  23FC FFFF 2083          move.l    #-1,__ungetbuf
08000FAE  FFFF 0800 
08000FB2  1E12      
08000FB4  6010      2084          bra.s     getch_3
                    2085   getch_1:
08000FB6  6100 F310 2086          bsr       __getch
08000FBA  2400      2087          move.l    D0,D2
08000FBC  0C80 0000 2088          cmp.l     #13,D0
08000FC0  000D      
08000FC2  6602      2089          bne.s     getch_3
08000FC4  740A      2090          moveq     #10,D2
                    2091   getch_3:
08000FC6  2002      2092          move.l    D2,D0
08000FC8  4CDF 0004 2093          movem.l   (A7)+,D2
08000FCC  4E75      2094          rts
                    2095   _printf:
08000FCE  4E56 FFFC 2096          link      A6,#-4
08000FD2  48E7 2000 2097          movem.l   D2,-(A7)
08000FD6  41EE 0008 2098          lea       8(A6),A0
08000FDA  5848      2099          addq.w    #4,A0
08000FDC  2408      2100          move.l    A0,D2
08000FDE  2F02      2101          move.l    D2,-(A7)
08000FE0  2F2E 0008 2102          move.l    8(A6),-(A7)
08000FE4  42A7      2103          clr.l     -(A7)
08000FE6  6100 00CA 2104          bsr       _vsprintf
08000FEA  DEFC 000C 2105          add.w     #12,A7
08000FEE  2D40 FFFC 2106          move.l    D0,-4(A6)
08000FF2  4282      2107          clr.l     D2
08000FF4  202E FFFC 2108          move.l    -4(A6),D0
08000FF8  4CDF 0004 2109          movem.l   (A7)+,D2
08000FFC  4E5E      2110          unlk      A6
08000FFE  4E75      2111          rts
                    2112   @vsprintf_copy:
08001000  4E56 0000 2113          link      A6,#0
08001004  206E 0008 2114          move.l    8(A6),A0
08001008  4A90      2115          tst.l     (A0)
0800100A  6710      2116          beq.s     @vsprintf_copy_1
0800100C  202E 000C 2117          move.l    12(A6),D0
08001010  206E 0008 2118          move.l    8(A6),A0
08001014  2250      2119          move.l    (A0),A1
08001016  5290      2120          addq.l    #1,(A0)
08001018  1280      2121          move.b    D0,(A1)
0800101A  600A      2122          bra.s     @vsprintf_copy_2
                    2123   @vsprintf_copy_1:
0800101C  2F2E 000C 2124          move.l    12(A6),-(A7)
08001020  6100 FF40 2125          bsr       _putch
08001024  584F      2126          addq.w    #4,A7
                    2127   @vsprintf_copy_2:
08001026  4E5E      2128          unlk      A6
08001028  4E75      2129          rts
                    2130   @vsprintf_getval:
0800102A  4E56 0000 2131          link      A6,#0
0800102E  48E7 3000 2132          movem.l   D2/D3,-(A7)
08001032  242E 0008 2133          move.l    8(A6),D2
08001036  4283      2134          clr.l     D3
08001038  2042      2135          move.l    D2,A0
0800103A  2050      2136          move.l    (A0),A0
0800103C  1010      2137          move.b    (A0),D0
0800103E  4880      2138          ext.w     D0
08001040  48C0      2139          ext.l     D0
08001042  0C80 0000 2140          cmp.l     #42,D0
08001046  002A      
08001048  6612      2141          bne.s     @vsprintf_getval_1
0800104A  206E 000C 2142          move.l    12(A6),A0
0800104E  2250      2143          move.l    (A0),A1
08001050  5890      2144          addq.l    #4,(A0)
08001052  2611      2145          move.l    (A1),D3
08001054  2042      2146          move.l    D2,A0
08001056  5290      2147          addq.l    #1,(A0)
08001058  6000 004E 2148          bra       @vsprintf_getval_5
                    2149   @vsprintf_getval_1:
0800105C  2042      2150          move.l    D2,A0
0800105E  2050      2151          move.l    (A0),A0
08001060  1010      2152          move.b    (A0),D0
08001062  4880      2153          ext.w     D0
08001064  48C0      2154          ext.l     D0
08001066  0C80 0000 2155          cmp.l     #48,D0
0800106A  0030      
0800106C  6D00 003A 2156          blt       @vsprintf_getval_5
08001070  2042      2157          move.l    D2,A0
08001072  2050      2158          move.l    (A0),A0
08001074  1010      2159          move.b    (A0),D0
08001076  4880      2160          ext.w     D0
08001078  48C0      2161          ext.l     D0
0800107A  0C80 0000 2162          cmp.l     #57,D0
0800107E  0039      
08001080  6E26      2163          bgt.s     @vsprintf_getval_5
08001082  2F03      2164          move.l    D3,-(A7)
08001084  4878 000A 2165          pea       10
08001088  6100 07F6 2166          bsr       LMUL
0800108C  2017      2167          move.l    (A7),D0
0800108E  504F      2168          addq.w    #8,A7
08001090  2042      2169          move.l    D2,A0
08001092  2250      2170          move.l    (A0),A1
08001094  5290      2171          addq.l    #1,(A0)
08001096  1211      2172          move.b    (A1),D1
08001098  4881      2173          ext.w     D1
0800109A  48C1      2174          ext.l     D1
0800109C  D081      2175          add.l     D1,D0
0800109E  0480 0000 2176          sub.l     #48,D0
080010A2  0030      
080010A4  2600      2177          move.l    D0,D3
080010A6  60B4      2178          bra       @vsprintf_getval_1
                    2179   @vsprintf_getval_5:
080010A8  2003      2180          move.l    D3,D0
080010AA  4CDF 000C 2181          movem.l   (A7)+,D2/D3
080010AE  4E5E      2182          unlk      A6
080010B0  4E75      2183          rts
                    2184   _vsprintf:
080010B2  4E56 FFCC 2185          link      A6,#-52
080010B6  48E7 3F3C 2186          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
080010BA  45EE 0008 2187          lea       8(A6),A2
080010BE  47F9 0800 2188          lea       @vsprintf_copy,A3
080010C2  1000      
080010C4  49F9 0800 2189          lea       _ultoa,A4
080010C8  180C      
080010CA  4286      2190          clr.l     D6
                    2191   vsprintf_1:
080010CC  206E 000C 2192          move.l    12(A6),A0
080010D0  4A10      2193          tst.b     (A0)
080010D2  6700 0624 2194          beq       vsprintf_3
080010D6  206E 000C 2195          move.l    12(A6),A0
080010DA  1010      2196          move.b    (A0),D0
080010DC  4880      2197          ext.w     D0
080010DE  48C0      2198          ext.l     D0
080010E0  0C80 0000 2199          cmp.l     #37,D0
080010E4  0025      
080010E6  671C      2200          beq.s     vsprintf_4
080010E8  206E 000C 2201          move.l    12(A6),A0
080010EC  52AE 000C 2202          addq.l    #1,12(A6)
080010F0  1210      2203          move.b    (A0),D1
080010F2  4881      2204          ext.w     D1
080010F4  48C1      2205          ext.l     D1
080010F6  2F01      2206          move.l    D1,-(A7)
080010F8  2F0A      2207          move.l    A2,-(A7)
080010FA  4E93      2208          jsr       (A3)
080010FC  504F      2209          addq.w    #8,A7
080010FE  5286      2210          addq.l    #1,D6
08001100  6000 05F2 2211          bra       vsprintf_2
                    2212   vsprintf_4:
08001104  52AE 000C 2213          addq.l    #1,12(A6)
08001108  422E FFD3 2214          clr.b     -45(A6)
0800110C  422E FFD2 2215          clr.b     -46(A6)
08001110  422E FFD0 2216          clr.b     -48(A6)
08001114  422E FFCF 2217          clr.b     -49(A6)
08001118  422E FFCE 2218          clr.b     -50(A6)
0800111C  422E FFCD 2219          clr.b     -51(A6)
08001120  42AE FFFC 2220          clr.l     -4(A6)
08001124  7AFF      2221          moveq     #-1,D5
08001126  41EE FFDC 2222          lea       -36(A6),A0
0800112A  2608      2223          move.l    A0,D3
0800112C  2408      2224          move.l    A0,D2
                    2225   vsprintf_6:
0800112E  206E 000C 2226          move.l    12(A6),A0
08001132  1010      2227          move.b    (A0),D0
08001134  4880      2228          ext.w     D0
08001136  48C0      2229          ext.l     D0
08001138  0C80 0000 2230          cmp.l     #43,D0
0800113C  002B      
0800113E  6730      2231          beq.s     vsprintf_12
08001140  6E18      2232          bgt.s     vsprintf_15
08001142  0C80 0000 2233          cmp.l     #35,D0
08001146  0023      
08001148  6700 003E 2234          beq       vsprintf_14
0800114C  6E00 0046 2235          bgt       vsprintf_9
08001150  0C80 0000 2236          cmp.l     #32,D0
08001154  0020      
08001156  6724      2237          beq.s     vsprintf_13
08001158  603A      2238          bra.s     vsprintf_9
                    2239   vsprintf_15:
0800115A  0C80 0000 2240          cmp.l     #45,D0
0800115E  002D      
08001160  6702      2241          beq.s     vsprintf_11
08001162  6030      2242          bra.s     vsprintf_9
                    2243   vsprintf_11:
08001164  1D7C 0001 2244          move.b    #1,-51(A6)
08001168  FFCD      
0800116A  52AE 000C 2245          addq.l    #1,12(A6)
0800116E  6026      2246          bra.s     vsprintf_7
                    2247   vsprintf_12:
08001170  1D7C 0001 2248          move.b    #1,-50(A6)
08001174  FFCE      
08001176  52AE 000C 2249          addq.l    #1,12(A6)
0800117A  601A      2250          bra.s     vsprintf_7
                    2251   vsprintf_13:
0800117C  1D7C 0001 2252          move.b    #1,-49(A6)
08001180  FFCF      
08001182  52AE 000C 2253          addq.l    #1,12(A6)
08001186  600E      2254          bra.s     vsprintf_7
                    2255   vsprintf_14:
08001188  1D7C 0001 2256          move.b    #1,-48(A6)
0800118C  FFD0      
0800118E  52AE 000C 2257          addq.l    #1,12(A6)
08001192  6002      2258          bra.s     vsprintf_7
                    2259   vsprintf_9:
08001194  6002      2260          bra.s     vsprintf_8
                    2261   vsprintf_7:
08001196  6096      2262          bra       vsprintf_6
                    2263   vsprintf_8:
08001198  206E 000C 2264          move.l    12(A6),A0
0800119C  1010      2265          move.b    (A0),D0
0800119E  4880      2266          ext.w     D0
080011A0  48C0      2267          ext.l     D0
080011A2  0C80 0000 2268          cmp.l     #48,D0
080011A6  0030      
080011A8  660A      2269          bne.s     vsprintf_16
080011AA  52AE 000C 2270          addq.l    #1,12(A6)
080011AE  1D7C 0001 2271          move.b    #1,-46(A6)
080011B2  FFD2      
                    2272   vsprintf_16:
080011B4  486E 0010 2273          pea       16(A6)
080011B8  486E 000C 2274          pea       12(A6)
080011BC  6100 FE6C 2275          bsr       @vsprintf_getval
080011C0  504F      2276          addq.w    #8,A7
080011C2  2A40      2277          move.l    D0,A5
080011C4  206E 000C 2278          move.l    12(A6),A0
080011C8  1010      2279          move.b    (A0),D0
080011CA  4880      2280          ext.w     D0
080011CC  48C0      2281          ext.l     D0
080011CE  0C80 0000 2282          cmp.l     #46,D0
080011D2  002E      
080011D4  6614      2283          bne.s     vsprintf_18
080011D6  52AE 000C 2284          addq.l    #1,12(A6)
080011DA  486E 0010 2285          pea       16(A6)
080011DE  486E 000C 2286          pea       12(A6)
080011E2  6100 FE46 2287          bsr       @vsprintf_getval
080011E6  504F      2288          addq.w    #8,A7
080011E8  2A00      2289          move.l    D0,D5
                    2290   vsprintf_18:
080011EA  206E 000C 2291          move.l    12(A6),A0
080011EE  1010      2292          move.b    (A0),D0
080011F0  4880      2293          ext.w     D0
080011F2  48C0      2294          ext.l     D0
080011F4  0C80 0000 2295          cmp.l     #108,D0
080011F8  006C      
080011FA  660A      2296          bne.s     vsprintf_20
080011FC  52AE 000C 2297          addq.l    #1,12(A6)
08001200  1D7C 0001 2298          move.b    #1,-45(A6)
08001204  FFD3      
                    2299   vsprintf_20:
08001206  206E 000C 2300          move.l    12(A6),A0
0800120A  1010      2301          move.b    (A0),D0
0800120C  4880      2302          ext.w     D0
0800120E  48C0      2303          ext.l     D0
08001210  0C80 0000 2304          cmp.l     #111,D0
08001214  006F      
08001216  6700 00D4 2305          beq       vsprintf_27
0800121A  6E34      2306          bgt.s     vsprintf_33
0800121C  0C80 0000 2307          cmp.l     #100,D0
08001220  0064      
08001222  6700 0054 2308          beq       vsprintf_24
08001226  6E1C      2309          bgt.s     vsprintf_34
08001228  0C80 0000 2310          cmp.l     #99,D0
0800122C  0063      
0800122E  6700 012C 2311          beq       vsprintf_30
08001232  6E00 016A 2312          bgt       vsprintf_22
08001236  0C80 0000 2313          cmp.l     #88,D0
0800123A  0058      
0800123C  6700 00E6 2314          beq       vsprintf_28
08001240  6000 015C 2315          bra       vsprintf_22
                    2316   vsprintf_34:
08001244  0C80 0000 2317          cmp.l     #105,D0
08001248  0069      
0800124A  672C      2318          beq.s     vsprintf_24
0800124C  6000 0150 2319          bra       vsprintf_22
                    2320   vsprintf_33:
08001250  0C80 0000 2321          cmp.l     #117,D0
08001254  0075      
08001256  6700 005C 2322          beq       vsprintf_26
0800125A  6E0E      2323          bgt.s     vsprintf_35
0800125C  0C80 0000 2324          cmp.l     #115,D0
08001260  0073      
08001262  6700 011C 2325          beq       vsprintf_31
08001266  6000 0136 2326          bra       vsprintf_22
                    2327   vsprintf_35:
0800126A  0C80 0000 2328          cmp.l     #120,D0
0800126E  0078      
08001270  6700 00B2 2329          beq       vsprintf_28
08001274  6000 0128 2330          bra       vsprintf_22
                    2331   vsprintf_24:
08001278  4A2E FFD3 2332          tst.b     -45(A6)
0800127C  671A      2333          beq.s     vsprintf_36
0800127E  4878 000A 2334          pea       10
08001282  2F03      2335          move.l    D3,-(A7)
08001284  206E 0010 2336          move.l    16(A6),A0
08001288  58AE 0010 2337          addq.l    #4,16(A6)
0800128C  2F10      2338          move.l    (A0),-(A7)
0800128E  6100 04F8 2339          bsr       _ltoa
08001292  DEFC 000C 2340          add.w     #12,A7
08001296  6018      2341          bra.s     vsprintf_37
                    2342   vsprintf_36:
08001298  4878 000A 2343          pea       10
0800129C  2F03      2344          move.l    D3,-(A7)
0800129E  206E 0010 2345          move.l    16(A6),A0
080012A2  58AE 0010 2346          addq.l    #4,16(A6)
080012A6  2F10      2347          move.l    (A0),-(A7)
080012A8  6100 04DE 2348          bsr       _ltoa
080012AC  DEFC 000C 2349          add.w     #12,A7
                    2350   vsprintf_37:
080012B0  6000 00FA 2351          bra       vsprintf_23
                    2352   vsprintf_26:
080012B4  4A2E FFD3 2353          tst.b     -45(A6)
080012B8  6718      2354          beq.s     vsprintf_38
080012BA  4878 000A 2355          pea       10
080012BE  2F03      2356          move.l    D3,-(A7)
080012C0  206E 0010 2357          move.l    16(A6),A0
080012C4  58AE 0010 2358          addq.l    #4,16(A6)
080012C8  2F10      2359          move.l    (A0),-(A7)
080012CA  4E94      2360          jsr       (A4)
080012CC  DEFC 000C 2361          add.w     #12,A7
080012D0  6016      2362          bra.s     vsprintf_39
                    2363   vsprintf_38:
080012D2  4878 000A 2364          pea       10
080012D6  2F03      2365          move.l    D3,-(A7)
080012D8  206E 0010 2366          move.l    16(A6),A0
080012DC  58AE 0010 2367          addq.l    #4,16(A6)
080012E0  2F10      2368          move.l    (A0),-(A7)
080012E2  4E94      2369          jsr       (A4)
080012E4  DEFC 000C 2370          add.w     #12,A7
                    2371   vsprintf_39:
080012E8  6000 00C2 2372          bra       vsprintf_23
                    2373   vsprintf_27:
080012EC  4A2E FFD3 2374          tst.b     -45(A6)
080012F0  6718      2375          beq.s     vsprintf_40
080012F2  4878 0008 2376          pea       8
080012F6  2F03      2377          move.l    D3,-(A7)
080012F8  206E 0010 2378          move.l    16(A6),A0
080012FC  58AE 0010 2379          addq.l    #4,16(A6)
08001300  2F10      2380          move.l    (A0),-(A7)
08001302  4E94      2381          jsr       (A4)
08001304  DEFC 000C 2382          add.w     #12,A7
08001308  6016      2383          bra.s     vsprintf_41
                    2384   vsprintf_40:
0800130A  4878 0008 2385          pea       8
0800130E  2F03      2386          move.l    D3,-(A7)
08001310  206E 0010 2387          move.l    16(A6),A0
08001314  58AE 0010 2388          addq.l    #4,16(A6)
08001318  2F10      2389          move.l    (A0),-(A7)
0800131A  4E94      2390          jsr       (A4)
0800131C  DEFC 000C 2391          add.w     #12,A7
                    2392   vsprintf_41:
08001320  6000 008A 2393          bra       vsprintf_23
                    2394   vsprintf_28:
08001324  4A2E FFD3 2395          tst.b     -45(A6)
08001328  6718      2396          beq.s     vsprintf_42
0800132A  4878 0010 2397          pea       16
0800132E  2F03      2398          move.l    D3,-(A7)
08001330  206E 0010 2399          move.l    16(A6),A0
08001334  58AE 0010 2400          addq.l    #4,16(A6)
08001338  2F10      2401          move.l    (A0),-(A7)
0800133A  4E94      2402          jsr       (A4)
0800133C  DEFC 000C 2403          add.w     #12,A7
08001340  6016      2404          bra.s     vsprintf_43
                    2405   vsprintf_42:
08001342  4878 0010 2406          pea       16
08001346  2F03      2407          move.l    D3,-(A7)
08001348  206E 0010 2408          move.l    16(A6),A0
0800134C  58AE 0010 2409          addq.l    #4,16(A6)
08001350  2F10      2410          move.l    (A0),-(A7)
08001352  4E94      2411          jsr       (A4)
08001354  DEFC 000C 2412          add.w     #12,A7
                    2413   vsprintf_43:
08001358  6000 0052 2414          bra       vsprintf_23
                    2415   vsprintf_30:
0800135C  206E 0010 2416          move.l    16(A6),A0
08001360  58AE 0010 2417          addq.l    #4,16(A6)
08001364  2010      2418          move.l    (A0),D0
08001366  2042      2419          move.l    D2,A0
08001368  5282      2420          addq.l    #1,D2
0800136A  1080      2421          move.b    D0,(A0)
0800136C  2042      2422          move.l    D2,A0
0800136E  4210      2423          clr.b     (A0)
08001370  200D      2424          move.l    A5,D0
08001372  6704      2425          beq.s     vsprintf_44
08001374  200D      2426          move.l    A5,D0
08001376  6002      2427          bra.s     vsprintf_45
                    2428   vsprintf_44:
08001378  7001      2429          moveq     #1,D0
                    2430   vsprintf_45:
0800137A  2A00      2431          move.l    D0,D5
0800137C  6000 002E 2432          bra       vsprintf_23
                    2433   vsprintf_31:
08001380  206E 0010 2434          move.l    16(A6),A0
08001384  58AE 0010 2435          addq.l    #4,16(A6)
08001388  2610      2436          move.l    (A0),D3
0800138A  0C85 FFFF 2437          cmp.l     #-1,D5
0800138E  FFFF      
08001390  660A      2438          bne.s     vsprintf_46
08001392  2F03      2439          move.l    D3,-(A7)
08001394  6100 0578 2440          bsr       _strlen
08001398  584F      2441          addq.w    #4,A7
0800139A  2A00      2442          move.l    D0,D5
                    2443   vsprintf_46:
0800139C  600E      2444          bra.s     vsprintf_23
                    2445   vsprintf_22:
0800139E  206E 000C 2446          move.l    12(A6),A0
080013A2  2242      2447          move.l    D2,A1
080013A4  5282      2448          addq.l    #1,D2
080013A6  1290      2449          move.b    (A0),(A1)
080013A8  2042      2450          move.l    D2,A0
080013AA  4210      2451          clr.b     (A0)
                    2452   vsprintf_23:
080013AC  2F03      2453          move.l    D3,-(A7)
080013AE  6100 055E 2454          bsr       _strlen
080013B2  584F      2455          addq.w    #4,A7
080013B4  1800      2456          move.b    D0,D4
080013B6  206E 000C 2457          move.l    12(A6),A0
080013BA  1010      2458          move.b    (A0),D0
080013BC  4880      2459          ext.w     D0
080013BE  48C0      2460          ext.l     D0
080013C0  0C80 0000 2461          cmp.l     #115,D0
080013C4  0073      
080013C6  6618      2462          bne.s     vsprintf_48
080013C8  0C85 0000 2463          cmp.l     #0,D5
080013CC  0000      
080013CE  6D10      2464          blt.s     vsprintf_48
080013D0  4884      2465          ext.w     D4
080013D2  48C4      2466          ext.l     D4
080013D4  B885      2467          cmp.l     D5,D4
080013D6  6F04      2468          ble.s     vsprintf_50
080013D8  1005      2469          move.b    D5,D0
080013DA  6002      2470          bra.s     vsprintf_51
                    2471   vsprintf_50:
080013DC  1004      2472          move.b    D4,D0
                    2473   vsprintf_51:
080013DE  1800      2474          move.b    D0,D4
                    2475   vsprintf_48:
080013E0  206E 000C 2476          move.l    12(A6),A0
080013E4  1010      2477          move.b    (A0),D0
080013E6  4880      2478          ext.w     D0
080013E8  48C0      2479          ext.l     D0
080013EA  0C80 0000 2480          cmp.l     #88,D0
080013EE  0058      
080013F0  6600 0026 2481          bne       vsprintf_56
080013F4  41EE FFDC 2482          lea       -36(A6),A0
080013F8  2408      2483          move.l    A0,D2
                    2484   vsprintf_54:
080013FA  2042      2485          move.l    D2,A0
080013FC  4A10      2486          tst.b     (A0)
080013FE  6718      2487          beq.s     vsprintf_56
08001400  2042      2488          move.l    D2,A0
08001402  1210      2489          move.b    (A0),D1
08001404  4881      2490          ext.w     D1
08001406  48C1      2491          ext.l     D1
08001408  2F01      2492          move.l    D1,-(A7)
0800140A  6100 0514 2493          bsr       _toupper
0800140E  584F      2494          addq.w    #4,A7
08001410  2042      2495          move.l    D2,A0
08001412  1080      2496          move.b    D0,(A0)
08001414  5282      2497          addq.l    #1,D2
08001416  60E2      2498          bra       vsprintf_54
                    2499   vsprintf_56:
08001418  7E00      2500          moveq     #0,D7
0800141A  41EE FFD4 2501          lea       -44(A6),A0
0800141E  2408      2502          move.l    A0,D2
08001420  206E 000C 2503          move.l    12(A6),A0
08001424  1010      2504          move.b    (A0),D0
08001426  4880      2505          ext.w     D0
08001428  48C0      2506          ext.l     D0
0800142A  0C80 0000 2507          cmp.l     #100,D0
0800142E  0064      
08001430  6714      2508          beq.s     vsprintf_59
08001432  206E 000C 2509          move.l    12(A6),A0
08001436  1010      2510          move.b    (A0),D0
08001438  4880      2511          ext.w     D0
0800143A  48C0      2512          ext.l     D0
0800143C  0C80 0000 2513          cmp.l     #105,D0
08001440  0069      
08001442  6600 0076 2514          bne       vsprintf_65
                    2515   vsprintf_59:
08001446  4A2E FFCE 2516          tst.b     -50(A6)
0800144A  6612      2517          bne.s     vsprintf_62
0800144C  2043      2518          move.l    D3,A0
0800144E  1010      2519          move.b    (A0),D0
08001450  4880      2520          ext.w     D0
08001452  48C0      2521          ext.l     D0
08001454  0C80 0000 2522          cmp.l     #45,D0
08001458  002D      
0800145A  6600 002E 2523          bne       vsprintf_60
                    2524   vsprintf_62:
0800145E  2043      2525          move.l    D3,A0
08001460  1010      2526          move.b    (A0),D0
08001462  4880      2527          ext.w     D0
08001464  48C0      2528          ext.l     D0
08001466  0C80 0000 2529          cmp.l     #45,D0
0800146A  002D      
0800146C  660E      2530          bne.s     vsprintf_63
0800146E  2043      2531          move.l    D3,A0
08001470  5283      2532          addq.l    #1,D3
08001472  2242      2533          move.l    D2,A1
08001474  5282      2534          addq.l    #1,D2
08001476  1290      2535          move.b    (A0),(A1)
08001478  5304      2536          subq.b    #1,D4
0800147A  6008      2537          bra.s     vsprintf_64
                    2538   vsprintf_63:
0800147C  2042      2539          move.l    D2,A0
0800147E  5282      2540          addq.l    #1,D2
08001480  10BC 002B 2541          move.b    #43,(A0)
                    2542   vsprintf_64:
08001484  5287      2543          addq.l    #1,D7
08001486  6000 0032 2544          bra       vsprintf_65
                    2545   vsprintf_60:
0800148A  4A2E FFCF 2546          tst.b     -49(A6)
0800148E  6700 002A 2547          beq       vsprintf_65
08001492  2043      2548          move.l    D3,A0
08001494  1010      2549          move.b    (A0),D0
08001496  4880      2550          ext.w     D0
08001498  48C0      2551          ext.l     D0
0800149A  0C80 0000 2552          cmp.l     #45,D0
0800149E  002D      
080014A0  660E      2553          bne.s     vsprintf_67
080014A2  2043      2554          move.l    D3,A0
080014A4  5283      2555          addq.l    #1,D3
080014A6  2242      2556          move.l    D2,A1
080014A8  5282      2557          addq.l    #1,D2
080014AA  1290      2558          move.b    (A0),(A1)
080014AC  5304      2559          subq.b    #1,D4
080014AE  6008      2560          bra.s     vsprintf_68
                    2561   vsprintf_67:
080014B0  2042      2562          move.l    D2,A0
080014B2  5282      2563          addq.l    #1,D2
080014B4  10BC 0020 2564          move.b    #32,(A0)
                    2565   vsprintf_68:
080014B8  5287      2566          addq.l    #1,D7
                    2567   vsprintf_65:
080014BA  4A2E FFD0 2568          tst.b     -48(A6)
080014BE  6700 0066 2569          beq       vsprintf_77
080014C2  206E 000C 2570          move.l    12(A6),A0
080014C6  1010      2571          move.b    (A0),D0
080014C8  4880      2572          ext.w     D0
080014CA  48C0      2573          ext.l     D0
080014CC  0C80 0000 2574          cmp.l     #111,D0
080014D0  006F      
080014D2  671A      2575          beq.s     vsprintf_73
080014D4  6E0C      2576          bgt.s     vsprintf_76
080014D6  0C80 0000 2577          cmp.l     #88,D0
080014DA  0058      
080014DC  6710      2578          beq.s     vsprintf_73
080014DE  6000 0046 2579          bra       vsprintf_77
                    2580   vsprintf_76:
080014E2  0C80 0000 2581          cmp.l     #120,D0
080014E6  0078      
080014E8  6704      2582          beq.s     vsprintf_73
080014EA  6000 003A 2583          bra       vsprintf_77
                    2584   vsprintf_73:
080014EE  2042      2585          move.l    D2,A0
080014F0  5282      2586          addq.l    #1,D2
080014F2  10BC 0030 2587          move.b    #48,(A0)
080014F6  5287      2588          addq.l    #1,D7
080014F8  206E 000C 2589          move.l    12(A6),A0
080014FC  1010      2590          move.b    (A0),D0
080014FE  4880      2591          ext.w     D0
08001500  48C0      2592          ext.l     D0
08001502  0C80 0000 2593          cmp.l     #120,D0
08001506  0078      
08001508  6712      2594          beq.s     vsprintf_79
0800150A  206E 000C 2595          move.l    12(A6),A0
0800150E  1010      2596          move.b    (A0),D0
08001510  4880      2597          ext.w     D0
08001512  48C0      2598          ext.l     D0
08001514  0C80 0000 2599          cmp.l     #88,D0
08001518  0058      
0800151A  660A      2600          bne.s     vsprintf_77
                    2601   vsprintf_79:
0800151C  2042      2602          move.l    D2,A0
0800151E  5282      2603          addq.l    #1,D2
08001520  10BC 0078 2604          move.b    #120,(A0)
08001524  5287      2605          addq.l    #1,D7
                    2606   vsprintf_77:
08001526  2042      2607          move.l    D2,A0
08001528  4210      2608          clr.b     (A0)
0800152A  206E 000C 2609          move.l    12(A6),A0
0800152E  1010      2610          move.b    (A0),D0
08001530  4880      2611          ext.w     D0
08001532  48C0      2612          ext.l     D0
08001534  0C80 0000 2613          cmp.l     #105,D0
08001538  0069      
0800153A  6700 0076 2614          beq       vsprintf_82
0800153E  6E42      2615          bgt.s     vsprintf_93
08001540  0C80 0000 2616          cmp.l     #99,D0
08001544  0063      
08001546  6700 0084 2617          beq       vsprintf_96
0800154A  6E1C      2618          bgt.s     vsprintf_94
0800154C  0C80 0000 2619          cmp.l     #88,D0
08001550  0058      
08001552  6700 005E 2620          beq       vsprintf_82
08001556  6E00 0184 2621          bgt       vsprintf_80
0800155A  0C80 0000 2622          cmp.l     #69,D0
0800155E  0045      
08001560  6700 0050 2623          beq       vsprintf_82
08001564  6000 0176 2624          bra       vsprintf_80
                    2625   vsprintf_94:
08001568  0C80 0000 2626          cmp.l     #101,D0
0800156C  0065      
0800156E  6700 0042 2627          beq       vsprintf_82
08001572  6E00 0168 2628          bgt       vsprintf_80
08001576  0C80 0000 2629          cmp.l     #100,D0
0800157A  0064      
0800157C  6734      2630          beq.s     vsprintf_82
0800157E  6000 015C 2631          bra       vsprintf_80
                    2632   vsprintf_93:
08001582  0C80 0000 2633          cmp.l     #117,D0
08001586  0075      
08001588  6728      2634          beq.s     vsprintf_82
0800158A  6E1A      2635          bgt.s     vsprintf_95
0800158C  0C80 0000 2636          cmp.l     #115,D0
08001590  0073      
08001592  6700 0038 2637          beq       vsprintf_96
08001596  6E00 0144 2638          bgt       vsprintf_80
0800159A  0C80 0000 2639          cmp.l     #111,D0
0800159E  006F      
080015A0  6710      2640          beq.s     vsprintf_82
080015A2  6000 0138 2641          bra       vsprintf_80
                    2642   vsprintf_95:
080015A6  0C80 0000 2643          cmp.l     #120,D0
080015AA  0078      
080015AC  6704      2644          beq.s     vsprintf_82
080015AE  6000 012C 2645          bra       vsprintf_80
                    2646   vsprintf_82:
080015B2  4A2E FFD2 2647          tst.b     -46(A6)
080015B6  6714      2648          beq.s     vsprintf_96
080015B8  4A2E FFCD 2649          tst.b     -51(A6)
080015BC  660E      2650          bne.s     vsprintf_96
080015BE  200D      2651          move.l    A5,D0
080015C0  9087      2652          sub.l     D7,D0
080015C2  4884      2653          ext.w     D4
080015C4  48C4      2654          ext.l     D4
080015C6  9084      2655          sub.l     D4,D0
080015C8  2D40 FFFC 2656          move.l    D0,-4(A6)
                    2657   vsprintf_96:
080015CC  202E FFFC 2658          move.l    -4(A6),D0
080015D0  0C80 0000 2659          cmp.l     #0,D0
080015D4  0000      
080015D6  6C04      2660          bge.s     vsprintf_98
080015D8  42AE FFFC 2661          clr.l     -4(A6)
                    2662   vsprintf_98:
080015DC  4A2E FFCD 2663          tst.b     -51(A6)
080015E0  6600 0030 2664          bne       vsprintf_104
080015E4  4884      2665          ext.w     D4
080015E6  48C4      2666          ext.l     D4
080015E8  2004      2667          move.l    D4,D0
080015EA  D0AE FFFC 2668          add.l     -4(A6),D0
080015EE  D087      2669          add.l     D7,D0
080015F0  1D40 FFD1 2670          move.b    D0,-47(A6)
                    2671   vsprintf_102:
080015F4  102E FFD1 2672          move.b    -47(A6),D0
080015F8  4880      2673          ext.w     D0
080015FA  48C0      2674          ext.l     D0
080015FC  220D      2675          move.l    A5,D1
080015FE  534D      2676          subq.w    #1,A5
08001600  B081      2677          cmp.l     D1,D0
08001602  6C0E      2678          bge.s     vsprintf_104
08001604  4878 0020 2679          pea       32
08001608  2F0A      2680          move.l    A2,-(A7)
0800160A  4E93      2681          jsr       (A3)
0800160C  504F      2682          addq.w    #8,A7
0800160E  5286      2683          addq.l    #1,D6
08001610  60E2      2684          bra       vsprintf_102
                    2685   vsprintf_104:
08001612  41EE FFD4 2686          lea       -44(A6),A0
08001616  2408      2687          move.l    A0,D2
                    2688   vsprintf_105:
08001618  2042      2689          move.l    D2,A0
0800161A  4A10      2690          tst.b     (A0)
0800161C  6716      2691          beq.s     vsprintf_107
0800161E  2042      2692          move.l    D2,A0
08001620  5282      2693          addq.l    #1,D2
08001622  1210      2694          move.b    (A0),D1
08001624  4881      2695          ext.w     D1
08001626  48C1      2696          ext.l     D1
08001628  2F01      2697          move.l    D1,-(A7)
0800162A  2F0A      2698          move.l    A2,-(A7)
0800162C  4E93      2699          jsr       (A3)
0800162E  504F      2700          addq.w    #8,A7
08001630  5286      2701          addq.l    #1,D6
08001632  60E4      2702          bra       vsprintf_105
                    2703   vsprintf_107:
08001634  202E FFFC 2704          move.l    -4(A6),D0
08001638  1D40 FFD1 2705          move.b    D0,-47(A6)
                    2706   vsprintf_108:
0800163C  102E FFD1 2707          move.b    -47(A6),D0
08001640  532E FFD1 2708          subq.b    #1,-47(A6)
08001644  4A00      2709          tst.b     D0
08001646  670E      2710          beq.s     vsprintf_110
08001648  4878 0030 2711          pea       48
0800164C  2F0A      2712          move.l    A2,-(A7)
0800164E  4E93      2713          jsr       (A3)
08001650  504F      2714          addq.w    #8,A7
08001652  5286      2715          addq.l    #1,D6
08001654  60E6      2716          bra       vsprintf_108
                    2717   vsprintf_110:
08001656  2043      2718          move.l    D3,A0
08001658  4A10      2719          tst.b     (A0)
0800165A  6700 0048 2720          beq       vsprintf_113
0800165E  206E 000C 2721          move.l    12(A6),A0
08001662  1010      2722          move.b    (A0),D0
08001664  4880      2723          ext.w     D0
08001666  48C0      2724          ext.l     D0
08001668  0C80 0000 2725          cmp.l     #115,D0
0800166C  0073      
0800166E  670C      2726          beq.s     vsprintf_116
08001670  6E18      2727          bgt.s     vsprintf_119
08001672  0C80 0000 2728          cmp.l     #99,D0
08001676  0063      
08001678  6702      2729          beq.s     vsprintf_116
0800167A  600E      2730          bra.s     vsprintf_119
                    2731   vsprintf_116:
0800167C  2005      2732          move.l    D5,D0
0800167E  5385      2733          subq.l    #1,D5
08001680  0C80 0000 2734          cmp.l     #0,D0
08001684  0000      
08001686  6E02      2735          bgt.s     vsprintf_119
08001688  6016      2736          bra.s     vsprintf_115
                    2737   vsprintf_119:
0800168A  2043      2738          move.l    D3,A0
0800168C  5283      2739          addq.l    #1,D3
0800168E  1210      2740          move.b    (A0),D1
08001690  4881      2741          ext.w     D1
08001692  48C1      2742          ext.l     D1
08001694  2F01      2743          move.l    D1,-(A7)
08001696  2F0A      2744          move.l    A2,-(A7)
08001698  4E93      2745          jsr       (A3)
0800169A  504F      2746          addq.w    #8,A7
0800169C  5286      2747          addq.l    #1,D6
0800169E  6002      2748          bra.s     vsprintf_112
                    2749   vsprintf_115:
080016A0  6002      2750          bra.s     vsprintf_113
                    2751   vsprintf_112:
080016A2  60B2      2752          bra       vsprintf_110
                    2753   vsprintf_113:
080016A4  4A2E FFCD 2754          tst.b     -51(A6)
080016A8  6700 0030 2755          beq       vsprintf_125
080016AC  4884      2756          ext.w     D4
080016AE  48C4      2757          ext.l     D4
080016B0  2004      2758          move.l    D4,D0
080016B2  D0AE FFFC 2759          add.l     -4(A6),D0
080016B6  D087      2760          add.l     D7,D0
080016B8  1D40 FFD1 2761          move.b    D0,-47(A6)
                    2762   vsprintf_123:
080016BC  102E FFD1 2763          move.b    -47(A6),D0
080016C0  4880      2764          ext.w     D0
080016C2  48C0      2765          ext.l     D0
080016C4  220D      2766          move.l    A5,D1
080016C6  534D      2767          subq.w    #1,A5
080016C8  B081      2768          cmp.l     D1,D0
080016CA  6C0E      2769          bge.s     vsprintf_125
080016CC  4878 0020 2770          pea       32
080016D0  2F0A      2771          move.l    A2,-(A7)
080016D2  4E93      2772          jsr       (A3)
080016D4  504F      2773          addq.w    #8,A7
080016D6  5386      2774          subq.l    #1,D6
080016D8  60E2      2775          bra       vsprintf_123
                    2776   vsprintf_125:
080016DA  6014      2777          bra.s     vsprintf_81
                    2778   vsprintf_80:
080016DC  206E 000C 2779          move.l    12(A6),A0
080016E0  1210      2780          move.b    (A0),D1
080016E2  4881      2781          ext.w     D1
080016E4  48C1      2782          ext.l     D1
080016E6  2F01      2783          move.l    D1,-(A7)
080016E8  2F0A      2784          move.l    A2,-(A7)
080016EA  4E93      2785          jsr       (A3)
080016EC  504F      2786          addq.w    #8,A7
080016EE  5286      2787          addq.l    #1,D6
                    2788   vsprintf_81:
080016F0  52AE 000C 2789          addq.l    #1,12(A6)
                    2790   vsprintf_2:
080016F4  6000 F9D6 2791          bra       vsprintf_1
                    2792   vsprintf_3:
080016F8  4A92      2793          tst.l     (A2)
080016FA  6710      2794          beq.s     vsprintf_126
080016FC  4201      2795          clr.b     D1
080016FE  C2BC 0000 2796          and.l     #255,D1
08001702  00FF      
08001704  2F01      2797          move.l    D1,-(A7)
08001706  2F0A      2798          move.l    A2,-(A7)
08001708  4E93      2799          jsr       (A3)
0800170A  504F      2800          addq.w    #8,A7
                    2801   vsprintf_126:
0800170C  2006      2802          move.l    D6,D0
0800170E  4CDF 3CFC 2803          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08001712  4E5E      2804          unlk      A6
08001714  4E75      2805          rts
                    2806   @itoa_convert:
08001716  4E56 0000 2807          link      A6,#0
0800171A  48E7 3C00 2808          movem.l   D2/D3/D4/D5,-(A7)
0800171E  242E 0008 2809          move.l    8(A6),D2
08001722  262E 0010 2810          move.l    16(A6),D3
08001726  2A2E 000C 2811          move.l    12(A6),D5
0800172A  2F05      2812          move.l    D5,-(A7)
0800172C  2F03      2813          move.l    D3,-(A7)
0800172E  6100 022C 2814          bsr       ULDIV
08001732  202F 0004 2815          move.l    4(A7),D0
08001736  504F      2816          addq.w    #8,A7
08001738  2800      2817          move.l    D0,D4
0800173A  BA83      2818          cmp.l     D3,D5
0800173C  651A      2819          blo.s     @itoa_convert_1
0800173E  2F03      2820          move.l    D3,-(A7)
08001740  2F05      2821          move.l    D5,-(A7)
08001742  2F03      2822          move.l    D3,-(A7)
08001744  6100 0216 2823          bsr       ULDIV
08001748  2217      2824          move.l    (A7),D1
0800174A  504F      2825          addq.w    #8,A7
0800174C  2F01      2826          move.l    D1,-(A7)
0800174E  2F02      2827          move.l    D2,-(A7)
08001750  61C4      2828          bsr       @itoa_convert
08001752  DEFC 000C 2829          add.w     #12,A7
08001756  2400      2830          move.l    D0,D2
                    2831   @itoa_convert_1:
08001758  0C84 0000 2832          cmp.l     #9,D4
0800175C  0009      
0800175E  6E0A      2833          bgt.s     @itoa_convert_3
08001760  2004      2834          move.l    D4,D0
08001762  0680 0000 2835          add.l     #48,D0
08001766  0030      
08001768  600E      2836          bra.s     @itoa_convert_4
                    2837   @itoa_convert_3:
0800176A  2004      2838          move.l    D4,D0
0800176C  0680 0000 2839          add.l     #97,D0
08001770  0061      
08001772  0480 0000 2840          sub.l     #10,D0
08001776  000A      
                    2841   @itoa_convert_4:
08001778  2042      2842          move.l    D2,A0
0800177A  1080      2843          move.b    D0,(A0)
0800177C  2002      2844          move.l    D2,D0
0800177E  5280      2845          addq.l    #1,D0
08001780  4CDF 003C 2846          movem.l   (A7)+,D2/D3/D4/D5
08001784  4E5E      2847          unlk      A6
08001786  4E75      2848          rts
                    2849   _ltoa:
08001788  4E56 0000 2850          link      A6,#0
0800178C  48E7 3C00 2851          movem.l   D2/D3/D4/D5,-(A7)
08001790  242E 0008 2852          move.l    8(A6),D2
08001794  262E 000C 2853          move.l    12(A6),D3
08001798  2A2E 0010 2854          move.l    16(A6),D5
0800179C  2803      2855          move.l    D3,D4
0800179E  0C85 0000 2856          cmp.l     #2,D5
080017A2  0002      
080017A4  6D08      2857          blt.s     ltoa_3
080017A6  0C85 0000 2858          cmp.l     #36,D5
080017AA  0024      
080017AC  6F06      2859          ble.s     ltoa_1
                    2860   ltoa_3:
080017AE  2003      2861          move.l    D3,D0
080017B0  6000 0052 2862          bra       ltoa_4
                    2863   ltoa_1:
080017B4  0C85 0000 2864          cmp.l     #10,D5
080017B8  000A      
080017BA  6600 0032 2865          bne       ltoa_5
080017BE  0C82 0000 2866          cmp.l     #0,D2
080017C2  0000      
080017C4  6C28      2867          bge.s     ltoa_5
080017C6  2002      2868          move.l    D2,D0
080017C8  4480      2869          neg.l     D0
080017CA  2400      2870          move.l    D0,D2
080017CC  0C82 0000 2871          cmp.l     #0,D2
080017D0  0000      
080017D2  6C12      2872          bge.s     ltoa_7
080017D4  4879 0800 2873          pea       @itoa_1
080017D8  1E1E      
080017DA  2F03      2874          move.l    D3,-(A7)
080017DC  6100 016E 2875          bsr       _strcpy
080017E0  504F      2876          addq.w    #8,A7
080017E2  2003      2877          move.l    D3,D0
080017E4  601E      2878          bra.s     ltoa_4
                    2879   ltoa_7:
080017E6  2044      2880          move.l    D4,A0
080017E8  5284      2881          addq.l    #1,D4
080017EA  10BC 002D 2882          move.b    #45,(A0)
                    2883   ltoa_5:
080017EE  2F05      2884          move.l    D5,-(A7)
080017F0  2F02      2885          move.l    D2,-(A7)
080017F2  2F04      2886          move.l    D4,-(A7)
080017F4  6100 FF20 2887          bsr       @itoa_convert
080017F8  DEFC 000C 2888          add.w     #12,A7
080017FC  2800      2889          move.l    D0,D4
080017FE  2044      2890          move.l    D4,A0
08001800  4210      2891          clr.b     (A0)
08001802  2003      2892          move.l    D3,D0
                    2893   ltoa_4:
08001804  4CDF 003C 2894          movem.l   (A7)+,D2/D3/D4/D5
08001808  4E5E      2895          unlk      A6
0800180A  4E75      2896          rts
                    2897   _ultoa:
0800180C  4E56 0000 2898          link      A6,#0
08001810  48E7 3800 2899          movem.l   D2/D3/D4,-(A7)
08001814  262E 0010 2900          move.l    16(A6),D3
08001818  282E 000C 2901          move.l    12(A6),D4
0800181C  2404      2902          move.l    D4,D2
0800181E  0C83 0000 2903          cmp.l     #2,D3
08001822  0002      
08001824  6D08      2904          blt.s     ultoa_3
08001826  0C83 0000 2905          cmp.l     #36,D3
0800182A  0024      
0800182C  6F04      2906          ble.s     ultoa_1
                    2907   ultoa_3:
0800182E  2004      2908          move.l    D4,D0
08001830  6018      2909          bra.s     ultoa_4
                    2910   ultoa_1:
08001832  2F03      2911          move.l    D3,-(A7)
08001834  2F2E 0008 2912          move.l    8(A6),-(A7)
08001838  2F02      2913          move.l    D2,-(A7)
0800183A  6100 FEDA 2914          bsr       @itoa_convert
0800183E  DEFC 000C 2915          add.w     #12,A7
08001842  2400      2916          move.l    D0,D2
08001844  2042      2917          move.l    D2,A0
08001846  4210      2918          clr.b     (A0)
08001848  2004      2919          move.l    D4,D0
                    2920   ultoa_4:
0800184A  4CDF 001C 2921          movem.l   (A7)+,D2/D3/D4
0800184E  4E5E      2922          unlk      A6
08001850  4E75      2923          rts
                    2924   _itoa:
08001852  4E56 0000 2925          link      A6,#0
08001856  2F2E 0010 2926          move.l    16(A6),-(A7)
0800185A  2F2E 000C 2927          move.l    12(A6),-(A7)
0800185E  2F2E 0008 2928          move.l    8(A6),-(A7)
08001862  6100 FF24 2929          bsr       _ltoa
08001866  DEFC 000C 2930          add.w     #12,A7
0800186A  4E5E      2931          unlk      A6
0800186C  4E75      2932          rts
                    2933   ULMUL:
0800186E  4E56 0000 2934          link    A6,#0
08001872  48E7 C000 2935          movem.l D0/D1,-(A7)
08001876  222E 0008 2936          move.l  8(A6),D1
0800187A  202E 000C 2937          move.l  12(A6),D0
0800187E  602C      2938          bra.s   lmul_3
                    2939   LMUL:
08001880  4E56 0000 2940          link    A6,#0
08001884  48E7 C000 2941          movem.l D0/D1,-(A7)
08001888  222E 0008 2942          move.l  8(A6),D1
0800188C  202E 000C 2943          move.l  12(A6),D0
08001890  4A80      2944          tst.l   D0
08001892  6A0A      2945          bpl.s   lmul_1
08001894  4480      2946          neg.l   D0
08001896  4A81      2947          tst.l   D1
08001898  6A0A      2948          bpl.s   lmul_2
0800189A  4481      2949          neg.l   D1
0800189C  600E      2950          bra.s   lmul_3
                    2951   lmul_1:
0800189E  4A81      2952          tst.l   D1
080018A0  6A0A      2953          bpl.s   lmul_3
080018A2  4481      2954          neg.l   D1
                    2955   lmul_2:
080018A4  6114      2956          bsr.s   domul
080018A6  4481      2957          neg.l   D1
080018A8  4080      2958          negx.l  D0
080018AA  6002      2959          bra.s   lmul_4
                    2960   lmul_3:
080018AC  610C      2961          bsr.s   domul
                    2962   lmul_4:
080018AE  2D41 0008 2963          move.l  D1,8(A6)
080018B2  4CDF 0003 2964          movem.l (A7)+,D0/D1
080018B6  4E5E      2965          unlk    A6
080018B8  4E75      2966          rts
                    2967   domul:
080018BA  0C81 0000 2968          cmpi.l  #$FFFF,D1
080018BE  FFFF      
080018C0  620C      2969          bhi.s   domul_1
080018C2  0C80 0000 2970          cmpi.l  #$FFFF,D0
080018C6  FFFF      
080018C8  620E      2971          bhi.s   domul_2
080018CA  C2C0      2972          mulu    D0,D1
080018CC  4E75      2973          rts
                    2974   domul_1:
080018CE  0C80 0000 2975          cmpi.l  #$FFFF,D0
080018D2  FFFF      
080018D4  6218      2976          bhi.s   domul_4
080018D6  6002      2977          bra.s   domul_3
                    2978   domul_2
080018D8  C141      2979          exg     D0,D1
                    2980   domul_3:
080018DA  2F02      2981          move.l  D2,-(A7)
080018DC  2401      2982          move.l  D1,D2
080018DE  4842      2983          swap    D2
080018E0  C2C0      2984          mulu    D0,D1
080018E2  C4C0      2985          mulu    D0,D2
080018E4  4842      2986          swap    D2
080018E6  4242      2987          clr.w   D2
080018E8  D282      2988          add.l   D2,D1
080018EA  241F      2989          move.l  (A7)+,D2
080018EC  4E75      2990          rts
                    2991   domul_4:
080018EE  48E7 3000 2992          movem.l D2/D3,-(A7)
080018F2  2401      2993          move.l  D1,D2
080018F4  2601      2994          move.l  D1,D3
080018F6  C2C0      2995          mulu    D0,D1
080018F8  4842      2996          swap    D2
080018FA  C4C0      2997          mulu    D0,D2
080018FC  4840      2998          swap    D0
080018FE  C6C0      2999          mulu    D0,D3
08001900  D483      3000          add.l   D3,D2
08001902  4842      3001          swap    D2
08001904  4242      3002          clr.w   D2
08001906  D282      3003          add.l   D2,D1
08001908  4CDF 000C 3004          movem.l (A7)+,D2/D3
0800190C  4E75      3005          rts
                    3006   _strlen:
0800190E  206F 0004 3007          move.l    (4,A7),A0
08001912  2248      3008          move.l    A0,A1
                    3009   strlen_1:
08001914  4A19      3010          tst.b     (A1)+
08001916  66FC      3011          bne       strlen_1
08001918  2009      3012          move.l    A1,D0
0800191A  9088      3013          sub.l     A0,D0
0800191C  5380      3014          subq.l    #1,D0
0800191E  4E75      3015          rts
                    3016   _toupper:
08001920  4E56 0000 3017          link      A6,#0
08001924  48E7 2000 3018          movem.l   D2,-(A7)
08001928  242E 0008 3019          move.l    8(A6),D2
0800192C  0C82 0000 3020          cmp.l     #97,D2
08001930  0061      
08001932  6D0E      3021          blt.s     toupper_1
08001934  0C82 0000 3022          cmp.l     #122,D2
08001938  007A      
0800193A  6E06      3023          bgt.s     toupper_1
0800193C  C4BC 0000 3024          and.l     #95,D2
08001940  005F      
                    3025   toupper_1:
08001942  2002      3026          move.l    D2,D0
08001944  4CDF 0004 3027          movem.l   (A7)+,D2
08001948  4E5E      3028          unlk      A6
0800194A  4E75      3029          rts
                    3030   _strcpy:
0800194C  206F 0004 3031          move.l    (4,A7),A0
08001950  226F 0008 3032          move.l    (8,A7),A1
08001954  2008      3033          move.l    A0,D0
                    3034   strcpy_1:
08001956  10D9      3035          move.b    (A1)+,(A0)+
08001958  66FC      3036          bne       strcpy_1
0800195A  4E75      3037          rts
                    3038   ULDIV:
0800195C  4E56 0000 3039          link    A6,#0
08001960  48E7 C000 3040          movem.l D0/D1,-(A7)
08001964  222E 0008 3041          move.l  8(A6),D1
08001968  202E 000C 3042          move.l  12(A6),D0
0800196C  6036      3043          bra.s   ldiv_3
                    3044   LDIV:
0800196E  4E56 0000 3045          link    A6,#0
08001972  48E7 C000 3046          movem.l D0/D1,-(A7)
08001976  222E 0008 3047          move.l  8(A6),D1
0800197A  202E 000C 3048          move.l  12(A6),D0
0800197E  4A80      3049          tst.l   D0
08001980  6A0E      3050          bpl.s   ldiv_1
08001982  4480      3051          neg.l   D0
08001984  4A81      3052          tst.l   D1
08001986  6A14      3053          bpl.s   ldiv_2
08001988  4481      3054          neg.l   D1
0800198A  612A      3055          bsr.s   dodiv
0800198C  4481      3056          neg.l   D1
0800198E  6016      3057          bra.s   ldiv_4
                    3058   ldiv_1:
08001990  4A81      3059          tst.l   D1
08001992  6A10      3060          bpl.s   ldiv_3
08001994  4481      3061          neg.l   D1
08001996  611E      3062          bsr.s   dodiv
08001998  4480      3063          neg.l   D0
0800199A  600A      3064          bra.s   ldiv_4
                    3065   ldiv_2:
0800199C  6118      3066          bsr.s   dodiv
0800199E  4480      3067          neg.l   D0
080019A0  4481      3068          neg.l   D1
080019A2  6002      3069          bra.s   ldiv_4
                    3070   ldiv_3:
080019A4  6110      3071          bsr.s   dodiv
                    3072   ldiv_4:
080019A6  2D40 0008 3073          move.l  D0,8(A6)
080019AA  2D41 000C 3074          move.l  D1,12(A6)
080019AE  4CDF 0003 3075          movem.l (A7)+,D0/D1
080019B2  4E5E      3076          unlk    A6
080019B4  4E75      3077          rts
                    3078   dodiv:
080019B6  0C81 0000 3079          cmpi.l  #$FFFF,D1
080019BA  FFFF      
080019BC  6236      3080          bhi.s   dodiv_2
080019BE  0C80 0000 3081          cmpi.l  #$FFFF,D0
080019C2  FFFF      
080019C4  6210      3082          bhi.s   dodiv_1
080019C6  80C1      3083          divu    D1,D0
080019C8  2200      3084          move.l  D0,D1
080019CA  4241      3085          clr.w   D1
080019CC  4841      3086          swap    D1
080019CE  0280 0000 3087          andi.l  #$FFFF,D0
080019D2  FFFF      
080019D4  4E75      3088          rts
                    3089   dodiv_1:
080019D6  48A7 A000 3090          movem.w D0/D2,-(A7)
080019DA  4240      3091          clr.w   D0
080019DC  4840      3092          swap    D0
080019DE  80C1      3093          divu    D1,D0
080019E0  3400      3094          move.w  D0,D2
080019E2  301F      3095          move.w  (A7)+,D0
080019E4  80C1      3096          divu    D1,D0
080019E6  4840      3097          swap    D0
080019E8  4281      3098          clr.l   D1
080019EA  3200      3099          move.w  D0,D1
080019EC  3002      3100          move.w  D2,D0
080019EE  4840      3101          swap    D0
080019F0  341F      3102          move.w  (A7)+,D2
080019F2  4E75      3103          rts
                    3104   dodiv_2:
080019F4  48E7 3800 3105          movem.l D2/D3/D4,-(A7)
080019F8  2401      3106          move.l  D1,D2
080019FA  4242      3107          clr.w   D2
080019FC  4842      3108          swap    D2
080019FE  5282      3109          addq.l  #1,D2
08001A00  2600      3110          move.l  D0,D3
08001A02  2801      3111          move.l  D1,D4
08001A04  2202      3112          move.l  D2,D1
08001A06  61CE      3113          bsr.s   dodiv_1
08001A08  2204      3114          move.l  D4,D1
08001A0A  82C2      3115          divu    D2,D1
08001A0C  80C1      3116          divu    D1,D0
08001A0E  0280 0000 3117          andi.l  #$FFFF,D0
08001A12  FFFF      
                    3118   dodiv_3:
08001A14  2204      3119          move.l  D4,D1
08001A16  2404      3120          move.l  D4,D2
08001A18  4842      3121          swap    D2
08001A1A  C2C0      3122          mulu    D0,D1
08001A1C  C4C0      3123          mulu    D0,D2
08001A1E  4842      3124          swap    D2
08001A20  D282      3125          add.l   D2,D1
08001A22  9283      3126          sub.l   D3,D1
08001A24  620A      3127          bhi.s   dodiv_4
08001A26  4481      3128          neg.l   D1
08001A28  B881      3129          cmp.l   D1,D4
08001A2A  6208      3130          bhi.s   dodiv_5
08001A2C  5280      3131          addq.l  #1,D0
08001A2E  60E4      3132          bra.s   dodiv_3
                    3133   dodiv_4:
08001A30  5380      3134          subq.l  #1,D0
08001A32  60E0      3135          bra.s   dodiv_3
                    3136   dodiv_5:
08001A34  4CDF 001C 3137          movem.l (A7)+,D2/D3/D4
08001A38  4E75      3138          rts
                    3139          section   const
08001A3A            3140                   align
                    3141   
                    3142   
                    3143   @m68kus~1_1:
08001A3A  0D0A 2043 3144          dc.b      13,10,32,67,104,97,110,103,105,110,103,32,115
08001A3E  6861 6E67 
08001A42  696E 6720 
08001A46  73        
08001A47  6C61 7665 3145          dc.b      108,97,118,101,32,97,110,100,32,114,101,115
08001A4B  2061 6E64 
08001A4F  2072 6573 
08001A53  7461 7274 3146          dc.b      116,97,114,116,32,37,120,0
08001A57  2025 7800 
                    3147   @m68kus~1_2:
08001A5C  0D0A 2048 3148          dc.b      13,10,32,72,73,84,32,69,68,71,69,32,67,65,83
08001A60  4954 2045 
08001A64  4447 4520 
08001A68  4341 53   
08001A6B  4520 2578 3149          dc.b      69,32,37,120,32,37,120,37,120,0
08001A6F  2025 7825 
08001A73  7800      
                    3150   @m68kus~1_3:
08001A76  0D0A 5365 3151          dc.b      13,10,83,101,108,101,99,116,32,98,97,110,107
08001A7A  6C65 6374 
08001A7E  2062 616E 
08001A82  6B        
08001A83  3A0D 0A30 3152          dc.b      58,13,10,48,32,45,32,66,97,110,107,32,48,13
08001A87  202D 2042 
08001A8B  616E 6B20 
08001A8F  300D      
08001A91  0A31 202D 3153          dc.b      10,49,32,45,32,66,97,110,107,32,49,0
08001A95  2042 616E 
08001A99  6B20 3100 
                    3154   @m68kus~1_4:
08001A9E  0D0A 496E 3155          dc.b      13,10,73,110,118,97,108,105,100,32,115,101,108
08001AA2  7661 6C69 
08001AA6  6420 7365 
08001AAA  6C        
08001AAB  6563 7469 3156          dc.b      101,99,116,105,111,110,46,0
08001AAF  6F6E 2E00 
                    3157   @m68kus~1_5:
08001AB4  0D0A 456E 3158          dc.b      13,10,69,110,116,101,114,32,109,101,109,32,97
08001AB8  7465 7220 
08001ABC  6D65 6D20 
08001AC0  61        
08001AC1  6464 7265 3159          dc.b      100,100,114,101,115,115,32,104,105,58,0
08001AC5  7373 2068 
08001AC9  693A 00   
                    3160   @m68kus~1_6:
08001ACC  0D0A 456E 3161          dc.b      13,10,69,110,116,101,114,32,109,101,109,32,97
08001AD0  7465 7220 
08001AD4  6D65 6D20 
08001AD8  61        
08001AD9  6464 7265 3162          dc.b      100,100,114,101,115,115,32,108,111,58,0
08001ADD  7373 206C 
08001AE1  6F3A 00   
                    3163   @m68kus~1_7:
08001AE4  0D0A 5468 3164          dc.b      13,10,84,104,101,114,109,105,115,116,111,114
08001AE8  6572 6D69 
08001AEC  7374 6F72 
08001AF0  3A20 2564 3165          dc.b      58,32,37,100,0
08001AF4  00        
                    3166   @m68kus~1_8:
08001AF6  0D0A 506F 3167          dc.b      13,10,80,111,116,101,110,116,105,111,109,101
08001AFA  7465 6E74 
08001AFE  696F 6D65 
08001B02  7465 723A 3168          dc.b      116,101,114,58,32,37,100,0
08001B06  2025 6400 
                    3169   @m68kus~1_9:
08001B0A  0D0A 5068 3170          dc.b      13,10,80,104,111,116,111,114,101,115,105,115
08001B0E  6F74 6F72 
08001B12  6573 6973 
08001B16  746F 723A 3171          dc.b      116,111,114,58,32,37,100,0
08001B1A  2025 6400 
                    3172   @m68kus~1_10:
08001B1E  0D0A 2D2D 3173          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
08001B22  2D2D 2D2D 
08001B26  2D2D 2D2D 
08001B2A  2D2D 2D   
08001B2D  2D00      3174          dc.b      45,0
                    3175   @m68kus~1_11:
08001B30  0D0A 4C61 3176          dc.b      13,10,76,97,98,32,53,58,32,73,50,67,0
08001B34  6220 353A 
08001B38  2049 3243 
08001B3C  00        
                    3177   @m68kus~1_12:
08001B3E  0D0A 4368 3178          dc.b      13,10,67,104,111,111,115,101,32,116,104,101
08001B42  6F6F 7365 
08001B46  2074 6865 
08001B4A  2066 6F6C 3179          dc.b      32,102,111,108,108,111,119,105,110,103,58,13
08001B4E  6C6F 7769 
08001B52  6E67 3A0D 
08001B56  0A30 202D 3180          dc.b      10,48,32,45,32,87,114,105,116,101,32,66,121
08001B5A  2057 7269 
08001B5E  7465 2042 
08001B62  79        
08001B63  7465 0D0A 3181          dc.b      116,101,13,10,49,32,45,32,82,101,97,100,32,66
08001B67  3120 2D20 
08001B6B  5265 6164 
08001B6F  2042      
08001B71  7974 650D 3182          dc.b      121,116,101,13,10,50,32,45,32,80,97,103,101
08001B75  0A32 202D 
08001B79  2050 6167 
08001B7D  65        
08001B7E  2057 7269 3183          dc.b      32,87,114,105,116,101,13,10,51,32,45,32,80,97
08001B82  7465 0D0A 
08001B86  3320 2D20 
08001B8A  5061      
08001B8C  6765 2052 3184          dc.b      103,101,32,82,101,97,100,13,10,52,32,45,32,68
08001B90  6561 640D 
08001B94  0A34 202D 
08001B98  2044      
08001B9A  4143 2042 3185          dc.b      65,67,32,66,108,105,110,107,121,32,76,69,68
08001B9E  6C69 6E6B 
08001BA2  7920 4C45 
08001BA6  44        
08001BA7  0D0A 3520 3186          dc.b      13,10,53,32,45,32,65,68,67,32,82,101,97,100
08001BAB  2D20 4144 
08001BAF  4320 5265 
08001BB3  6164      
08001BB5  00        3187          dc.b      0
                    3188   @m68kus~1_13:
08001BB6  0D0A 456E 3189          dc.b      13,10,69,110,116,101,114,32,98,121,116,101,32
08001BBA  7465 7220 
08001BBE  6279 7465 
08001BC2  20        
08001BC3  746F 2077 3190          dc.b      116,111,32,119,114,105,116,101,58,32,0
08001BC7  7269 7465 
08001BCB  3A20 00   
                    3191   @m68kus~1_14:
08001BCE  0D0A 5772 3192          dc.b      13,10,87,114,105,116,116,101,110,32,37,120,32
08001BD2  6974 7465 
08001BD6  6E20 2578 
08001BDA  20        
08001BDB  746F 2062 3193          dc.b      116,111,32,98,97,110,107,32,37,100,32,97,116
08001BDF  616E 6B20 
08001BE3  2564 2061 
08001BE7  74        
08001BE8  206D 656D 3194          dc.b      32,109,101,109,97,100,100,114,32,104,105,58
08001BEC  6164 6472 
08001BF0  2068 693A 
08001BF4  2025 7820 3195          dc.b      32,37,120,32,109,101,109,32,97,100,100,114,32
08001BF8  6D65 6D20 
08001BFC  6164 6472 
08001C00  20        
08001C01  6C6F 3A20 3196          dc.b      108,111,58,32,37,120,0
08001C05  2578 00   
                    3197   @m68kus~1_15:
08001C08  0D0A 5265 3198          dc.b      13,10,82,101,97,100,32,37,120,32,102,114,111
08001C0C  6164 2025 
08001C10  7820 6672 
08001C14  6F        
08001C15  6D20 6261 3199          dc.b      109,32,98,97,110,107,32,37,100,32,97,116,32
08001C19  6E6B 2025 
08001C1D  6420 6174 
08001C21  20        
08001C22  6D65 6D61 3200          dc.b      109,101,109,97,100,100,114,32,104,105,58,32
08001C26  6464 7220 
08001C2A  6869 3A20 
08001C2E  2578 206D 3201          dc.b      37,120,32,109,101,109,32,97,100,100,114,32,108
08001C32  656D 2061 
08001C36  6464 7220 
08001C3A  6C        
08001C3B  6F3A 2025 3202          dc.b      111,58,32,37,120,0
08001C3F  7800      
                    3203   @m68kus~1_16:
08001C42  0D0A 6272 3204          dc.b      13,10,98,114,117,104,0
08001C46  7568 00   
                    3205   @m68kus~1_17:
08001C4A  0D0A 456E 3206          dc.b      13,10,69,110,116,101,114,32,115,105,122,101
08001C4E  7465 7220 
08001C52  7369 7A65 
08001C56  206F 6620 3207          dc.b      32,111,102,32,112,97,103,101,32,116,111,32,119
08001C5A  7061 6765 
08001C5E  2074 6F20 
08001C62  77        
08001C63  7269 7465 3208          dc.b      114,105,116,101,40,109,97,120,32,49,50,56,32
08001C67  286D 6178 
08001C6B  2031 3238 
08001C6F  20        
08001C70  696E 2068 3209          dc.b      105,110,32,104,101,120,32,61,61,32,48,120,55
08001C74  6578 203D 
08001C78  3D20 3078 
08001C7C  37        
08001C7D  4629 3A20 3210          dc.b      70,41,58,32,0
08001C81  00        
                    3211   @m68kus~1_18:
08001C82  0D0A 5772 3212          dc.b      13,10,87,114,111,116,101,32,118,97,108,117,101
08001C86  6F74 6520 
08001C8A  7661 6C75 
08001C8E  65        
08001C8F  7320 7374 3213          dc.b      115,32,115,116,97,114,116,105,110,103,32,97
08001C93  6172 7469 
08001C97  6E67 2061 
08001C9B  7420 6D65 3214          dc.b      116,32,109,101,109,97,100,100,114,32,48,120
08001C9F  6D61 6464 
08001CA3  7220 3078 
08001CA7  2578 2578 3215          dc.b      37,120,37,120,32,97,110,100,32,98,97,110,107
08001CAB  2061 6E64 
08001CAF  2062 616E 
08001CB3  6B        
08001CB4  2025 642C 3216          dc.b      32,37,100,44,32,116,111,116,97,108,32,115,105
08001CB8  2074 6F74 
08001CBC  616C 2073 
08001CC0  69        
08001CC1  7A65 3A20 3217          dc.b      122,101,58,32,37,120,13,10,68,97,116,97,58,32
08001CC5  2578 0D0A 
08001CC9  4461 7461 
08001CCD  3A20      
08001CCF  00        3218          dc.b      0
                    3219   @m68kus~1_19:
08001CD0  2578 00   3220          dc.b      37,120,0
                    3221   @m68kus~1_20:
08001CD4  0D0A 456E 3222          dc.b      13,10,69,110,116,101,114,32,115,105,122,101
08001CD8  7465 7220 
08001CDC  7369 7A65 
08001CE0  206F 6620 3223          dc.b      32,111,102,32,112,97,103,101,32,116,111,32,114
08001CE4  7061 6765 
08001CE8  2074 6F20 
08001CEC  72        
08001CED  6561 6428 3224          dc.b      101,97,100,40,109,97,120,32,49,50,56,32,105
08001CF1  6D61 7820 
08001CF5  3132 3820 
08001CF9  69        
08001CFA  6E20 6865 3225          dc.b      110,32,104,101,120,32,61,61,32,48,120,55,70
08001CFE  7820 3D3D 
08001D02  2030 7837 
08001D06  46        
08001D07  293A 2000 3226          dc.b      41,58,32,0
                    3227   @m68kus~1_21:
08001D0C  0D0A 5265 3228          dc.b      13,10,82,101,97,100,32,118,97,108,117,101,115
08001D10  6164 2076 
08001D14  616C 7565 
08001D18  73        
08001D19  2073 7461 3229          dc.b      32,115,116,97,114,116,105,110,103,32,97,116
08001D1D  7274 696E 
08001D21  6720 6174 
08001D25  206D 656D 3230          dc.b      32,109,101,109,97,100,100,114,32,48,120,37,120
08001D29  6164 6472 
08001D2D  2030 7825 
08001D31  78        
08001D32  2578 2061 3231          dc.b      37,120,32,97,110,100,32,98,97,110,107,32,37
08001D36  6E64 2062 
08001D3A  616E 6B20 
08001D3E  25        
08001D3F  642C 2074 3232          dc.b      100,44,32,116,111,116,97,108,32,115,105,122
08001D43  6F74 616C 
08001D47  2073 697A 
08001D4B  653A 2025 3233          dc.b      101,58,32,37,120,13,10,68,97,116,97,58,32,0
08001D4F  780D 0A44 
08001D53  6174 613A 
08001D57  2000      
                    3234   @m68kus~1_22:
08001D5A  0D0A 4441 3235          dc.b      13,10,68,65,67,32,66,108,105,110,107,121,46
08001D5E  4320 426C 
08001D62  696E 6B79 
08001D66  2E        
08001D67  2E2E 2066 3236          dc.b      46,46,32,102,114,101,113,117,101,110,99,121
08001D6B  7265 7175 
08001D6F  656E 6379 
08001D73  206F 6620 3237          dc.b      32,111,102,32,98,108,105,110,107,121,32,105
08001D77  626C 696E 
08001D7B  6B79 2069 
08001D7F  733A 200D 3238          dc.b      115,58,32,13,10,79,78,32,45,32,50,53,48,109
08001D83  0A4F 4E20 
08001D87  2D20 3235 
08001D8B  306D      
08001D8D  7320 2D20 3239          dc.b      115,32,45,32,79,70,70,32,45,32,50,53,48,109
08001D91  4F46 4620 
08001D95  2D20 3235 
08001D99  306D      
08001D9B  730D 0A30 3240          dc.b      115,13,10,48,78,32,45,32,50,53,48,109,115,32
08001D9F  4E20 2D20 
08001DA3  3235 306D 
08001DA7  7320      
08001DA9  2D20 4F46 3241          dc.b      45,32,79,70,70,32,45,32,50,53,48,109,115,13
08001DAD  4620 2D20 
08001DB1  3235 306D 
08001DB5  730D      
08001DB7  0A4F 4E20 3242          dc.b      10,79,78,32,45,32,55,53,48,109,115,32,45,32
08001DBB  2D20 3735 
08001DBF  306D 7320 
08001DC3  2D20      
08001DC5  4F46 4620 3243          dc.b      79,70,70,32,45,32,55,53,48,109,115,13,10,82
08001DC9  2D20 3735 
08001DCD  306D 730D 
08001DD1  0A52      
08001DD3  6570 6561 3244          dc.b      101,112,101,97,116,32,102,111,114,101,118,101
08001DD7  7420 666F 
08001DDB  7265 7665 
08001DDF  720D 0A00 3245          dc.b      114,13,10,0
                    3246   @m68kus~1_23:
08001DE4  0D0A 4144 3247          dc.b      13,10,65,68,67,32,67,104,97,110,110,101,108
08001DE8  4320 4368 
08001DEC  616E 6E65 
08001DF0  6C        
08001DF1  204F 7574 3248          dc.b      32,79,117,116,112,117,116,58,0
08001DF5  7075 743A 
08001DF9  00        
                    3249   @m68kus~1_24:
08001DFA  0D0A 496E 3250          dc.b      13,10,73,110,118,97,108,105,100,32,83,101,108
08001DFE  7661 6C69 
08001E02  6420 5365 
08001E06  6C        
08001E07  6563 7469 3251          dc.b      101,99,116,105,111,110,46,13,10,0
08001E0B  6F6E 2E0D 
08001E0F  0A00      
                    3252          section   data
08001E12            3253                   align
                    3254   
                    3255   *********************************************************************************************************************************************************
                    3256   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    3257   ********************************************************************************************************************************************************
                    3258   
          0800 1E12 3259   DataStart       equ       *
08001E12            3260   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
08001E16            3261   __allocp:       ds.l      1                    start of free memory block list
08001E1A            3262   __heap:         ds.l      1                    begin of free memory
                    3263   
                    3264   
                    3265   @itoa_1:
08001E1E  2D32 3134 3266          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
08001E22  3734 3833 
08001E26  3634 3800 
                    3267          section   bss
08001E2A            3268                   align
                    3269   
          0800 1E2A 3270   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 0018 3271   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    3272   
                    3273   *********************************************************************************************************
                    3274   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    3275   *********************************************************************************************************
          0800 1E2A 3276   BssStart       equ       *
                    3277   
                    3278   _i:
08001E2A            3279          ds.b      4
                    3280   _x:
08001E2E            3281          ds.b      4
                    3282   _y:
08001E32            3283          ds.b      4
                    3284   _z:
08001E36            3285          ds.b      4
                    3286   _PortA_Count:
08001E3A            3287          ds.b      4
                    3288   _Timer1Count:
08001E3E            3289          ds.b      1
                    3290   _Timer2Count:
08001E40            3291          ds.b      1
                    3292   _Timer3Count:
08001E42            3293          ds.b      1
                    3294   _Timer4Count:
08001E44            3295          ds.b      1
                    3296          section   heap
08001E46            3297                  align
                    3298   
          0800 1E46 3299   BssEnd         equ       *
          0000 001C 3300   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    3301   
                    3302   *********************************************************************************************************
                    3303   * Section for Heap
                    3304   *********************************************************************************************************
                    3305   
          0800 1E46 3306   heap           equ       *
08001E46            3307                  align
          0800 0000

Assembly errors: 0
